
BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f78  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c0  080040c0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080040c0  080040c0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040c0  080040c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080040c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f8  20000014  080040dc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a0c  080040dc  00021a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001337a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003191  00000000  00000000  000333b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00037398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d6  00000000  00000000  000380d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe14  00000000  00000000  0004f9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b90c  00000000  00000000  0005f7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb0c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003974  00000000  00000000  000eb11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004070 	.word	0x08004070

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004070 	.word	0x08004070

08000150 <_ZN3BLE11receiveByteEv>:
#include"BLE.hpp"


uint8_t BLE::receiveByte(){
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    byteData = getRecieveByte();
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f000 fafb 	bl	8000754 <_ZN4Uart14getRecieveByteEv>
 800015e:	4603      	mov	r3, r0
 8000160:	461a      	mov	r2, r3
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	701a      	strb	r2, [r3, #0]
    return byteData;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	4618      	mov	r0, r3
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
	...

08000174 <_ZN3LedC1Ev>:
#include"LED.hpp"
#include "stm32f1xx_hal.h"

Led::Led(){
 8000174:	b580      	push	{r7, lr}
 8000176:	b088      	sub	sp, #32
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800017c:	f107 0310 	add.w	r3, r7, #16
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800018a:	4b12      	ldr	r3, [pc, #72]	; (80001d4 <_ZN3LedC1Ev+0x60>)
 800018c:	699b      	ldr	r3, [r3, #24]
 800018e:	4a11      	ldr	r2, [pc, #68]	; (80001d4 <_ZN3LedC1Ev+0x60>)
 8000190:	f043 0308 	orr.w	r3, r3, #8
 8000194:	6193      	str	r3, [r2, #24]
 8000196:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <_ZN3LedC1Ev+0x60>)
 8000198:	699b      	ldr	r3, [r3, #24]
 800019a:	f003 0308 	and.w	r3, r3, #8
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	2101      	movs	r1, #1
 80001a6:	480c      	ldr	r0, [pc, #48]	; (80001d8 <_ZN3LedC1Ev+0x64>)
 80001a8:	f000 fe86 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001ac:	2301      	movs	r3, #1
 80001ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001b0:	2301      	movs	r3, #1
 80001b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b4:	2300      	movs	r3, #0
 80001b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b8:	2302      	movs	r3, #2
 80001ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001bc:	f107 0310 	add.w	r3, r7, #16
 80001c0:	4619      	mov	r1, r3
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <_ZN3LedC1Ev+0x64>)
 80001c4:	f000 fcf4 	bl	8000bb0 <HAL_GPIO_Init>
}
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	4618      	mov	r0, r3
 80001cc:	3720      	adds	r7, #32
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40010c00 	.word	0x40010c00

080001dc <_ZN3Led6led_onEv>:
void Led::led_on(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState)1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <_ZN3Led6led_onEv+0x1c>)
 80001ea:	f000 fe65 	bl	8000eb8 <HAL_GPIO_WritePin>

}
 80001ee:	bf00      	nop
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010c00 	.word	0x40010c00

080001fc <_ZN3Led7led_offEv>:
void Led::led_off(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,(GPIO_PinState) 0);
 8000204:	2200      	movs	r2, #0
 8000206:	2101      	movs	r1, #1
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <_ZN3Led7led_offEv+0x1c>)
 800020a:	f000 fe55 	bl	8000eb8 <HAL_GPIO_WritePin>
 800020e:	bf00      	nop
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40010c00 	.word	0x40010c00

0800021c <main>:
// tasks
void ble_Task(void *param);
void led_Task(void *param);

int main(void)
{
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b095      	sub	sp, #84	; 0x54
 8000220:	af02      	add	r7, sp, #8
// system configuration
  HAL_Init();
 8000222:	f000 faa5 	bl	8000770 <HAL_Init>
  HAL_RCC_DeInit();
 8000226:	f000 fe5f 	bl	8000ee8 <HAL_RCC_DeInit>
  SystemCoreClockUpdate();
 800022a:	f000 f95f 	bl	80004ec <SystemCoreClockUpdate>
//configure uart2
  BLE::uartBaudRate(9600);
 800022e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000232:	f000 f9f3 	bl	800061c <_ZN4Uart12uartBaudRateEt>
  BLE::uartPeripheral((uint8_t)2);
 8000236:	2002      	movs	r0, #2
 8000238:	f000 fa00 	bl	800063c <_ZN4Uart14uartPeripheralEh>
  	  /////////////////////////////////////////////////

//  non blocking receive
  BLE::uartInit();
 800023c:	f000 fa5a 	bl	80006f4 <_ZN4Uart8uartInitEv>
  huart2 =  BLE::getUartHandler();
 8000240:	4c14      	ldr	r4, [pc, #80]	; (8000294 <main+0x78>)
 8000242:	463b      	mov	r3, r7
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fa43 	bl	80006d0 <_ZN4Uart14getUartHandlerEv>
 800024a:	4620      	mov	r0, r4
 800024c:	463b      	mov	r3, r7
 800024e:	2244      	movs	r2, #68	; 0x44
 8000250:	4619      	mov	r1, r3
 8000252:	f003 fef7 	bl	8004044 <memcpy>

  HAL_UART_Receive_IT(&huart2, BLE::recieveByteAddress(), 1);
 8000256:	f000 fa73 	bl	8000740 <_ZN4Uart18recieveByteAddressEv>
 800025a:	4603      	mov	r3, r0
 800025c:	2201      	movs	r2, #1
 800025e:	4619      	mov	r1, r3
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <main+0x78>)
 8000262:	f000 ff5a 	bl	800111a <HAL_UART_Receive_IT>
  	  ////////////////////////////////////////////////

  xTaskCreate(ble_Task, "ble", configMINIMAL_STACK_SIZE, NULL, 1, &BLE_Handler);
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <main+0x7c>)
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2300      	movs	r3, #0
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	490a      	ldr	r1, [pc, #40]	; (800029c <main+0x80>)
 8000274:	480a      	ldr	r0, [pc, #40]	; (80002a0 <main+0x84>)
 8000276:	f002 f981 	bl	800257c <xTaskCreate>
  xTaskCreate(led_Task, "led", configMINIMAL_STACK_SIZE, NULL, 1, &LED_Handler);
 800027a:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <main+0x88>)
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	2301      	movs	r3, #1
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2300      	movs	r3, #0
 8000284:	2280      	movs	r2, #128	; 0x80
 8000286:	4908      	ldr	r1, [pc, #32]	; (80002a8 <main+0x8c>)
 8000288:	4808      	ldr	r0, [pc, #32]	; (80002ac <main+0x90>)
 800028a:	f002 f977 	bl	800257c <xTaskCreate>
  vTaskStartScheduler();
 800028e:	f002 fab1 	bl	80027f4 <vTaskStartScheduler>
    while (1);
 8000292:	e7fe      	b.n	8000292 <main+0x76>
 8000294:	20000030 	.word	0x20000030
 8000298:	20000074 	.word	0x20000074
 800029c:	08004088 	.word	0x08004088
 80002a0:	080002b1 	.word	0x080002b1
 80002a4:	20000078 	.word	0x20000078
 80002a8:	0800408c 	.word	0x0800408c
 80002ac:	08000301 	.word	0x08000301

080002b0 <_Z8ble_TaskPv>:
}

void ble_Task(void *param){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	BLE ble;
	while(1){
		if(ble.receiveByte() == 'F'){
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff47 	bl	8000150 <_ZN3BLE11receiveByteEv>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b46      	cmp	r3, #70	; 0x46
 80002c6:	bf0c      	ite	eq
 80002c8:	2301      	moveq	r3, #1
 80002ca:	2300      	movne	r3, #0
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <_Z8ble_TaskPv+0x2a>
			ON = 0;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <_Z8ble_TaskPv+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e7ee      	b.n	80002b8 <_Z8ble_TaskPv+0x8>
		}else if(ble.receiveByte() == 'B'){
 80002da:	f107 030c 	add.w	r3, r7, #12
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff36 	bl	8000150 <_ZN3BLE11receiveByteEv>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b42      	cmp	r3, #66	; 0x42
 80002e8:	bf0c      	ite	eq
 80002ea:	2301      	moveq	r3, #1
 80002ec:	2300      	movne	r3, #0
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d0e1      	beq.n	80002b8 <_Z8ble_TaskPv+0x8>
			ON = 1;
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <_Z8ble_TaskPv+0x4c>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	701a      	strb	r2, [r3, #0]
		if(ble.receiveByte() == 'F'){
 80002fa:	e7dd      	b.n	80002b8 <_Z8ble_TaskPv+0x8>
 80002fc:	20000000 	.word	0x20000000

08000300 <_Z8led_TaskPv>:
		}
	}
}
void led_Task(void *param){
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	Led led;
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff31 	bl	8000174 <_ZN3LedC1Ev>
	while(1){
		if(ON) led.led_on();
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <_Z8led_TaskPv+0x34>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d005      	beq.n	8000326 <_Z8led_TaskPv+0x26>
 800031a:	f107 030c 	add.w	r3, r7, #12
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff5c 	bl	80001dc <_ZN3Led6led_onEv>
 8000324:	e7f5      	b.n	8000312 <_Z8led_TaskPv+0x12>
		else led.led_off();
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff66 	bl	80001fc <_ZN3Led7led_offEv>
		if(ON) led.led_on();
 8000330:	e7ef      	b.n	8000312 <_Z8led_TaskPv+0x12>
 8000332:	bf00      	nop
 8000334:	20000000 	.word	0x20000000

08000338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <HAL_MspInit+0x68>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	4a17      	ldr	r2, [pc, #92]	; (80003a0 <HAL_MspInit+0x68>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6193      	str	r3, [r2, #24]
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <HAL_MspInit+0x68>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000356:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <HAL_MspInit+0x68>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	4a11      	ldr	r2, [pc, #68]	; (80003a0 <HAL_MspInit+0x68>)
 800035c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000360:	61d3      	str	r3, [r2, #28]
 8000362:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <HAL_MspInit+0x68>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	210f      	movs	r1, #15
 8000372:	f06f 0001 	mvn.w	r0, #1
 8000376:	f000 fb34 	bl	80009e2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <HAL_MspInit+0x6c>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_MspInit+0x6c>)
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	3710      	adds	r7, #16
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010000 	.word	0x40010000

080003a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a1f      	ldr	r2, [pc, #124]	; (8000440 <HAL_UART_MspInit+0x98>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d137      	bne.n	8000438 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <HAL_UART_MspInit+0x9c>)
 80003ca:	69db      	ldr	r3, [r3, #28]
 80003cc:	4a1d      	ldr	r2, [pc, #116]	; (8000444 <HAL_UART_MspInit+0x9c>)
 80003ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d2:	61d3      	str	r3, [r2, #28]
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <HAL_UART_MspInit+0x9c>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <HAL_UART_MspInit+0x9c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a17      	ldr	r2, [pc, #92]	; (8000444 <HAL_UART_MspInit+0x9c>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_UART_MspInit+0x9c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003f8:	2304      	movs	r3, #4
 80003fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fc:	2302      	movs	r3, #2
 80003fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000400:	2303      	movs	r3, #3
 8000402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	4619      	mov	r1, r3
 800040a:	480f      	ldr	r0, [pc, #60]	; (8000448 <HAL_UART_MspInit+0xa0>)
 800040c:	f000 fbd0 	bl	8000bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000410:	2308      	movs	r3, #8
 8000412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	4619      	mov	r1, r3
 8000422:	4809      	ldr	r0, [pc, #36]	; (8000448 <HAL_UART_MspInit+0xa0>)
 8000424:	f000 fbc4 	bl	8000bb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	2105      	movs	r1, #5
 800042c:	2026      	movs	r0, #38	; 0x26
 800042e:	f000 fad8 	bl	80009e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000432:	2026      	movs	r0, #38	; 0x26
 8000434:	f000 faf1 	bl	8000a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000438:	bf00      	nop
 800043a:	3720      	adds	r7, #32
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40004400 	.word	0x40004400
 8000444:	40021000 	.word	0x40021000
 8000448:	40010800 	.word	0x40010800

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <NMI_Handler+0x4>

08000452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <MemManage_Handler+0x4>

0800045e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <UsageFault_Handler+0x4>

0800046a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr

08000476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000476:	b580      	push	{r7, lr}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047a:	f000 f9bf 	bl	80007fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800047e:	f002 fe05 	bl	800308c <xTaskGetSchedulerState>
 8000482:	4603      	mov	r3, r0
 8000484:	2b01      	cmp	r3, #1
 8000486:	bf14      	ite	ne
 8000488:	2301      	movne	r3, #1
 800048a:	2300      	moveq	r3, #0
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SysTick_Handler+0x20>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000492:	f003 fb59 	bl	8003b48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
	...

0800049c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <USART2_IRQHandler+0x10>)
 80004a2:	f000 fe6b 	bl	800117c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000030 	.word	0x20000030

080004b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart2.Instance)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <HAL_UART_RxCpltCallback+0x2c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d107      	bne.n	80004d4 <HAL_UART_RxCpltCallback+0x24>
    {
    	HAL_UART_Receive_IT(&huart2, BLE::recieveByteAddress(), 1);
 80004c4:	f000 f93c 	bl	8000740 <_ZN4Uart18recieveByteAddressEv>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2201      	movs	r2, #1
 80004cc:	4619      	mov	r1, r3
 80004ce:	4803      	ldr	r0, [pc, #12]	; (80004dc <HAL_UART_RxCpltCallback+0x2c>)
 80004d0:	f000 fe23 	bl	800111a <HAL_UART_Receive_IT>

    }
}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000030 	.word	0x20000030

080004e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004fe:	4b2f      	ldr	r3, [pc, #188]	; (80005bc <SystemCoreClockUpdate+0xd0>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	f003 030c 	and.w	r3, r3, #12
 8000506:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	2b08      	cmp	r3, #8
 800050c:	d011      	beq.n	8000532 <SystemCoreClockUpdate+0x46>
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2b08      	cmp	r3, #8
 8000512:	d83a      	bhi.n	800058a <SystemCoreClockUpdate+0x9e>
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d003      	beq.n	8000522 <SystemCoreClockUpdate+0x36>
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d004      	beq.n	800052a <SystemCoreClockUpdate+0x3e>
 8000520:	e033      	b.n	800058a <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000522:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 8000524:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemCoreClockUpdate+0xd8>)
 8000526:	601a      	str	r2, [r3, #0]
      break;
 8000528:	e033      	b.n	8000592 <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800052a:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 800052c:	4a25      	ldr	r2, [pc, #148]	; (80005c4 <SystemCoreClockUpdate+0xd8>)
 800052e:	601a      	str	r2, [r3, #0]
      break;
 8000530:	e02f      	b.n	8000592 <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000532:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemCoreClockUpdate+0xd0>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800053a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SystemCoreClockUpdate+0xd0>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000544:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	0c9b      	lsrs	r3, r3, #18
 800054a:	3302      	adds	r3, #2
 800054c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d106      	bne.n	8000562 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <SystemCoreClockUpdate+0xdc>)
 8000558:	fb02 f303 	mul.w	r3, r2, r3
 800055c:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 800055e:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000560:	e017      	b.n	8000592 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <SystemCoreClockUpdate+0xd0>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d006      	beq.n	800057c <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	4a15      	ldr	r2, [pc, #84]	; (80005c8 <SystemCoreClockUpdate+0xdc>)
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 8000578:	6013      	str	r3, [r2, #0]
      break;
 800057a:	e00a      	b.n	8000592 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <SystemCoreClockUpdate+0xd8>)
 8000580:	fb02 f303 	mul.w	r3, r2, r3
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 8000586:	6013      	str	r3, [r2, #0]
      break;
 8000588:	e003      	b.n	8000592 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800058a:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <SystemCoreClockUpdate+0xd8>)
 800058e:	601a      	str	r2, [r3, #0]
      break;
 8000590:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <SystemCoreClockUpdate+0xd0>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	091b      	lsrs	r3, r3, #4
 8000598:	f003 030f 	and.w	r3, r3, #15
 800059c:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <SystemCoreClockUpdate+0xe0>)
 800059e:	5cd3      	ldrb	r3, [r2, r3]
 80005a0:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	fa22 f303 	lsr.w	r3, r2, r3
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <SystemCoreClockUpdate+0xd4>)
 80005ae:	6013      	str	r3, [r2, #0]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	20000004 	.word	0x20000004
 80005c4:	007a1200 	.word	0x007a1200
 80005c8:	003d0900 	.word	0x003d0900
 80005cc:	080040a8 	.word	0x080040a8

080005d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005d2:	490d      	ldr	r1, [pc, #52]	; (8000608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005e8:	4c0a      	ldr	r4, [pc, #40]	; (8000614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005f6:	f7ff ff73 	bl	80004e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fa:	f003 fcff 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fe0d 	bl	800021c <main>
  bx lr
 8000602:	4770      	bx	lr
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800060c:	080040c8 	.word	0x080040c8
  ldr r2, =_sbss
 8000610:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000614:	20001a0c 	.word	0x20001a0c

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <_ZN4Uart12uartBaudRateEt>:
//   {
   
//   }
// }

void Uart::uartBaudRate(uint16_t rate_HZ){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
    huart.Init.BaudRate = 9600;
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <_ZN4Uart12uartBaudRateEt+0x1c>)
 8000628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800062c:	605a      	str	r2, [r3, #4]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	2000007c 	.word	0x2000007c

0800063c <_ZN4Uart14uartPeripheralEh>:
void Uart::uartPeripheral(uint8_t peripheral_num){
 800063c:	b480      	push	{r7}
 800063e:	b087      	sub	sp, #28
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]

    switch (peripheral_num)
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d002      	beq.n	8000652 <_ZN4Uart14uartPeripheralEh+0x16>
 800064c:	2b02      	cmp	r3, #2
 800064e:	d010      	beq.n	8000672 <_ZN4Uart14uartPeripheralEh+0x36>
 8000650:	e01f      	b.n	8000692 <_ZN4Uart14uartPeripheralEh+0x56>
    {
    case 1 :
        huart.Instance = USART1;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <_ZN4Uart14uartPeripheralEh+0x80>)
 8000654:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000656:	601a      	str	r2, [r3, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0304 	and.w	r3, r3, #4
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	697b      	ldr	r3, [r7, #20]
        break;
 8000670:	e01f      	b.n	80006b2 <_ZN4Uart14uartPeripheralEh+0x76>
    case 2:
    huart.Instance = USART2;
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <_ZN4Uart14uartPeripheralEh+0x80>)
 8000674:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <_ZN4Uart14uartPeripheralEh+0x8c>)
 8000676:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a11      	ldr	r2, [pc, #68]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	693b      	ldr	r3, [r7, #16]
    break;
 8000690:	e00f      	b.n	80006b2 <_ZN4Uart14uartPeripheralEh+0x76>
 
    default:
        huart.Instance = USART3;
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <_ZN4Uart14uartPeripheralEh+0x80>)
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <_ZN4Uart14uartPeripheralEh+0x90>)
 8000696:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <_ZN4Uart14uartPeripheralEh+0x88>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
        break;
 80006b0:	bf00      	nop
    }
    
    
}
 80006b2:	bf00      	nop
 80006b4:	371c      	adds	r7, #28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	40013800 	.word	0x40013800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40004400 	.word	0x40004400
 80006cc:	40004800 	.word	0x40004800

080006d0 <_ZN4Uart14getUartHandlerEv>:
UART_HandleTypeDef Uart::getUartHandler(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    return huart;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <_ZN4Uart14getUartHandlerEv+0x20>)
 80006dc:	4618      	mov	r0, r3
 80006de:	4611      	mov	r1, r2
 80006e0:	2344      	movs	r3, #68	; 0x44
 80006e2:	461a      	mov	r2, r3
 80006e4:	f003 fcae 	bl	8004044 <memcpy>
}
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000007c 	.word	0x2000007c

080006f4 <_ZN4Uart8uartInitEv>:


uint8_t Uart::uartInit(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <_ZN4Uart8uartInitEv+0x48>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <_ZN4Uart8uartInitEv+0x48>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <_ZN4Uart8uartInitEv+0x48>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <_ZN4Uart8uartInitEv+0x48>)
 800070c:	220c      	movs	r2, #12
 800070e:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <_ZN4Uart8uartInitEv+0x48>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <_ZN4Uart8uartInitEv+0x48>)
 8000718:	2200      	movs	r2, #0
 800071a:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart) != HAL_OK)
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <_ZN4Uart8uartInitEv+0x48>)
 800071e:	f000 fcaf 	bl	8001080 <HAL_UART_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf14      	ite	ne
 8000728:	2301      	movne	r3, #1
 800072a:	2300      	moveq	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <_ZN4Uart8uartInitEv+0x42>
        return 0;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <_ZN4Uart8uartInitEv+0x44>
    return 1;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000007c 	.word	0x2000007c

08000740 <_ZN4Uart18recieveByteAddressEv>:

uint8_t* Uart::recieveByteAddress(){
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
    return &recieveByte;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <_ZN4Uart18recieveByteAddressEv+0x10>)
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	200000c0 	.word	0x200000c0

08000754 <_ZN4Uart14getRecieveByteEv>:
uint8_t  Uart::getRecieveByte(){
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    return recieveByte;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <_ZN4Uart14getRecieveByteEv+0x18>)
 800075e:	781b      	ldrb	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000c0 	.word	0x200000c0

08000770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_Init+0x28>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_Init+0x28>)
 800077a:	f043 0310 	orr.w	r3, r3, #16
 800077e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000780:	2003      	movs	r0, #3
 8000782:	f000 f923 	bl	80009cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	200f      	movs	r0, #15
 8000788:	f000 f808 	bl	800079c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800078c:	f7ff fdd4 	bl	8000338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40022000 	.word	0x40022000

0800079c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <HAL_InitTick+0x54>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x58>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	4619      	mov	r1, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f93b 	bl	8000a36 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00e      	b.n	80007e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d80a      	bhi.n	80007e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d0:	2200      	movs	r2, #0
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d8:	f000 f903 	bl	80009e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4a06      	ldr	r2, [pc, #24]	; (80007f8 <HAL_InitTick+0x5c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000004 	.word	0x20000004
 80007f4:	2000000c 	.word	0x2000000c
 80007f8:	20000008 	.word	0x20000008

080007fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x1c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x20>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a03      	ldr	r2, [pc, #12]	; (800081c <HAL_IncTick+0x20>)
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	2000000c 	.word	0x2000000c
 800081c:	200019c8 	.word	0x200019c8

08000820 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b02      	ldr	r3, [pc, #8]	; (8000830 <HAL_GetTick+0x10>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	200019c8 	.word	0x200019c8

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <__NVIC_EnableIRQ+0x34>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000998:	d301      	bcc.n	800099e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099a:	2301      	movs	r3, #1
 800099c:	e00f      	b.n	80009be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <SysTick_Config+0x40>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a6:	210f      	movs	r1, #15
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ac:	f7ff ff90 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <SysTick_Config+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <SysTick_Config+0x40>)
 80009b8:	2207      	movs	r2, #7
 80009ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	e000e010 	.word	0xe000e010

080009cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff2d 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
 80009ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f4:	f7ff ff42 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68b9      	ldr	r1, [r7, #8]
 80009fe:	6978      	ldr	r0, [r7, #20]
 8000a00:	f7ff ff90 	bl	8000924 <NVIC_EncodePriority>
 8000a04:	4602      	mov	r2, r0
 8000a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff5f 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b082      	sub	sp, #8
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff35 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffa2 	bl	8000988 <SysTick_Config>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d008      	beq.n	8000a76 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2204      	movs	r2, #4
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e020      	b.n	8000ab8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f022 020e 	bic.w	r2, r2, #14
 8000a84:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0201 	bic.w	r2, r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d005      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2204      	movs	r2, #4
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e051      	b.n	8000b8a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 020e 	bic.w	r2, r2, #14
 8000af4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <HAL_DMA_Abort_IT+0xd0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d029      	beq.n	8000b64 <HAL_DMA_Abort_IT+0xa0>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a20      	ldr	r2, [pc, #128]	; (8000b98 <HAL_DMA_Abort_IT+0xd4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d022      	beq.n	8000b60 <HAL_DMA_Abort_IT+0x9c>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	; (8000b9c <HAL_DMA_Abort_IT+0xd8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d01a      	beq.n	8000b5a <HAL_DMA_Abort_IT+0x96>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_DMA_Abort_IT+0xdc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d012      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x90>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_DMA_Abort_IT+0xe0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d00a      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x8a>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <HAL_DMA_Abort_IT+0xe4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d102      	bne.n	8000b48 <HAL_DMA_Abort_IT+0x84>
 8000b42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b46:	e00e      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b4c:	e00b      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b52:	e008      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	e005      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5e:	e002      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b60:	2310      	movs	r3, #16
 8000b62:	e000      	b.n	8000b66 <HAL_DMA_Abort_IT+0xa2>
 8000b64:	2301      	movs	r3, #1
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_DMA_Abort_IT+0xe8>)
 8000b68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	4798      	blx	r3
    } 
  }
  return status;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40020008 	.word	0x40020008
 8000b98:	4002001c 	.word	0x4002001c
 8000b9c:	40020030 	.word	0x40020030
 8000ba0:	40020044 	.word	0x40020044
 8000ba4:	40020058 	.word	0x40020058
 8000ba8:	4002006c 	.word	0x4002006c
 8000bac:	40020000 	.word	0x40020000

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b08b      	sub	sp, #44	; 0x2c
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc2:	e169      	b.n	8000e98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f040 8158 	bne.w	8000e92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	4a9a      	ldr	r2, [pc, #616]	; (8000e50 <HAL_GPIO_Init+0x2a0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d05e      	beq.n	8000caa <HAL_GPIO_Init+0xfa>
 8000bec:	4a98      	ldr	r2, [pc, #608]	; (8000e50 <HAL_GPIO_Init+0x2a0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d875      	bhi.n	8000cde <HAL_GPIO_Init+0x12e>
 8000bf2:	4a98      	ldr	r2, [pc, #608]	; (8000e54 <HAL_GPIO_Init+0x2a4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d058      	beq.n	8000caa <HAL_GPIO_Init+0xfa>
 8000bf8:	4a96      	ldr	r2, [pc, #600]	; (8000e54 <HAL_GPIO_Init+0x2a4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d86f      	bhi.n	8000cde <HAL_GPIO_Init+0x12e>
 8000bfe:	4a96      	ldr	r2, [pc, #600]	; (8000e58 <HAL_GPIO_Init+0x2a8>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d052      	beq.n	8000caa <HAL_GPIO_Init+0xfa>
 8000c04:	4a94      	ldr	r2, [pc, #592]	; (8000e58 <HAL_GPIO_Init+0x2a8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d869      	bhi.n	8000cde <HAL_GPIO_Init+0x12e>
 8000c0a:	4a94      	ldr	r2, [pc, #592]	; (8000e5c <HAL_GPIO_Init+0x2ac>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d04c      	beq.n	8000caa <HAL_GPIO_Init+0xfa>
 8000c10:	4a92      	ldr	r2, [pc, #584]	; (8000e5c <HAL_GPIO_Init+0x2ac>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d863      	bhi.n	8000cde <HAL_GPIO_Init+0x12e>
 8000c16:	4a92      	ldr	r2, [pc, #584]	; (8000e60 <HAL_GPIO_Init+0x2b0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d046      	beq.n	8000caa <HAL_GPIO_Init+0xfa>
 8000c1c:	4a90      	ldr	r2, [pc, #576]	; (8000e60 <HAL_GPIO_Init+0x2b0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d85d      	bhi.n	8000cde <HAL_GPIO_Init+0x12e>
 8000c22:	2b12      	cmp	r3, #18
 8000c24:	d82a      	bhi.n	8000c7c <HAL_GPIO_Init+0xcc>
 8000c26:	2b12      	cmp	r3, #18
 8000c28:	d859      	bhi.n	8000cde <HAL_GPIO_Init+0x12e>
 8000c2a:	a201      	add	r2, pc, #4	; (adr r2, 8000c30 <HAL_GPIO_Init+0x80>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000cab 	.word	0x08000cab
 8000c34:	08000c85 	.word	0x08000c85
 8000c38:	08000c97 	.word	0x08000c97
 8000c3c:	08000cd9 	.word	0x08000cd9
 8000c40:	08000cdf 	.word	0x08000cdf
 8000c44:	08000cdf 	.word	0x08000cdf
 8000c48:	08000cdf 	.word	0x08000cdf
 8000c4c:	08000cdf 	.word	0x08000cdf
 8000c50:	08000cdf 	.word	0x08000cdf
 8000c54:	08000cdf 	.word	0x08000cdf
 8000c58:	08000cdf 	.word	0x08000cdf
 8000c5c:	08000cdf 	.word	0x08000cdf
 8000c60:	08000cdf 	.word	0x08000cdf
 8000c64:	08000cdf 	.word	0x08000cdf
 8000c68:	08000cdf 	.word	0x08000cdf
 8000c6c:	08000cdf 	.word	0x08000cdf
 8000c70:	08000cdf 	.word	0x08000cdf
 8000c74:	08000c8d 	.word	0x08000c8d
 8000c78:	08000ca1 	.word	0x08000ca1
 8000c7c:	4a79      	ldr	r2, [pc, #484]	; (8000e64 <HAL_GPIO_Init+0x2b4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d013      	beq.n	8000caa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c82:	e02c      	b.n	8000cde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	623b      	str	r3, [r7, #32]
          break;
 8000c8a:	e029      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	3304      	adds	r3, #4
 8000c92:	623b      	str	r3, [r7, #32]
          break;
 8000c94:	e024      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	623b      	str	r3, [r7, #32]
          break;
 8000c9e:	e01f      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	330c      	adds	r3, #12
 8000ca6:	623b      	str	r3, [r7, #32]
          break;
 8000ca8:	e01a      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d102      	bne.n	8000cb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	623b      	str	r3, [r7, #32]
          break;
 8000cb6:	e013      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d105      	bne.n	8000ccc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	611a      	str	r2, [r3, #16]
          break;
 8000cca:	e009      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	615a      	str	r2, [r3, #20]
          break;
 8000cd6:	e003      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	e000      	b.n	8000ce0 <HAL_GPIO_Init+0x130>
          break;
 8000cde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2bff      	cmp	r3, #255	; 0xff
 8000ce4:	d801      	bhi.n	8000cea <HAL_GPIO_Init+0x13a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	e001      	b.n	8000cee <HAL_GPIO_Init+0x13e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3304      	adds	r3, #4
 8000cee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	2bff      	cmp	r3, #255	; 0xff
 8000cf4:	d802      	bhi.n	8000cfc <HAL_GPIO_Init+0x14c>
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	e002      	b.n	8000d02 <HAL_GPIO_Init+0x152>
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	3b08      	subs	r3, #8
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	210f      	movs	r1, #15
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	6a39      	ldr	r1, [r7, #32]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 80b1 	beq.w	8000e92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d30:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <HAL_GPIO_Init+0x2b8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <HAL_GPIO_Init+0x2b8>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_GPIO_Init+0x2bc>)
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <HAL_GPIO_Init+0x2c0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x1ec>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a3f      	ldr	r2, [pc, #252]	; (8000e74 <HAL_GPIO_Init+0x2c4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_GPIO_Init+0x1e8>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a3e      	ldr	r2, [pc, #248]	; (8000e78 <HAL_GPIO_Init+0x2c8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x1e4>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a3d      	ldr	r2, [pc, #244]	; (8000e7c <HAL_GPIO_Init+0x2cc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_GPIO_Init+0x1e0>
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e006      	b.n	8000d9e <HAL_GPIO_Init+0x1ee>
 8000d90:	2304      	movs	r3, #4
 8000d92:	e004      	b.n	8000d9e <HAL_GPIO_Init+0x1ee>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e002      	b.n	8000d9e <HAL_GPIO_Init+0x1ee>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <HAL_GPIO_Init+0x1ee>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da0:	f002 0203 	and.w	r2, r2, #3
 8000da4:	0092      	lsls	r2, r2, #2
 8000da6:	4093      	lsls	r3, r2
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dae:	492f      	ldr	r1, [pc, #188]	; (8000e6c <HAL_GPIO_Init+0x2bc>)
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	492c      	ldr	r1, [pc, #176]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	600b      	str	r3, [r1, #0]
 8000dd4:	e006      	b.n	8000de4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4928      	ldr	r1, [pc, #160]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d006      	beq.n	8000dfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000df0:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	4922      	ldr	r1, [pc, #136]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]
 8000dfc:	e006      	b.n	8000e0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	491e      	ldr	r1, [pc, #120]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d006      	beq.n	8000e26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	4918      	ldr	r1, [pc, #96]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4914      	ldr	r1, [pc, #80]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d021      	beq.n	8000e84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	490e      	ldr	r1, [pc, #56]	; (8000e80 <HAL_GPIO_Init+0x2d0>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
 8000e4c:	e021      	b.n	8000e92 <HAL_GPIO_Init+0x2e2>
 8000e4e:	bf00      	nop
 8000e50:	10320000 	.word	0x10320000
 8000e54:	10310000 	.word	0x10310000
 8000e58:	10220000 	.word	0x10220000
 8000e5c:	10210000 	.word	0x10210000
 8000e60:	10120000 	.word	0x10120000
 8000e64:	10110000 	.word	0x10110000
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010000 	.word	0x40010000
 8000e70:	40010800 	.word	0x40010800
 8000e74:	40010c00 	.word	0x40010c00
 8000e78:	40011000 	.word	0x40011000
 8000e7c:	40011400 	.word	0x40011400
 8000e80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4909      	ldr	r1, [pc, #36]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	3301      	adds	r3, #1
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f47f ae8e 	bne.w	8000bc4 <HAL_GPIO_Init+0x14>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	372c      	adds	r7, #44	; 0x2c
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40010400 	.word	0x40010400

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	611a      	str	r2, [r3, #16]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000eee:	f7ff fc97 	bl	8000820 <HAL_GetTick>
 8000ef2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000ef4:	4b45      	ldr	r3, [pc, #276]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a44      	ldr	r2, [pc, #272]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f02:	f7ff fc8d 	bl	8000820 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e077      	b.n	8001004 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f14:	4b3d      	ldr	r3, [pc, #244]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f28:	4a38      	ldr	r2, [pc, #224]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f30:	f7ff fc76 	bl	8000820 <HAL_GetTick>
 8000f34:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000f36:	4b35      	ldr	r3, [pc, #212]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f3e:	f7ff fc6f 	bl	8000820 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e057      	b.n	8001004 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000f54:	4b2d      	ldr	r3, [pc, #180]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ee      	bne.n	8000f3e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <HAL_RCC_DeInit+0x128>)
 8000f62:	4a2c      	ldr	r2, [pc, #176]	; (8001014 <HAL_RCC_DeInit+0x12c>)
 8000f64:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_RCC_DeInit+0x130>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fc16 	bl	800079c <HAL_InitTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e044      	b.n	8001004 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f7a:	f7ff fc51 	bl	8000820 <HAL_GetTick>
 8000f7e:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a21      	ldr	r2, [pc, #132]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f8a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fc47 	bl	8000820 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e031      	b.n	8001004 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000fb2:	f7ff fc35 	bl	8000820 <HAL_GetTick>
 8000fb6:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000fbe:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc6:	f7ff fc2b 	bl	8000820 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e015      	b.n	8001004 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f0      	bne.n	8000fc6 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ffa:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_RCC_DeInit+0x124>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000
 8001010:	20000004 	.word	0x20000004
 8001014:	007a1200 	.word	0x007a1200
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <HAL_RCC_GetHCLKFreq+0x10>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001034:	f7ff fff2 	bl	800101c <HAL_RCC_GetHCLKFreq>
 8001038:	4602      	mov	r2, r0
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	0a1b      	lsrs	r3, r3, #8
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	4903      	ldr	r1, [pc, #12]	; (8001054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001046:	5ccb      	ldrb	r3, [r1, r3]
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	080040b8 	.word	0x080040b8

08001058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800105c:	f7ff ffde 	bl	800101c <HAL_RCC_GetHCLKFreq>
 8001060:	4602      	mov	r2, r0
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	0adb      	lsrs	r3, r3, #11
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	4903      	ldr	r1, [pc, #12]	; (800107c <HAL_RCC_GetPCLK2Freq+0x24>)
 800106e:	5ccb      	ldrb	r3, [r1, r3]
 8001070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001074:	4618      	mov	r0, r3
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	080040b8 	.word	0x080040b8

08001080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e03f      	b.n	8001112 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d106      	bne.n	80010ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff f97e 	bl	80003a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2224      	movs	r2, #36	; 0x24
 80010b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fba9 	bl	800181c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80010d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	695a      	ldr	r2, [r3, #20]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2220      	movs	r2, #32
 8001104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2220      	movs	r2, #32
 800110c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	4613      	mov	r3, r2
 8001126:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b20      	cmp	r3, #32
 8001132:	d11d      	bne.n	8001170 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d002      	beq.n	8001140 <HAL_UART_Receive_IT+0x26>
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e016      	b.n	8001172 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_UART_Receive_IT+0x38>
 800114e:	2302      	movs	r3, #2
 8001150:	e00f      	b.n	8001172 <HAL_UART_Receive_IT+0x58>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	461a      	mov	r2, r3
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 f9cf 	bl	800150a <UART_Start_Receive_IT>
 800116c:	4603      	mov	r3, r0
 800116e:	e000      	b.n	8001172 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001170:	2302      	movs	r3, #2
  }
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10d      	bne.n	80011ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_UART_IRQHandler+0x52>
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fa7f 	bl	80016ca <UART_Receive_IT>
      return;
 80011cc:	e17b      	b.n	80014c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80b1 	beq.w	8001338 <HAL_UART_IRQHandler+0x1bc>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <HAL_UART_IRQHandler+0x70>
 80011e0:	6a3b      	ldr	r3, [r7, #32]
 80011e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 80a6 	beq.w	8001338 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00a      	beq.n	800120c <HAL_UART_IRQHandler+0x90>
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f043 0201 	orr.w	r2, r3, #1
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00a      	beq.n	800122c <HAL_UART_IRQHandler+0xb0>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f043 0202 	orr.w	r2, r3, #2
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d00a      	beq.n	800124c <HAL_UART_IRQHandler+0xd0>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f043 0204 	orr.w	r2, r3, #4
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00f      	beq.n	8001276 <HAL_UART_IRQHandler+0xfa>
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d104      	bne.n	800126a <HAL_UART_IRQHandler+0xee>
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f043 0208 	orr.w	r2, r3, #8
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 811e 	beq.w	80014bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	f003 0320 	and.w	r3, r3, #32
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <HAL_UART_IRQHandler+0x11e>
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 fa18 	bl	80016ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	bf14      	ite	ne
 80012a8:	2301      	movne	r3, #1
 80012aa:	2300      	moveq	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <HAL_UART_IRQHandler+0x146>
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d031      	beq.n	8001326 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f95a 	bl	800157c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d023      	beq.n	800131e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d013      	beq.n	8001316 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f2:	4a76      	ldr	r2, [pc, #472]	; (80014cc <HAL_UART_IRQHandler+0x350>)
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fbe2 	bl	8000ac4 <HAL_DMA_Abort_IT>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d016      	beq.n	8001334 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001310:	4610      	mov	r0, r2
 8001312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001314:	e00e      	b.n	8001334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f8e3 	bl	80014e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800131c:	e00a      	b.n	8001334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f8df 	bl	80014e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001324:	e006      	b.n	8001334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f8db 	bl	80014e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001332:	e0c3      	b.n	80014bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001334:	bf00      	nop
    return;
 8001336:	e0c1      	b.n	80014bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 80a1 	bne.w	8001484 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 809b 	beq.w	8001484 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8095 	beq.w	8001484 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137a:	2b00      	cmp	r3, #0
 800137c:	d04e      	beq.n	800141c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001388:	8a3b      	ldrh	r3, [r7, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8098 	beq.w	80014c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001394:	8a3a      	ldrh	r2, [r7, #16]
 8001396:	429a      	cmp	r2, r3
 8001398:	f080 8092 	bcs.w	80014c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	8a3a      	ldrh	r2, [r7, #16]
 80013a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d02b      	beq.n	8001404 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68da      	ldr	r2, [r3, #12]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0210 	bic.w	r2, r2, #16
 80013f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fb25 	bl	8000a4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800140c:	b29b      	uxth	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b29b      	uxth	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f86d 	bl	80014f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800141a:	e051      	b.n	80014c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001424:	b29b      	uxth	r3, r3
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d047      	beq.n	80014c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001434:	8a7b      	ldrh	r3, [r7, #18]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d044      	beq.n	80014c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001448:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2220      	movs	r2, #32
 800145e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0210 	bic.w	r2, r2, #16
 8001476:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001478:	8a7b      	ldrh	r3, [r7, #18]
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f839 	bl	80014f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001482:	e01f      	b.n	80014c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_UART_IRQHandler+0x324>
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8af 	bl	80015fc <UART_Transmit_IT>
    return;
 800149e:	e012      	b.n	80014c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00d      	beq.n	80014c6 <HAL_UART_IRQHandler+0x34a>
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f8f0 	bl	800169a <UART_EndTransmit_IT>
    return;
 80014ba:	e004      	b.n	80014c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80014bc:	bf00      	nop
 80014be:	e002      	b.n	80014c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80014c0:	bf00      	nop
 80014c2:	e000      	b.n	80014c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80014c4:	bf00      	nop
  }
}
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	080015d5 	.word	0x080015d5

080014d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800150a:	b480      	push	{r7}
 800150c:	b085      	sub	sp, #20
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	4613      	mov	r3, r2
 8001516:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88fa      	ldrh	r2, [r7, #6]
 8001522:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2222      	movs	r2, #34	; 0x22
 8001534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800154e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0220 	orr.w	r2, r2, #32
 800156e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001592:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d107      	bne.n	80015bc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0210 	bic.w	r2, r2, #16
 80015ba:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff ff77 	bl	80014e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b21      	cmp	r3, #33	; 0x21
 800160e:	d13e      	bne.n	800168e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001618:	d114      	bne.n	8001644 <UART_Transmit_IT+0x48>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d110      	bne.n	8001644 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001636:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	1c9a      	adds	r2, r3, #2
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	621a      	str	r2, [r3, #32]
 8001642:	e008      	b.n	8001656 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	1c59      	adds	r1, r3, #1
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6211      	str	r1, [r2, #32]
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	4619      	mov	r1, r3
 8001664:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001678:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001688:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800168e:	2302      	movs	r3, #2
  }
}
 8001690:	4618      	mov	r0, r3
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2220      	movs	r2, #32
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff08 	bl	80014d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b22      	cmp	r3, #34	; 0x22
 80016dc:	f040 8099 	bne.w	8001812 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e8:	d117      	bne.n	800171a <UART_Receive_IT+0x50>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d113      	bne.n	800171a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	b29b      	uxth	r3, r3
 8001704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001708:	b29a      	uxth	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	1c9a      	adds	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
 8001718:	e026      	b.n	8001768 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172c:	d007      	beq.n	800173e <UART_Receive_IT+0x74>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10a      	bne.n	800174c <UART_Receive_IT+0x82>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	e008      	b.n	800175e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001758:	b2da      	uxtb	r2, r3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800176c:	b29b      	uxth	r3, r3
 800176e:	3b01      	subs	r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	4619      	mov	r1, r3
 8001776:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001778:	2b00      	cmp	r3, #0
 800177a:	d148      	bne.n	800180e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0220 	bic.w	r2, r2, #32
 800178a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800179a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0201 	bic.w	r2, r2, #1
 80017aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d123      	bne.n	8001804 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0210 	bic.w	r2, r2, #16
 80017d0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d10a      	bne.n	80017f6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fe79 	bl	80014f4 <HAL_UARTEx_RxEventCallback>
 8001802:	e002      	b.n	800180a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7fe fe53 	bl	80004b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e002      	b.n	8001814 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001812:	2302      	movs	r3, #2
  }
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4313      	orrs	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001856:	f023 030c 	bic.w	r3, r3, #12
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	430b      	orrs	r3, r1
 8001862:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2c      	ldr	r2, [pc, #176]	; (8001930 <UART_SetConfig+0x114>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d103      	bne.n	800188c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001884:	f7ff fbe8 	bl	8001058 <HAL_RCC_GetPCLK2Freq>
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	e002      	b.n	8001892 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800188c:	f7ff fbd0 	bl	8001030 <HAL_RCC_GetPCLK1Freq>
 8001890:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	009a      	lsls	r2, r3, #2
 800189c:	441a      	add	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <UART_SetConfig+0x118>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	0119      	lsls	r1, r3, #4
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	009a      	lsls	r2, r3, #2
 80018bc:	441a      	add	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <UART_SetConfig+0x118>)
 80018ca:	fba3 0302 	umull	r0, r3, r3, r2
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2064      	movs	r0, #100	; 0x64
 80018d2:	fb00 f303 	mul.w	r3, r0, r3
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	3332      	adds	r3, #50	; 0x32
 80018dc:	4a15      	ldr	r2, [pc, #84]	; (8001934 <UART_SetConfig+0x118>)
 80018de:	fba2 2303 	umull	r2, r3, r2, r3
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e8:	4419      	add	r1, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	009a      	lsls	r2, r3, #2
 80018f4:	441a      	add	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <UART_SetConfig+0x118>)
 8001902:	fba3 0302 	umull	r0, r3, r3, r2
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2064      	movs	r0, #100	; 0x64
 800190a:	fb00 f303 	mul.w	r3, r0, r3
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	3332      	adds	r3, #50	; 0x32
 8001914:	4a07      	ldr	r2, [pc, #28]	; (8001934 <UART_SetConfig+0x118>)
 8001916:	fba2 2303 	umull	r2, r3, r2, r3
 800191a:	095b      	lsrs	r3, r3, #5
 800191c:	f003 020f 	and.w	r2, r3, #15
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	440a      	add	r2, r1
 8001926:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40013800 	.word	0x40013800
 8001934:	51eb851f 	.word	0x51eb851f

08001938 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4a06      	ldr	r2, [pc, #24]	; (8001960 <vApplicationGetIdleTaskMemory+0x28>)
 8001948:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <vApplicationGetIdleTaskMemory+0x2c>)
 800194e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	200000c4 	.word	0x200000c4
 8001964:	20000120 	.word	0x20000120

08001968 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <vApplicationGetTimerTaskMemory+0x2c>)
 8001978:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <vApplicationGetTimerTaskMemory+0x30>)
 800197e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000320 	.word	0x20000320
 8001998:	2000037c 	.word	0x2000037c

0800199c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f103 0208 	add.w	r2, r3, #8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f103 0208 	add.w	r2, r3, #8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f103 0208 	add.w	r2, r3, #8
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a4e:	d103      	bne.n	8001a58 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e00c      	b.n	8001a72 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3308      	adds	r3, #8
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e002      	b.n	8001a66 <vListInsert+0x2e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d2f6      	bcs.n	8001a60 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	601a      	str	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6892      	ldr	r2, [r2, #8]
 8001abe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	6852      	ldr	r2, [r2, #4]
 8001ac8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d103      	bne.n	8001adc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10a      	bne.n	8001b26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b14:	f383 8811 	msr	BASEPRI, r3
 8001b18:	f3bf 8f6f 	isb	sy
 8001b1c:	f3bf 8f4f 	dsb	sy
 8001b20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b22:	bf00      	nop
 8001b24:	e7fe      	b.n	8001b24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001b26:	f001 ff91 	bl	8003a4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b32:	68f9      	ldr	r1, [r7, #12]
 8001b34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	441a      	add	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b56:	3b01      	subs	r3, #1
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	441a      	add	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	22ff      	movs	r2, #255	; 0xff
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	22ff      	movs	r2, #255	; 0xff
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d114      	bne.n	8001ba6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01a      	beq.n	8001bba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3310      	adds	r3, #16
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f001 f8bd 	bl	8002d08 <xTaskRemoveFromEventList>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d012      	beq.n	8001bba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <xQueueGenericReset+0xcc>)
 8001b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	f3bf 8f6f 	isb	sy
 8001ba4:	e009      	b.n	8001bba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3310      	adds	r3, #16
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fef6 	bl	800199c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3324      	adds	r3, #36	; 0x24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fef1 	bl	800199c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001bba:	f001 ff77 	bl	8003aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001bbe:	2301      	movs	r3, #1
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	e000ed04 	.word	0xe000ed04

08001bcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08e      	sub	sp, #56	; 0x38
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be4:	f383 8811 	msr	BASEPRI, r3
 8001be8:	f3bf 8f6f 	isb	sy
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001bf2:	bf00      	nop
 8001bf4:	e7fe      	b.n	8001bf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10a      	bne.n	8001c12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001c0e:	bf00      	nop
 8001c10:	e7fe      	b.n	8001c10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <xQueueGenericCreateStatic+0x52>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <xQueueGenericCreateStatic+0x56>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <xQueueGenericCreateStatic+0x58>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10a      	bne.n	8001c3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2c:	f383 8811 	msr	BASEPRI, r3
 8001c30:	f3bf 8f6f 	isb	sy
 8001c34:	f3bf 8f4f 	dsb	sy
 8001c38:	623b      	str	r3, [r7, #32]
}
 8001c3a:	bf00      	nop
 8001c3c:	e7fe      	b.n	8001c3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <xQueueGenericCreateStatic+0x7e>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <xQueueGenericCreateStatic+0x82>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <xQueueGenericCreateStatic+0x84>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10a      	bne.n	8001c6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	61fb      	str	r3, [r7, #28]
}
 8001c66:	bf00      	nop
 8001c68:	e7fe      	b.n	8001c68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c6a:	2350      	movs	r3, #80	; 0x50
 8001c6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b50      	cmp	r3, #80	; 0x50
 8001c72:	d00a      	beq.n	8001c8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	61bb      	str	r3, [r7, #24]
}
 8001c86:	bf00      	nop
 8001c88:	e7fe      	b.n	8001c88 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00d      	beq.n	8001cb0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f000 f805 	bl	8001cba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d103      	bne.n	8001cd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e002      	b.n	8001cdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ce8:	2101      	movs	r1, #1
 8001cea:	69b8      	ldr	r0, [r7, #24]
 8001cec:	f7ff ff06 	bl	8001afc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08e      	sub	sp, #56	; 0x38
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <xQueueGenericSend+0x32>
	__asm volatile
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001d2e:	bf00      	nop
 8001d30:	e7fe      	b.n	8001d30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d103      	bne.n	8001d40 <xQueueGenericSend+0x40>
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <xQueueGenericSend+0x44>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <xQueueGenericSend+0x46>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <xQueueGenericSend+0x60>
	__asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d5c:	bf00      	nop
 8001d5e:	e7fe      	b.n	8001d5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d103      	bne.n	8001d6e <xQueueGenericSend+0x6e>
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <xQueueGenericSend+0x72>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <xQueueGenericSend+0x74>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <xQueueGenericSend+0x8e>
	__asm volatile
 8001d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	f3bf 8f6f 	isb	sy
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	623b      	str	r3, [r7, #32]
}
 8001d8a:	bf00      	nop
 8001d8c:	e7fe      	b.n	8001d8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d8e:	f001 f97d 	bl	800308c <xTaskGetSchedulerState>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <xQueueGenericSend+0x9e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <xQueueGenericSend+0xa2>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <xQueueGenericSend+0xa4>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <xQueueGenericSend+0xbe>
	__asm volatile
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	61fb      	str	r3, [r7, #28]
}
 8001dba:	bf00      	nop
 8001dbc:	e7fe      	b.n	8001dbc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dbe:	f001 fe45 	bl	8003a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d302      	bcc.n	8001dd4 <xQueueGenericSend+0xd4>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d129      	bne.n	8001e28 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001dda:	f000 fa07 	bl	80021ec <prvCopyDataToQueue>
 8001dde:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d010      	beq.n	8001e0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dea:	3324      	adds	r3, #36	; 0x24
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 ff8b 	bl	8002d08 <xTaskRemoveFromEventList>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001df8:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <xQueueGenericSend+0x1f8>)
 8001dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	e00a      	b.n	8001e20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d007      	beq.n	8001e20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001e10:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <xQueueGenericSend+0x1f8>)
 8001e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f3bf 8f4f 	dsb	sy
 8001e1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001e20:	f001 fe44 	bl	8003aac <vPortExitCritical>
				return pdPASS;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e063      	b.n	8001ef0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e2e:	f001 fe3d 	bl	8003aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e05c      	b.n	8001ef0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 ffc5 	bl	8002dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e46:	2301      	movs	r3, #1
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e4a:	f001 fe2f 	bl	8003aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e4e:	f000 fd37 	bl	80028c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e52:	f001 fdfb 	bl	8003a4c <vPortEnterCritical>
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e62:	d103      	bne.n	8001e6c <xQueueGenericSend+0x16c>
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e78:	d103      	bne.n	8001e82 <xQueueGenericSend+0x182>
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e82:	f001 fe13 	bl	8003aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e86:	1d3a      	adds	r2, r7, #4
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 ffb4 	bl	8002dfc <xTaskCheckForTimeOut>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d124      	bne.n	8001ee4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e9c:	f000 fa9e 	bl	80023dc <prvIsQueueFull>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d018      	beq.n	8001ed8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea8:	3310      	adds	r3, #16
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 feda 	bl	8002c68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eb6:	f000 fa29 	bl	800230c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001eba:	f000 fd0f 	bl	80028dc <xTaskResumeAll>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f47f af7c 	bne.w	8001dbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <xQueueGenericSend+0x1f8>)
 8001ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	f3bf 8f6f 	isb	sy
 8001ed6:	e772      	b.n	8001dbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001eda:	f000 fa17 	bl	800230c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ede:	f000 fcfd 	bl	80028dc <xTaskResumeAll>
 8001ee2:	e76c      	b.n	8001dbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ee6:	f000 fa11 	bl	800230c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001eea:	f000 fcf7 	bl	80028dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001eee:	2300      	movs	r3, #0
		}
	}
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3738      	adds	r7, #56	; 0x38
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	e000ed04 	.word	0xe000ed04

08001efc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	; 0x38
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10a      	bne.n	8001f2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f18:	f383 8811 	msr	BASEPRI, r3
 8001f1c:	f3bf 8f6f 	isb	sy
 8001f20:	f3bf 8f4f 	dsb	sy
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f26:	bf00      	nop
 8001f28:	e7fe      	b.n	8001f28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d103      	bne.n	8001f38 <xQueueGenericSendFromISR+0x3c>
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <xQueueGenericSendFromISR+0x40>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <xQueueGenericSendFromISR+0x42>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	623b      	str	r3, [r7, #32]
}
 8001f54:	bf00      	nop
 8001f56:	e7fe      	b.n	8001f56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d103      	bne.n	8001f66 <xQueueGenericSendFromISR+0x6a>
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <xQueueGenericSendFromISR+0x6e>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <xQueueGenericSendFromISR+0x70>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f74:	f383 8811 	msr	BASEPRI, r3
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	f3bf 8f4f 	dsb	sy
 8001f80:	61fb      	str	r3, [r7, #28]
}
 8001f82:	bf00      	nop
 8001f84:	e7fe      	b.n	8001f84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f86:	f001 fe23 	bl	8003bd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8001f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f92:	f383 8811 	msr	BASEPRI, r3
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	f3bf 8f4f 	dsb	sy
 8001f9e:	61ba      	str	r2, [r7, #24]
 8001fa0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001fa2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d302      	bcc.n	8001fb8 <xQueueGenericSendFromISR+0xbc>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d12c      	bne.n	8002012 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fc8:	f000 f910 	bl	80021ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001fcc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd4:	d112      	bne.n	8001ffc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	3324      	adds	r3, #36	; 0x24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fe90 	bl	8002d08 <xTaskRemoveFromEventList>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00e      	beq.n	800200c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e007      	b.n	800200c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002000:	3301      	adds	r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	b25a      	sxtb	r2, r3
 8002006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800200c:	2301      	movs	r3, #1
 800200e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002010:	e001      	b.n	8002016 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002012:	2300      	movs	r3, #0
 8002014:	637b      	str	r3, [r7, #52]	; 0x34
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002020:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002024:	4618      	mov	r0, r3
 8002026:	3738      	adds	r7, #56	; 0x38
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	; 0x30
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002038:	2300      	movs	r3, #0
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10a      	bne.n	800205c <xQueueReceive+0x30>
	__asm volatile
 8002046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204a:	f383 8811 	msr	BASEPRI, r3
 800204e:	f3bf 8f6f 	isb	sy
 8002052:	f3bf 8f4f 	dsb	sy
 8002056:	623b      	str	r3, [r7, #32]
}
 8002058:	bf00      	nop
 800205a:	e7fe      	b.n	800205a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <xQueueReceive+0x3e>
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <xQueueReceive+0x42>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <xQueueReceive+0x44>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <xQueueReceive+0x5e>
	__asm volatile
 8002074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
 8002084:	61fb      	str	r3, [r7, #28]
}
 8002086:	bf00      	nop
 8002088:	e7fe      	b.n	8002088 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800208a:	f000 ffff 	bl	800308c <xTaskGetSchedulerState>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <xQueueReceive+0x6e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <xQueueReceive+0x72>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <xQueueReceive+0x74>
 800209e:	2300      	movs	r3, #0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <xQueueReceive+0x8e>
	__asm volatile
 80020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	61bb      	str	r3, [r7, #24]
}
 80020b6:	bf00      	nop
 80020b8:	e7fe      	b.n	80020b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80020ba:	f001 fcc7 	bl	8003a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01f      	beq.n	800210a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ce:	f000 f8f7 	bl	80022c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00f      	beq.n	8002102 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	3310      	adds	r3, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fe0e 	bl	8002d08 <xTaskRemoveFromEventList>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <xQueueReceive+0x1bc>)
 80020f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002102:	f001 fcd3 	bl	8003aac <vPortExitCritical>
				return pdPASS;
 8002106:	2301      	movs	r3, #1
 8002108:	e069      	b.n	80021de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d103      	bne.n	8002118 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002110:	f001 fccc 	bl	8003aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002114:	2300      	movs	r3, #0
 8002116:	e062      	b.n	80021de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fe54 	bl	8002dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002128:	2301      	movs	r3, #1
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800212c:	f001 fcbe 	bl	8003aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002130:	f000 fbc6 	bl	80028c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002134:	f001 fc8a 	bl	8003a4c <vPortEnterCritical>
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800213e:	b25b      	sxtb	r3, r3
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002144:	d103      	bne.n	800214e <xQueueReceive+0x122>
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002154:	b25b      	sxtb	r3, r3
 8002156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800215a:	d103      	bne.n	8002164 <xQueueReceive+0x138>
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002164:	f001 fca2 	bl	8003aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002168:	1d3a      	adds	r2, r7, #4
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fe43 	bl	8002dfc <xTaskCheckForTimeOut>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d123      	bne.n	80021c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800217c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800217e:	f000 f917 	bl	80023b0 <prvIsQueueEmpty>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d017      	beq.n	80021b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	3324      	adds	r3, #36	; 0x24
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fd69 	bl	8002c68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002198:	f000 f8b8 	bl	800230c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800219c:	f000 fb9e 	bl	80028dc <xTaskResumeAll>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d189      	bne.n	80020ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <xQueueReceive+0x1bc>)
 80021a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	e780      	b.n	80020ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80021b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021ba:	f000 f8a7 	bl	800230c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021be:	f000 fb8d 	bl	80028dc <xTaskResumeAll>
 80021c2:	e77a      	b.n	80020ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80021c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021c6:	f000 f8a1 	bl	800230c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021ca:	f000 fb87 	bl	80028dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021d0:	f000 f8ee 	bl	80023b0 <prvIsQueueEmpty>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f43f af6f 	beq.w	80020ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80021dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3730      	adds	r7, #48	; 0x30
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000ed04 	.word	0xe000ed04

080021ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d14d      	bne.n	80022ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 ff56 	bl	80030c8 <xTaskPriorityDisinherit>
 800221c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	e043      	b.n	80022ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d119      	bne.n	8002260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6898      	ldr	r0, [r3, #8]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	461a      	mov	r2, r3
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	f001 ff04 	bl	8004044 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	441a      	add	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d32b      	bcc.n	80022ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	e026      	b.n	80022ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68d8      	ldr	r0, [r3, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	461a      	mov	r2, r3
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	f001 feea 	bl	8004044 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	425b      	negs	r3, r3
 800227a:	441a      	add	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002294:	425b      	negs	r3, r3
 8002296:	441a      	add	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d105      	bne.n	80022ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80022b6:	697b      	ldr	r3, [r7, #20]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d018      	beq.n	8002304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	441a      	add	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d303      	bcc.n	80022f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68d9      	ldr	r1, [r3, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	461a      	mov	r2, r3
 80022fe:	6838      	ldr	r0, [r7, #0]
 8002300:	f001 fea0 	bl	8004044 <memcpy>
	}
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002314:	f001 fb9a 	bl	8003a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800231e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002320:	e011      	b.n	8002346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d012      	beq.n	8002350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3324      	adds	r3, #36	; 0x24
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fcea 	bl	8002d08 <xTaskRemoveFromEventList>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800233a:	f000 fdc1 	bl	8002ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	3b01      	subs	r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	dce9      	bgt.n	8002322 <prvUnlockQueue+0x16>
 800234e:	e000      	b.n	8002352 <prvUnlockQueue+0x46>
					break;
 8002350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	22ff      	movs	r2, #255	; 0xff
 8002356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800235a:	f001 fba7 	bl	8003aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800235e:	f001 fb75 	bl	8003a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800236a:	e011      	b.n	8002390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d012      	beq.n	800239a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3310      	adds	r3, #16
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fcc5 	bl	8002d08 <xTaskRemoveFromEventList>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002384:	f000 fd9c 	bl	8002ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002388:	7bbb      	ldrb	r3, [r7, #14]
 800238a:	3b01      	subs	r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002394:	2b00      	cmp	r3, #0
 8002396:	dce9      	bgt.n	800236c <prvUnlockQueue+0x60>
 8002398:	e000      	b.n	800239c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800239a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	22ff      	movs	r2, #255	; 0xff
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80023a4:	f001 fb82 	bl	8003aac <vPortExitCritical>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023b8:	f001 fb48 	bl	8003a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e001      	b.n	80023ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023ce:	f001 fb6d 	bl	8003aac <vPortExitCritical>

	return xReturn;
 80023d2:	68fb      	ldr	r3, [r7, #12]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023e4:	f001 fb32 	bl	8003a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d102      	bne.n	80023fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e001      	b.n	80023fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023fe:	f001 fb55 	bl	8003aac <vPortExitCritical>

	return xReturn;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e014      	b.n	8002446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <vQueueAddToRegistry+0x4c>)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10b      	bne.n	8002440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002428:	490b      	ldr	r1, [pc, #44]	; (8002458 <vQueueAddToRegistry+0x4c>)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <vQueueAddToRegistry+0x4c>)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4413      	add	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800243e:	e006      	b.n	800244e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3301      	adds	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b07      	cmp	r3, #7
 800244a:	d9e7      	bls.n	800241c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	200019cc 	.word	0x200019cc

0800245c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800246c:	f001 faee 	bl	8003a4c <vPortEnterCritical>
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002476:	b25b      	sxtb	r3, r3
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800247c:	d103      	bne.n	8002486 <vQueueWaitForMessageRestricted+0x2a>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800248c:	b25b      	sxtb	r3, r3
 800248e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002492:	d103      	bne.n	800249c <vQueueWaitForMessageRestricted+0x40>
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800249c:	f001 fb06 	bl	8003aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3324      	adds	r3, #36	; 0x24
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fbfd 	bl	8002cb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff28 	bl	800230c <prvUnlockQueue>
	}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80024d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	623b      	str	r3, [r7, #32]
}
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <xTaskCreateStatic+0x46>
	__asm volatile
 80024f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f8:	f383 8811 	msr	BASEPRI, r3
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f3bf 8f4f 	dsb	sy
 8002504:	61fb      	str	r3, [r7, #28]
}
 8002506:	bf00      	nop
 8002508:	e7fe      	b.n	8002508 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800250a:	235c      	movs	r3, #92	; 0x5c
 800250c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b5c      	cmp	r3, #92	; 0x5c
 8002512:	d00a      	beq.n	800252a <xTaskCreateStatic+0x66>
	__asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	61bb      	str	r3, [r7, #24]
}
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800252a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01e      	beq.n	800256e <xTaskCreateStatic+0xaa>
 8002530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002532:	2b00      	cmp	r3, #0
 8002534:	d01b      	beq.n	800256e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800253e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002548:	2300      	movs	r3, #0
 800254a:	9303      	str	r3, [sp, #12]
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f850 	bl	8002606 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002568:	f000 f8d4 	bl	8002714 <prvAddNewTaskToReadyList>
 800256c:	e001      	b.n	8002572 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002572:	697b      	ldr	r3, [r7, #20]
	}
 8002574:	4618      	mov	r0, r3
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af04      	add	r7, sp, #16
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	4613      	mov	r3, r2
 800258a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4618      	mov	r0, r3
 8002592:	f001 fb5b 	bl	8003c4c <pvPortMalloc>
 8002596:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800259e:	205c      	movs	r0, #92	; 0x5c
 80025a0:	f001 fb54 	bl	8003c4c <pvPortMalloc>
 80025a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
 80025b2:	e005      	b.n	80025c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80025b4:	6978      	ldr	r0, [r7, #20]
 80025b6:	f001 fc0d 	bl	8003dd4 <vPortFree>
 80025ba:	e001      	b.n	80025c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d017      	beq.n	80025f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9303      	str	r3, [sp, #12]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f80e 	bl	8002606 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025ea:	69f8      	ldr	r0, [r7, #28]
 80025ec:	f000 f892 	bl	8002714 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61bb      	str	r3, [r7, #24]
 80025f4:	e002      	b.n	80025fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025fc:	69bb      	ldr	r3, [r7, #24]
	}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b088      	sub	sp, #32
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	461a      	mov	r2, r3
 800261e:	21a5      	movs	r1, #165	; 0xa5
 8002620:	f001 fd1e 	bl	8004060 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800262e:	3b01      	subs	r3, #1
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f023 0307 	bic.w	r3, r3, #7
 800263c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <prvInitialiseNewTask+0x58>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	617b      	str	r3, [r7, #20]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e012      	b.n	800268a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	7819      	ldrb	r1, [r3, #0]
 800266c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	4413      	add	r3, r2
 8002672:	3334      	adds	r3, #52	; 0x34
 8002674:	460a      	mov	r2, r1
 8002676:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3301      	adds	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	2b0f      	cmp	r3, #15
 800268e:	d9e9      	bls.n	8002664 <prvInitialiseNewTask+0x5e>
 8002690:	e000      	b.n	8002694 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002692:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	2b37      	cmp	r3, #55	; 0x37
 80026a0:	d901      	bls.n	80026a6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026a2:	2337      	movs	r3, #55	; 0x37
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026b0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	2200      	movs	r2, #0
 80026b6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	3304      	adds	r3, #4
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f98c 	bl	80019da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	3318      	adds	r3, #24
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f987 	bl	80019da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	2200      	movs	r2, #0
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	69b8      	ldr	r0, [r7, #24]
 80026f6:	f001 f8bb 	bl	8003870 <pxPortInitialiseStack>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800270c:	bf00      	nop
 800270e:	3720      	adds	r7, #32
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800271c:	f001 f996 	bl	8003a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002720:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <prvAddNewTaskToReadyList+0xc4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	4a2c      	ldr	r2, [pc, #176]	; (80027d8 <prvAddNewTaskToReadyList+0xc4>)
 8002728:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002732:	4a2a      	ldr	r2, [pc, #168]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <prvAddNewTaskToReadyList+0xc4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d110      	bne.n	8002762 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002740:	f000 fbe2 	bl	8002f08 <prvInitialiseTaskLists>
 8002744:	e00d      	b.n	8002762 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <prvAddNewTaskToReadyList+0xcc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	429a      	cmp	r2, r3
 800275a:	d802      	bhi.n	8002762 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800275c:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <prvAddNewTaskToReadyList+0xd0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <prvAddNewTaskToReadyList+0xd0>)
 800276a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <prvAddNewTaskToReadyList+0xd0>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	4b1b      	ldr	r3, [pc, #108]	; (80027e8 <prvAddNewTaskToReadyList+0xd4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d903      	bls.n	8002788 <prvAddNewTaskToReadyList+0x74>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <prvAddNewTaskToReadyList+0xd4>)
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4a15      	ldr	r2, [pc, #84]	; (80027ec <prvAddNewTaskToReadyList+0xd8>)
 8002796:	441a      	add	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7ff f927 	bl	80019f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027a4:	f001 f982 	bl	8003aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <prvAddNewTaskToReadyList+0xcc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00e      	beq.n	80027ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <prvAddNewTaskToReadyList+0xc8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d207      	bcs.n	80027ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027be:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <prvAddNewTaskToReadyList+0xdc>)
 80027c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000c50 	.word	0x20000c50
 80027dc:	2000077c 	.word	0x2000077c
 80027e0:	20000c5c 	.word	0x20000c5c
 80027e4:	20000c6c 	.word	0x20000c6c
 80027e8:	20000c58 	.word	0x20000c58
 80027ec:	20000780 	.word	0x20000780
 80027f0:	e000ed04 	.word	0xe000ed04

080027f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002802:	463a      	mov	r2, r7
 8002804:	1d39      	adds	r1, r7, #4
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff f894 	bl	8001938 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002810:	6839      	ldr	r1, [r7, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	9202      	str	r2, [sp, #8]
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	2300      	movs	r3, #0
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2300      	movs	r3, #0
 8002820:	460a      	mov	r2, r1
 8002822:	4921      	ldr	r1, [pc, #132]	; (80028a8 <vTaskStartScheduler+0xb4>)
 8002824:	4821      	ldr	r0, [pc, #132]	; (80028ac <vTaskStartScheduler+0xb8>)
 8002826:	f7ff fe4d 	bl	80024c4 <xTaskCreateStatic>
 800282a:	4603      	mov	r3, r0
 800282c:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <vTaskStartScheduler+0xbc>)
 800282e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002830:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <vTaskStartScheduler+0xbc>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002838:	2301      	movs	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	e001      	b.n	8002842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002848:	f000 fd00 	bl	800324c <xTimerCreateTimerTask>
 800284c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d116      	bne.n	8002882 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	613b      	str	r3, [r7, #16]
}
 8002866:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <vTaskStartScheduler+0xc0>)
 800286a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800286e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <vTaskStartScheduler+0xc4>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <vTaskStartScheduler+0xc8>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800287c:	f001 f874 	bl	8003968 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002880:	e00e      	b.n	80028a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002888:	d10a      	bne.n	80028a0 <vTaskStartScheduler+0xac>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	60fb      	str	r3, [r7, #12]
}
 800289c:	bf00      	nop
 800289e:	e7fe      	b.n	800289e <vTaskStartScheduler+0xaa>
}
 80028a0:	bf00      	nop
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	08004090 	.word	0x08004090
 80028ac:	08002ed9 	.word	0x08002ed9
 80028b0:	20000c74 	.word	0x20000c74
 80028b4:	20000c70 	.word	0x20000c70
 80028b8:	20000c5c 	.word	0x20000c5c
 80028bc:	20000c54 	.word	0x20000c54

080028c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80028c4:	4b04      	ldr	r3, [pc, #16]	; (80028d8 <vTaskSuspendAll+0x18>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <vTaskSuspendAll+0x18>)
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000c78 	.word	0x20000c78

080028dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80028ea:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <xTaskResumeAll+0x118>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <xTaskResumeAll+0x2c>
	__asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	603b      	str	r3, [r7, #0]
}
 8002904:	bf00      	nop
 8002906:	e7fe      	b.n	8002906 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002908:	f001 f8a0 	bl	8003a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800290c:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <xTaskResumeAll+0x118>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	4a38      	ldr	r2, [pc, #224]	; (80029f4 <xTaskResumeAll+0x118>)
 8002914:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002916:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <xTaskResumeAll+0x118>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d162      	bne.n	80029e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <xTaskResumeAll+0x11c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d05e      	beq.n	80029e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002926:	e02f      	b.n	8002988 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002928:	4b34      	ldr	r3, [pc, #208]	; (80029fc <xTaskResumeAll+0x120>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3318      	adds	r3, #24
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f8b7 	bl	8001aa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3304      	adds	r3, #4
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f8b2 	bl	8001aa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <xTaskResumeAll+0x124>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d903      	bls.n	8002958 <xTaskResumeAll+0x7c>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <xTaskResumeAll+0x124>)
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4a27      	ldr	r2, [pc, #156]	; (8002a04 <xTaskResumeAll+0x128>)
 8002966:	441a      	add	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3304      	adds	r3, #4
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f7ff f83f 	bl	80019f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <xTaskResumeAll+0x12c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <xTaskResumeAll+0x130>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002988:	4b1c      	ldr	r3, [pc, #112]	; (80029fc <xTaskResumeAll+0x120>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1cb      	bne.n	8002928 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002996:	f000 fb55 	bl	8003044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800299a:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <xTaskResumeAll+0x134>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d010      	beq.n	80029c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80029a6:	f000 f845 	bl	8002a34 <xTaskIncrementTick>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <xTaskResumeAll+0x130>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f1      	bne.n	80029a6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <xTaskResumeAll+0x134>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <xTaskResumeAll+0x130>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80029d0:	2301      	movs	r3, #1
 80029d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <xTaskResumeAll+0x138>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029e4:	f001 f862 	bl	8003aac <vPortExitCritical>

	return xAlreadyYielded;
 80029e8:	68bb      	ldr	r3, [r7, #8]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000c78 	.word	0x20000c78
 80029f8:	20000c50 	.word	0x20000c50
 80029fc:	20000c10 	.word	0x20000c10
 8002a00:	20000c58 	.word	0x20000c58
 8002a04:	20000780 	.word	0x20000780
 8002a08:	2000077c 	.word	0x2000077c
 8002a0c:	20000c64 	.word	0x20000c64
 8002a10:	20000c60 	.word	0x20000c60
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <xTaskGetTickCount+0x18>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a24:	687b      	ldr	r3, [r7, #4]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	20000c54 	.word	0x20000c54

08002a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a3e:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <xTaskIncrementTick+0x150>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 808e 	bne.w	8002b64 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <xTaskIncrementTick+0x154>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <xTaskIncrementTick+0x154>)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d120      	bne.n	8002a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <xTaskIncrementTick+0x158>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	603b      	str	r3, [r7, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	e7fe      	b.n	8002a7a <xTaskIncrementTick+0x46>
 8002a7c:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <xTaskIncrementTick+0x158>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <xTaskIncrementTick+0x15c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a41      	ldr	r2, [pc, #260]	; (8002b8c <xTaskIncrementTick+0x158>)
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	4a41      	ldr	r2, [pc, #260]	; (8002b90 <xTaskIncrementTick+0x15c>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <xTaskIncrementTick+0x160>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	4a3f      	ldr	r2, [pc, #252]	; (8002b94 <xTaskIncrementTick+0x160>)
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	f000 fad3 	bl	8003044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a9e:	4b3e      	ldr	r3, [pc, #248]	; (8002b98 <xTaskIncrementTick+0x164>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d34e      	bcc.n	8002b46 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa8:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <xTaskIncrementTick+0x158>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <xTaskIncrementTick+0x82>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <xTaskIncrementTick+0x84>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <xTaskIncrementTick+0x164>)
 8002abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ac2:	601a      	str	r2, [r3, #0]
					break;
 8002ac4:	e03f      	b.n	8002b46 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ac6:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <xTaskIncrementTick+0x158>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d203      	bcs.n	8002ae6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002ade:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <xTaskIncrementTick+0x164>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6013      	str	r3, [r2, #0]
						break;
 8002ae4:	e02f      	b.n	8002b46 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ffdc 	bl	8001aa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	3318      	adds	r3, #24
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe ffd3 	bl	8001aa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <xTaskIncrementTick+0x168>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d903      	bls.n	8002b16 <xTaskIncrementTick+0xe2>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <xTaskIncrementTick+0x168>)
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <xTaskIncrementTick+0x16c>)
 8002b24:	441a      	add	r2, r3
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f7fe ff60 	bl	80019f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <xTaskIncrementTick+0x170>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3b3      	bcc.n	8002aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b44:	e7b0      	b.n	8002aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <xTaskIncrementTick+0x170>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4c:	4914      	ldr	r1, [pc, #80]	; (8002ba0 <xTaskIncrementTick+0x16c>)
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d907      	bls.n	8002b6e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e004      	b.n	8002b6e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <xTaskIncrementTick+0x174>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <xTaskIncrementTick+0x174>)
 8002b6c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <xTaskIncrementTick+0x178>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002b7a:	697b      	ldr	r3, [r7, #20]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000c78 	.word	0x20000c78
 8002b88:	20000c54 	.word	0x20000c54
 8002b8c:	20000c08 	.word	0x20000c08
 8002b90:	20000c0c 	.word	0x20000c0c
 8002b94:	20000c68 	.word	0x20000c68
 8002b98:	20000c70 	.word	0x20000c70
 8002b9c:	20000c58 	.word	0x20000c58
 8002ba0:	20000780 	.word	0x20000780
 8002ba4:	2000077c 	.word	0x2000077c
 8002ba8:	20000c60 	.word	0x20000c60
 8002bac:	20000c64 	.word	0x20000c64

08002bb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <vTaskSwitchContext+0xa4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002bbe:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <vTaskSwitchContext+0xa8>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002bc4:	e041      	b.n	8002c4a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <vTaskSwitchContext+0xa8>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <vTaskSwitchContext+0xac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	e010      	b.n	8002bf6 <vTaskSwitchContext+0x46>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <vTaskSwitchContext+0x40>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	607b      	str	r3, [r7, #4]
}
 8002bec:	bf00      	nop
 8002bee:	e7fe      	b.n	8002bee <vTaskSwitchContext+0x3e>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	491a      	ldr	r1, [pc, #104]	; (8002c60 <vTaskSwitchContext+0xb0>)
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0e4      	beq.n	8002bd4 <vTaskSwitchContext+0x24>
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <vTaskSwitchContext+0xb0>)
 8002c16:	4413      	add	r3, r2
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	605a      	str	r2, [r3, #4]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d104      	bne.n	8002c3a <vTaskSwitchContext+0x8a>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <vTaskSwitchContext+0xb4>)
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <vTaskSwitchContext+0xac>)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6013      	str	r3, [r2, #0]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	20000c78 	.word	0x20000c78
 8002c58:	20000c64 	.word	0x20000c64
 8002c5c:	20000c58 	.word	0x20000c58
 8002c60:	20000780 	.word	0x20000780
 8002c64:	2000077c 	.word	0x2000077c

08002c68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	60fb      	str	r3, [r7, #12]
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <vTaskPlaceOnEventList+0x44>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3318      	adds	r3, #24
 8002c94:	4619      	mov	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fe fece 	bl	8001a38 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	6838      	ldr	r0, [r7, #0]
 8002ca0:	f000 fa80 	bl	80031a4 <prvAddCurrentTaskToDelayedList>
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000077c 	.word	0x2000077c

08002cb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	617b      	str	r3, [r7, #20]
}
 8002cd4:	bf00      	nop
 8002cd6:	e7fe      	b.n	8002cd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cd8:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <vTaskPlaceOnEventListRestricted+0x54>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3318      	adds	r3, #24
 8002cde:	4619      	mov	r1, r3
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7fe fe86 	bl	80019f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cf0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68b8      	ldr	r0, [r7, #8]
 8002cf6:	f000 fa55 	bl	80031a4 <prvAddCurrentTaskToDelayedList>
	}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	2000077c 	.word	0x2000077c

08002d08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	60fb      	str	r3, [r7, #12]
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	3318      	adds	r3, #24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe feb5 	bl	8001aa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <xTaskRemoveFromEventList+0xb0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11d      	bne.n	8002d82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe feac 	bl	8001aa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <xTaskRemoveFromEventList+0xb4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d903      	bls.n	8002d64 <xTaskRemoveFromEventList+0x5c>
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	4a16      	ldr	r2, [pc, #88]	; (8002dbc <xTaskRemoveFromEventList+0xb4>)
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <xTaskRemoveFromEventList+0xb8>)
 8002d72:	441a      	add	r2, r3
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f7fe fe39 	bl	80019f2 <vListInsertEnd>
 8002d80:	e005      	b.n	8002d8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	3318      	adds	r3, #24
 8002d86:	4619      	mov	r1, r3
 8002d88:	480e      	ldr	r0, [pc, #56]	; (8002dc4 <xTaskRemoveFromEventList+0xbc>)
 8002d8a:	f7fe fe32 	bl	80019f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d92:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <xTaskRemoveFromEventList+0xc0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d905      	bls.n	8002da8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <xTaskRemoveFromEventList+0xc4>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e001      	b.n	8002dac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002dac:	697b      	ldr	r3, [r7, #20]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000c78 	.word	0x20000c78
 8002dbc:	20000c58 	.word	0x20000c58
 8002dc0:	20000780 	.word	0x20000780
 8002dc4:	20000c10 	.word	0x20000c10
 8002dc8:	2000077c 	.word	0x2000077c
 8002dcc:	20000c64 	.word	0x20000c64

08002dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <vTaskInternalSetTimeOutState+0x24>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <vTaskInternalSetTimeOutState+0x28>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	605a      	str	r2, [r3, #4]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000c68 	.word	0x20000c68
 8002df8:	20000c54 	.word	0x20000c54

08002dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10a      	bne.n	8002e22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	613b      	str	r3, [r7, #16]
}
 8002e1e:	bf00      	nop
 8002e20:	e7fe      	b.n	8002e20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	60fb      	str	r3, [r7, #12]
}
 8002e3a:	bf00      	nop
 8002e3c:	e7fe      	b.n	8002e3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002e3e:	f000 fe05 	bl	8003a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <xTaskCheckForTimeOut+0xbc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e5a:	d102      	bne.n	8002e62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	e023      	b.n	8002eaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <xTaskCheckForTimeOut+0xc0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d007      	beq.n	8002e7e <xTaskCheckForTimeOut+0x82>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d302      	bcc.n	8002e7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	61fb      	str	r3, [r7, #28]
 8002e7c:	e015      	b.n	8002eaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d20b      	bcs.n	8002ea0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	1ad2      	subs	r2, r2, r3
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff9b 	bl	8002dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	e004      	b.n	8002eaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002eaa:	f000 fdff 	bl	8003aac <vPortExitCritical>

	return xReturn;
 8002eae:	69fb      	ldr	r3, [r7, #28]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000c54 	.word	0x20000c54
 8002ebc:	20000c68 	.word	0x20000c68

08002ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <vTaskMissedYield+0x14>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000c64 	.word	0x20000c64

08002ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ee0:	f000 f852 	bl	8002f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <prvIdleTask+0x28>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d9f9      	bls.n	8002ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <prvIdleTask+0x2c>)
 8002eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002efc:	e7f0      	b.n	8002ee0 <prvIdleTask+0x8>
 8002efe:	bf00      	nop
 8002f00:	20000780 	.word	0x20000780
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	e00c      	b.n	8002f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <prvInitialiseTaskLists+0x60>)
 8002f20:	4413      	add	r3, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fd3a 	bl	800199c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b37      	cmp	r3, #55	; 0x37
 8002f32:	d9ef      	bls.n	8002f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f34:	480d      	ldr	r0, [pc, #52]	; (8002f6c <prvInitialiseTaskLists+0x64>)
 8002f36:	f7fe fd31 	bl	800199c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f3a:	480d      	ldr	r0, [pc, #52]	; (8002f70 <prvInitialiseTaskLists+0x68>)
 8002f3c:	f7fe fd2e 	bl	800199c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f40:	480c      	ldr	r0, [pc, #48]	; (8002f74 <prvInitialiseTaskLists+0x6c>)
 8002f42:	f7fe fd2b 	bl	800199c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <prvInitialiseTaskLists+0x70>)
 8002f48:	f7fe fd28 	bl	800199c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f4c:	480b      	ldr	r0, [pc, #44]	; (8002f7c <prvInitialiseTaskLists+0x74>)
 8002f4e:	f7fe fd25 	bl	800199c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <prvInitialiseTaskLists+0x78>)
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <prvInitialiseTaskLists+0x64>)
 8002f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <prvInitialiseTaskLists+0x7c>)
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <prvInitialiseTaskLists+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000780 	.word	0x20000780
 8002f6c:	20000be0 	.word	0x20000be0
 8002f70:	20000bf4 	.word	0x20000bf4
 8002f74:	20000c10 	.word	0x20000c10
 8002f78:	20000c24 	.word	0x20000c24
 8002f7c:	20000c3c 	.word	0x20000c3c
 8002f80:	20000c08 	.word	0x20000c08
 8002f84:	20000c0c 	.word	0x20000c0c

08002f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f8e:	e019      	b.n	8002fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f90:	f000 fd5c 	bl	8003a4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <prvCheckTasksWaitingTermination+0x50>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3304      	adds	r3, #4
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe fd81 	bl	8001aa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fa6:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <prvCheckTasksWaitingTermination+0x54>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <prvCheckTasksWaitingTermination+0x54>)
 8002fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <prvCheckTasksWaitingTermination+0x58>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <prvCheckTasksWaitingTermination+0x58>)
 8002fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fba:	f000 fd77 	bl	8003aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f810 	bl	8002fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <prvCheckTasksWaitingTermination+0x58>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e1      	bne.n	8002f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000c24 	.word	0x20000c24
 8002fdc:	20000c50 	.word	0x20000c50
 8002fe0:	20000c38 	.word	0x20000c38

08002fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d108      	bne.n	8003008 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 feea 	bl	8003dd4 <vPortFree>
				vPortFree( pxTCB );
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fee7 	bl	8003dd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003006:	e018      	b.n	800303a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800300e:	2b01      	cmp	r3, #1
 8003010:	d103      	bne.n	800301a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fede 	bl	8003dd4 <vPortFree>
	}
 8003018:	e00f      	b.n	800303a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003020:	2b02      	cmp	r3, #2
 8003022:	d00a      	beq.n	800303a <prvDeleteTCB+0x56>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	60fb      	str	r3, [r7, #12]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <prvDeleteTCB+0x54>
	}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <prvResetNextTaskUnblockTime+0x40>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <prvResetNextTaskUnblockTime+0x14>
 8003054:	2301      	movs	r3, #1
 8003056:	e000      	b.n	800305a <prvResetNextTaskUnblockTime+0x16>
 8003058:	2300      	movs	r3, #0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvResetNextTaskUnblockTime+0x44>)
 8003060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003064:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003066:	e008      	b.n	800307a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <prvResetNextTaskUnblockTime+0x40>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	4a04      	ldr	r2, [pc, #16]	; (8003088 <prvResetNextTaskUnblockTime+0x44>)
 8003078:	6013      	str	r3, [r2, #0]
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	20000c08 	.word	0x20000c08
 8003088:	20000c70 	.word	0x20000c70

0800308c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <xTaskGetSchedulerState+0x34>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800309a:	2301      	movs	r3, #1
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	e008      	b.n	80030b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <xTaskGetSchedulerState+0x38>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80030a8:	2302      	movs	r3, #2
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	e001      	b.n	80030b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030b2:	687b      	ldr	r3, [r7, #4]
	}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000c5c 	.word	0x20000c5c
 80030c4:	20000c78 	.word	0x20000c78

080030c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d056      	beq.n	800318c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80030de:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <xTaskPriorityDisinherit+0xd0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d00a      	beq.n	80030fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	60fb      	str	r3, [r7, #12]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	60bb      	str	r3, [r7, #8]
}
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312e:	429a      	cmp	r2, r3
 8003130:	d02c      	beq.n	800318c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003136:	2b00      	cmp	r3, #0
 8003138:	d128      	bne.n	800318c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	3304      	adds	r3, #4
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fcb2 	bl	8001aa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <xTaskPriorityDisinherit+0xd4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d903      	bls.n	800316c <xTaskPriorityDisinherit+0xa4>
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	4a0c      	ldr	r2, [pc, #48]	; (800319c <xTaskPriorityDisinherit+0xd4>)
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <xTaskPriorityDisinherit+0xd8>)
 800317a:	441a      	add	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f7fe fc35 	bl	80019f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003188:	2301      	movs	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800318c:	697b      	ldr	r3, [r7, #20]
	}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000077c 	.word	0x2000077c
 800319c:	20000c58 	.word	0x20000c58
 80031a0:	20000780 	.word	0x20000780

080031a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <prvAddCurrentTaskToDelayedList+0x90>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <prvAddCurrentTaskToDelayedList+0x94>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fc74 	bl	8001aa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c6:	d10a      	bne.n	80031de <prvAddCurrentTaskToDelayedList+0x3a>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031ce:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <prvAddCurrentTaskToDelayedList+0x94>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3304      	adds	r3, #4
 80031d4:	4619      	mov	r1, r3
 80031d6:	4819      	ldr	r0, [pc, #100]	; (800323c <prvAddCurrentTaskToDelayedList+0x98>)
 80031d8:	f7fe fc0b 	bl	80019f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80031dc:	e026      	b.n	800322c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <prvAddCurrentTaskToDelayedList+0x94>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d209      	bcs.n	800320a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <prvAddCurrentTaskToDelayedList+0x9c>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <prvAddCurrentTaskToDelayedList+0x94>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3304      	adds	r3, #4
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f7fe fc18 	bl	8001a38 <vListInsert>
}
 8003208:	e010      	b.n	800322c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <prvAddCurrentTaskToDelayedList+0xa0>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <prvAddCurrentTaskToDelayedList+0x94>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f7fe fc0e 	bl	8001a38 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <prvAddCurrentTaskToDelayedList+0xa4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d202      	bcs.n	800322c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003226:	4a08      	ldr	r2, [pc, #32]	; (8003248 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6013      	str	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000c54 	.word	0x20000c54
 8003238:	2000077c 	.word	0x2000077c
 800323c:	20000c3c 	.word	0x20000c3c
 8003240:	20000c0c 	.word	0x20000c0c
 8003244:	20000c08 	.word	0x20000c08
 8003248:	20000c70 	.word	0x20000c70

0800324c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003256:	f000 facb 	bl	80037f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800325a:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <xTimerCreateTimerTask+0x80>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d021      	beq.n	80032a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800326a:	1d3a      	adds	r2, r7, #4
 800326c:	f107 0108 	add.w	r1, r7, #8
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fb77 	bl	8001968 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	9202      	str	r2, [sp, #8]
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	2302      	movs	r3, #2
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	2300      	movs	r3, #0
 800328a:	460a      	mov	r2, r1
 800328c:	4910      	ldr	r1, [pc, #64]	; (80032d0 <xTimerCreateTimerTask+0x84>)
 800328e:	4811      	ldr	r0, [pc, #68]	; (80032d4 <xTimerCreateTimerTask+0x88>)
 8003290:	f7ff f918 	bl	80024c4 <xTaskCreateStatic>
 8003294:	4603      	mov	r3, r0
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <xTimerCreateTimerTask+0x8c>)
 8003298:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <xTimerCreateTimerTask+0x8c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80032a2:	2301      	movs	r3, #1
 80032a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10a      	bne.n	80032c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	613b      	str	r3, [r7, #16]
}
 80032be:	bf00      	nop
 80032c0:	e7fe      	b.n	80032c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80032c2:	697b      	ldr	r3, [r7, #20]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000cac 	.word	0x20000cac
 80032d0:	08004098 	.word	0x08004098
 80032d4:	080033f9 	.word	0x080033f9
 80032d8:	20000cb0 	.word	0x20000cb0

080032dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <xTimerGenericCommand+0x2e>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	623b      	str	r3, [r7, #32]
}
 8003306:	bf00      	nop
 8003308:	e7fe      	b.n	8003308 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <xTimerGenericCommand+0x98>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d02a      	beq.n	8003368 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b05      	cmp	r3, #5
 8003322:	dc18      	bgt.n	8003356 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003324:	f7ff feb2 	bl	800308c <xTaskGetSchedulerState>
 8003328:	4603      	mov	r3, r0
 800332a:	2b02      	cmp	r3, #2
 800332c:	d109      	bne.n	8003342 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <xTimerGenericCommand+0x98>)
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	f107 0110 	add.w	r1, r7, #16
 8003336:	2300      	movs	r3, #0
 8003338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333a:	f7fe fce1 	bl	8001d00 <xQueueGenericSend>
 800333e:	6278      	str	r0, [r7, #36]	; 0x24
 8003340:	e012      	b.n	8003368 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <xTimerGenericCommand+0x98>)
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f107 0110 	add.w	r1, r7, #16
 800334a:	2300      	movs	r3, #0
 800334c:	2200      	movs	r2, #0
 800334e:	f7fe fcd7 	bl	8001d00 <xQueueGenericSend>
 8003352:	6278      	str	r0, [r7, #36]	; 0x24
 8003354:	e008      	b.n	8003368 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <xTimerGenericCommand+0x98>)
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	f107 0110 	add.w	r1, r7, #16
 800335e:	2300      	movs	r3, #0
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	f7fe fdcb 	bl	8001efc <xQueueGenericSendFromISR>
 8003366:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800336a:	4618      	mov	r0, r3
 800336c:	3728      	adds	r7, #40	; 0x28
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000cac 	.word	0x20000cac

08003378 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003382:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <prvProcessExpiredTimer+0x7c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	3304      	adds	r3, #4
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fb89 	bl	8001aa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d122      	bne.n	80033e4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	18d1      	adds	r1, r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f000 f8c8 	bl	8003540 <prvInsertTimerInActiveList>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033b6:	2300      	movs	r3, #0
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	2100      	movs	r1, #0
 80033c0:	6978      	ldr	r0, [r7, #20]
 80033c2:	f7ff ff8b 	bl	80032dc <xTimerGenericCommand>
 80033c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	60fb      	str	r3, [r7, #12]
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	6978      	ldr	r0, [r7, #20]
 80033ea:	4798      	blx	r3
}
 80033ec:	bf00      	nop
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000ca4 	.word	0x20000ca4

080033f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003400:	f107 0308 	add.w	r3, r7, #8
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f857 	bl	80034b8 <prvGetNextExpireTime>
 800340a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4619      	mov	r1, r3
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 f803 	bl	800341c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003416:	f000 f8d5 	bl	80035c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800341a:	e7f1      	b.n	8003400 <prvTimerTask+0x8>

0800341c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003426:	f7ff fa4b 	bl	80028c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f866 	bl	8003500 <prvSampleTimeNow>
 8003434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d130      	bne.n	800349e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <prvProcessTimerOrBlockTask+0x3c>
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	429a      	cmp	r2, r3
 8003448:	d806      	bhi.n	8003458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800344a:	f7ff fa47 	bl	80028dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800344e:	68f9      	ldr	r1, [r7, #12]
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff91 	bl	8003378 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003456:	e024      	b.n	80034a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <prvProcessTimerOrBlockTask+0x90>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <prvProcessTimerOrBlockTask+0x94>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	f7fe ffed 	bl	800245c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003482:	f7ff fa2b 	bl	80028dc <xTaskResumeAll>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <prvProcessTimerOrBlockTask+0x98>)
 800348e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
}
 800349c:	e001      	b.n	80034a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800349e:	f7ff fa1d 	bl	80028dc <xTaskResumeAll>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000ca8 	.word	0x20000ca8
 80034b0:	20000cac 	.word	0x20000cac
 80034b4:	e000ed04 	.word	0xe000ed04

080034b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <prvGetNextExpireTime+0x44>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	bf0c      	ite	eq
 80034ca:	2301      	moveq	r3, #1
 80034cc:	2300      	movne	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <prvGetNextExpireTime+0x44>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	e001      	b.n	80034ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000ca4 	.word	0x20000ca4

08003500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003508:	f7ff fa86 	bl	8002a18 <xTaskGetTickCount>
 800350c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <prvSampleTimeNow+0x3c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d205      	bcs.n	8003524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003518:	f000 f908 	bl	800372c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e002      	b.n	800352a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <prvSampleTimeNow+0x3c>)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003530:	68fb      	ldr	r3, [r7, #12]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000cb4 	.word	0x20000cb4

08003540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800354e:	2300      	movs	r3, #0
 8003550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d812      	bhi.n	800358c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad2      	subs	r2, r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	429a      	cmp	r2, r3
 8003572:	d302      	bcc.n	800357a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003574:	2301      	movs	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e01b      	b.n	80035b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <prvInsertTimerInActiveList+0x7c>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f7fe fa57 	bl	8001a38 <vListInsert>
 800358a:	e012      	b.n	80035b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d206      	bcs.n	80035a2 <prvInsertTimerInActiveList+0x62>
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d302      	bcc.n	80035a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800359c:	2301      	movs	r3, #1
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e007      	b.n	80035b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <prvInsertTimerInActiveList+0x80>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7fe fa43 	bl	8001a38 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80035b2:	697b      	ldr	r3, [r7, #20]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000ca8 	.word	0x20000ca8
 80035c0:	20000ca4 	.word	0x20000ca4

080035c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08e      	sub	sp, #56	; 0x38
 80035c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80035ca:	e09d      	b.n	8003708 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	da18      	bge.n	8003604 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80035d2:	1d3b      	adds	r3, r7, #4
 80035d4:	3304      	adds	r3, #4
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80035d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	61fb      	str	r3, [r7, #28]
}
 80035f0:	bf00      	nop
 80035f2:	e7fe      	b.n	80035f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035fa:	6850      	ldr	r0, [r2, #4]
 80035fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035fe:	6892      	ldr	r2, [r2, #8]
 8003600:	4611      	mov	r1, r2
 8003602:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	db7d      	blt.n	8003706 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d004      	beq.n	8003620 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	3304      	adds	r3, #4
 800361a:	4618      	mov	r0, r3
 800361c:	f7fe fa44 	bl	8001aa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003620:	463b      	mov	r3, r7
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff6c 	bl	8003500 <prvSampleTimeNow>
 8003628:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b09      	cmp	r3, #9
 800362e:	d86b      	bhi.n	8003708 <prvProcessReceivedCommands+0x144>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <prvProcessReceivedCommands+0x74>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003661 	.word	0x08003661
 800363c:	08003661 	.word	0x08003661
 8003640:	08003661 	.word	0x08003661
 8003644:	08003709 	.word	0x08003709
 8003648:	080036bd 	.word	0x080036bd
 800364c:	080036f5 	.word	0x080036f5
 8003650:	08003661 	.word	0x08003661
 8003654:	08003661 	.word	0x08003661
 8003658:	08003709 	.word	0x08003709
 800365c:	080036bd 	.word	0x080036bd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	18d1      	adds	r1, r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366e:	f7ff ff67 	bl	8003540 <prvInsertTimerInActiveList>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d047      	beq.n	8003708 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800367e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d13f      	bne.n	8003708 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	441a      	add	r2, r3
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	2100      	movs	r1, #0
 8003698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800369a:	f7ff fe1f 	bl	80032dc <xTimerGenericCommand>
 800369e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d130      	bne.n	8003708 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	61bb      	str	r3, [r7, #24]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	617b      	str	r3, [r7, #20]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	18d1      	adds	r1, r2, r3
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036ee:	f7ff ff27 	bl	8003540 <prvInsertTimerInActiveList>
					break;
 80036f2:	e009      	b.n	8003708 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d104      	bne.n	8003708 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80036fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003700:	f000 fb68 	bl	8003dd4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003704:	e000      	b.n	8003708 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003706:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003708:	4b07      	ldr	r3, [pc, #28]	; (8003728 <prvProcessReceivedCommands+0x164>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	1d39      	adds	r1, r7, #4
 800370e:	2200      	movs	r2, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fc8b 	bl	800202c <xQueueReceive>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f af57 	bne.w	80035cc <prvProcessReceivedCommands+0x8>
	}
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	3730      	adds	r7, #48	; 0x30
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	20000cac 	.word	0x20000cac

0800372c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003732:	e045      	b.n	80037c0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003734:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <prvSwitchTimerLists+0xbc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <prvSwitchTimerLists+0xbc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3304      	adds	r3, #4
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe f9ab 	bl	8001aa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d12e      	bne.n	80037c0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4413      	add	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	d90e      	bls.n	8003792 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003780:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <prvSwitchTimerLists+0xbc>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3304      	adds	r3, #4
 8003788:	4619      	mov	r1, r3
 800378a:	4610      	mov	r0, r2
 800378c:	f7fe f954 	bl	8001a38 <vListInsert>
 8003790:	e016      	b.n	80037c0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	2100      	movs	r1, #0
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff fd9d 	bl	80032dc <xTimerGenericCommand>
 80037a2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	603b      	str	r3, [r7, #0]
}
 80037bc:	bf00      	nop
 80037be:	e7fe      	b.n	80037be <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <prvSwitchTimerLists+0xbc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1b4      	bne.n	8003734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <prvSwitchTimerLists+0xbc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <prvSwitchTimerLists+0xc0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <prvSwitchTimerLists+0xbc>)
 80037d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80037d8:	4a04      	ldr	r2, [pc, #16]	; (80037ec <prvSwitchTimerLists+0xc0>)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	6013      	str	r3, [r2, #0]
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000ca4 	.word	0x20000ca4
 80037ec:	20000ca8 	.word	0x20000ca8

080037f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80037f6:	f000 f929 	bl	8003a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <prvCheckForValidListAndQueue+0x60>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d120      	bne.n	8003844 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003802:	4814      	ldr	r0, [pc, #80]	; (8003854 <prvCheckForValidListAndQueue+0x64>)
 8003804:	f7fe f8ca 	bl	800199c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003808:	4813      	ldr	r0, [pc, #76]	; (8003858 <prvCheckForValidListAndQueue+0x68>)
 800380a:	f7fe f8c7 	bl	800199c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <prvCheckForValidListAndQueue+0x6c>)
 8003810:	4a10      	ldr	r2, [pc, #64]	; (8003854 <prvCheckForValidListAndQueue+0x64>)
 8003812:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <prvCheckForValidListAndQueue+0x70>)
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <prvCheckForValidListAndQueue+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800381a:	2300      	movs	r3, #0
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <prvCheckForValidListAndQueue+0x74>)
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <prvCheckForValidListAndQueue+0x78>)
 8003822:	2110      	movs	r1, #16
 8003824:	200a      	movs	r0, #10
 8003826:	f7fe f9d1 	bl	8001bcc <xQueueGenericCreateStatic>
 800382a:	4603      	mov	r3, r0
 800382c:	4a08      	ldr	r2, [pc, #32]	; (8003850 <prvCheckForValidListAndQueue+0x60>)
 800382e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <prvCheckForValidListAndQueue+0x60>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <prvCheckForValidListAndQueue+0x60>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	490b      	ldr	r1, [pc, #44]	; (800386c <prvCheckForValidListAndQueue+0x7c>)
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fde4 	bl	800240c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003844:	f000 f932 	bl	8003aac <vPortExitCritical>
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000cac 	.word	0x20000cac
 8003854:	20000c7c 	.word	0x20000c7c
 8003858:	20000c90 	.word	0x20000c90
 800385c:	20000ca4 	.word	0x20000ca4
 8003860:	20000ca8 	.word	0x20000ca8
 8003864:	20000d58 	.word	0x20000d58
 8003868:	20000cb8 	.word	0x20000cb8
 800386c:	080040a0 	.word	0x080040a0

08003870 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3b04      	subs	r3, #4
 8003880:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b04      	subs	r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f023 0201 	bic.w	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3b04      	subs	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038a0:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <pxPortInitialiseStack+0x54>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3b14      	subs	r3, #20
 80038aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3b20      	subs	r3, #32
 80038b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	080038c9 	.word	0x080038c9

080038c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <prvTaskExitError+0x54>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038da:	d00a      	beq.n	80038f2 <prvTaskExitError+0x2a>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	60fb      	str	r3, [r7, #12]
}
 80038ee:	bf00      	nop
 80038f0:	e7fe      	b.n	80038f0 <prvTaskExitError+0x28>
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	60bb      	str	r3, [r7, #8]
}
 8003904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003906:	bf00      	nop
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0fc      	beq.n	8003908 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000010 	.word	0x20000010

08003920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003920:	4b07      	ldr	r3, [pc, #28]	; (8003940 <pxCurrentTCBConst2>)
 8003922:	6819      	ldr	r1, [r3, #0]
 8003924:	6808      	ldr	r0, [r1, #0]
 8003926:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800392a:	f380 8809 	msr	PSP, r0
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f380 8811 	msr	BASEPRI, r0
 800393a:	f04e 0e0d 	orr.w	lr, lr, #13
 800393e:	4770      	bx	lr

08003940 <pxCurrentTCBConst2>:
 8003940:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003944:	bf00      	nop
 8003946:	bf00      	nop

08003948 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003948:	4806      	ldr	r0, [pc, #24]	; (8003964 <prvPortStartFirstTask+0x1c>)
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	6800      	ldr	r0, [r0, #0]
 800394e:	f380 8808 	msr	MSP, r0
 8003952:	b662      	cpsie	i
 8003954:	b661      	cpsie	f
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	df00      	svc	0
 8003960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003962:	bf00      	nop
 8003964:	e000ed08 	.word	0xe000ed08

08003968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800396e:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <xPortStartScheduler+0xd0>)
 8003970:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <xPortStartScheduler+0xd4>)
 8003994:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <xPortStartScheduler+0xd8>)
 8003998:	2207      	movs	r2, #7
 800399a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800399c:	e009      	b.n	80039b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <xPortStartScheduler+0xd8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <xPortStartScheduler+0xd8>)
 80039a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d0ef      	beq.n	800399e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <xPortStartScheduler+0xd8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00a      	beq.n	80039e0 <xPortStartScheduler+0x78>
	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60bb      	str	r3, [r7, #8]
}
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039e0:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <xPortStartScheduler+0xd8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <xPortStartScheduler+0xd8>)
 80039e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039ea:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <xPortStartScheduler+0xd8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <xPortStartScheduler+0xd8>)
 80039f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <xPortStartScheduler+0xdc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <xPortStartScheduler+0xdc>)
 8003a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <xPortStartScheduler+0xdc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <xPortStartScheduler+0xdc>)
 8003a10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a16:	f000 f8b9 	bl	8003b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <xPortStartScheduler+0xe0>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a20:	f7ff ff92 	bl	8003948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a24:	f7ff f8c4 	bl	8002bb0 <vTaskSwitchContext>
	prvTaskExitError();
 8003a28:	f7ff ff4e 	bl	80038c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	e000e400 	.word	0xe000e400
 8003a3c:	20000da8 	.word	0x20000da8
 8003a40:	20000dac 	.word	0x20000dac
 8003a44:	e000ed20 	.word	0xe000ed20
 8003a48:	20000010 	.word	0x20000010

08003a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	607b      	str	r3, [r7, #4]
}
 8003a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <vPortEnterCritical+0x58>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <vPortEnterCritical+0x58>)
 8003a6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <vPortEnterCritical+0x58>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10f      	bne.n	8003a98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <vPortEnterCritical+0x5c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
}
 8003a94:	bf00      	nop
 8003a96:	e7fe      	b.n	8003a96 <vPortEnterCritical+0x4a>
	}
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000010 	.word	0x20000010
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <vPortExitCritical+0x4c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <vPortExitCritical+0x24>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
}
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <vPortExitCritical+0x4c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <vPortExitCritical+0x4c>)
 8003ad8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <vPortExitCritical+0x4c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <vPortExitCritical+0x42>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
}
 8003aec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bc80      	pop	{r7}
 8003af6:	4770      	bx	lr
 8003af8:	20000010 	.word	0x20000010
 8003afc:	00000000 	.word	0x00000000

08003b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b00:	f3ef 8009 	mrs	r0, PSP
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <pxCurrentTCBConst>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b10:	6010      	str	r0, [r2, #0]
 8003b12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b1a:	f380 8811 	msr	BASEPRI, r0
 8003b1e:	f7ff f847 	bl	8002bb0 <vTaskSwitchContext>
 8003b22:	f04f 0000 	mov.w	r0, #0
 8003b26:	f380 8811 	msr	BASEPRI, r0
 8003b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	6808      	ldr	r0, [r1, #0]
 8003b32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b36:	f380 8809 	msr	PSP, r0
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	4770      	bx	lr

08003b40 <pxCurrentTCBConst>:
 8003b40:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop

08003b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	607b      	str	r3, [r7, #4]
}
 8003b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b62:	f7fe ff67 	bl	8002a34 <xTaskIncrementTick>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <xPortSysTickHandler+0x40>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f383 8811 	msr	BASEPRI, r3
}
 8003b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b90:	4b0a      	ldr	r3, [pc, #40]	; (8003bbc <vPortSetupTimerInterrupt+0x30>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <vPortSetupTimerInterrupt+0x34>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <vPortSetupTimerInterrupt+0x38>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <vPortSetupTimerInterrupt+0x3c>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <vPortSetupTimerInterrupt+0x40>)
 8003baa:	3b01      	subs	r3, #1
 8003bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bae:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <vPortSetupTimerInterrupt+0x30>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	e000e010 	.word	0xe000e010
 8003bc0:	e000e018 	.word	0xe000e018
 8003bc4:	20000004 	.word	0x20000004
 8003bc8:	10624dd3 	.word	0x10624dd3
 8003bcc:	e000e014 	.word	0xe000e014

08003bd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003bd6:	f3ef 8305 	mrs	r3, IPSR
 8003bda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d914      	bls.n	8003c0c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <vPortValidateInterruptPriority+0x6c>)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <vPortValidateInterruptPriority+0x70>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	7afa      	ldrb	r2, [r7, #11]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d20a      	bcs.n	8003c0c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfa:	f383 8811 	msr	BASEPRI, r3
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f3bf 8f4f 	dsb	sy
 8003c06:	607b      	str	r3, [r7, #4]
}
 8003c08:	bf00      	nop
 8003c0a:	e7fe      	b.n	8003c0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <vPortValidateInterruptPriority+0x74>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <vPortValidateInterruptPriority+0x78>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d90a      	bls.n	8003c32 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	603b      	str	r3, [r7, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <vPortValidateInterruptPriority+0x60>
	}
 8003c32:	bf00      	nop
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	e000e3f0 	.word	0xe000e3f0
 8003c40:	20000da8 	.word	0x20000da8
 8003c44:	e000ed0c 	.word	0xe000ed0c
 8003c48:	20000dac 	.word	0x20000dac

08003c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08a      	sub	sp, #40	; 0x28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c58:	f7fe fe32 	bl	80028c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c5c:	4b58      	ldr	r3, [pc, #352]	; (8003dc0 <pvPortMalloc+0x174>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c64:	f000 f910 	bl	8003e88 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c68:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <pvPortMalloc+0x178>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 808e 	bne.w	8003d92 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01d      	beq.n	8003cb8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d014      	beq.n	8003cb8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f023 0307 	bic.w	r3, r3, #7
 8003c94:	3308      	adds	r3, #8
 8003c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <pvPortMalloc+0x6c>
	__asm volatile
 8003ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	617b      	str	r3, [r7, #20]
}
 8003cb4:	bf00      	nop
 8003cb6:	e7fe      	b.n	8003cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d069      	beq.n	8003d92 <pvPortMalloc+0x146>
 8003cbe:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <pvPortMalloc+0x17c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d864      	bhi.n	8003d92 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cc8:	4b40      	ldr	r3, [pc, #256]	; (8003dcc <pvPortMalloc+0x180>)
 8003cca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <pvPortMalloc+0x180>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cd2:	e004      	b.n	8003cde <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d903      	bls.n	8003cf0 <pvPortMalloc+0xa4>
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f1      	bne.n	8003cd4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cf0:	4b33      	ldr	r3, [pc, #204]	; (8003dc0 <pvPortMalloc+0x174>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d04b      	beq.n	8003d92 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2208      	movs	r2, #8
 8003d00:	4413      	add	r3, r2
 8003d02:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	1ad2      	subs	r2, r2, r3
 8003d14:	2308      	movs	r3, #8
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d91f      	bls.n	8003d5c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <pvPortMalloc+0xf8>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	613b      	str	r3, [r7, #16]
}
 8003d40:	bf00      	nop
 8003d42:	e7fe      	b.n	8003d42 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d56:	69b8      	ldr	r0, [r7, #24]
 8003d58:	f000 f8f8 	bl	8003f4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <pvPortMalloc+0x17c>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <pvPortMalloc+0x17c>)
 8003d68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <pvPortMalloc+0x17c>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <pvPortMalloc+0x184>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d203      	bcs.n	8003d7e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d76:	4b14      	ldr	r3, [pc, #80]	; (8003dc8 <pvPortMalloc+0x17c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <pvPortMalloc+0x184>)
 8003d7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <pvPortMalloc+0x178>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d92:	f7fe fda3 	bl	80028dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <pvPortMalloc+0x16a>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <pvPortMalloc+0x168>
	return pvReturn;
 8003db6:	69fb      	ldr	r3, [r7, #28]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3728      	adds	r7, #40	; 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	200019b8 	.word	0x200019b8
 8003dc4:	200019c4 	.word	0x200019c4
 8003dc8:	200019bc 	.word	0x200019bc
 8003dcc:	200019b0 	.word	0x200019b0
 8003dd0:	200019c0 	.word	0x200019c0

08003dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d048      	beq.n	8003e78 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003de6:	2308      	movs	r3, #8
 8003de8:	425b      	negs	r3, r3
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <vPortFree+0xac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <vPortFree+0x44>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	60fb      	str	r3, [r7, #12]
}
 8003e14:	bf00      	nop
 8003e16:	e7fe      	b.n	8003e16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <vPortFree+0x62>
	__asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	60bb      	str	r3, [r7, #8]
}
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <vPortFree+0xac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d019      	beq.n	8003e78 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d115      	bne.n	8003e78 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <vPortFree+0xac>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	43db      	mvns	r3, r3
 8003e56:	401a      	ands	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e5c:	f7fe fd30 	bl	80028c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <vPortFree+0xb0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	4a06      	ldr	r2, [pc, #24]	; (8003e84 <vPortFree+0xb0>)
 8003e6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e6e:	6938      	ldr	r0, [r7, #16]
 8003e70:	f000 f86c 	bl	8003f4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e74:	f7fe fd32 	bl	80028dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e78:	bf00      	nop
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200019c4 	.word	0x200019c4
 8003e84:	200019bc 	.word	0x200019bc

08003e88 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e92:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <prvHeapInit+0xac>)
 8003e96:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00c      	beq.n	8003ebc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3307      	adds	r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 0307 	bic.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	; (8003f34 <prvHeapInit+0xac>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ec0:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <prvHeapInit+0xb0>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <prvHeapInit+0xb0>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ed4:	2208      	movs	r2, #8
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0307 	bic.w	r3, r3, #7
 8003ee2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <prvHeapInit+0xb4>)
 8003ee8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <prvHeapInit+0xb4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <prvHeapInit+0xb4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f08:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <prvHeapInit+0xb4>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <prvHeapInit+0xb8>)
 8003f16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <prvHeapInit+0xbc>)
 8003f1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <prvHeapInit+0xc0>)
 8003f22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f26:	601a      	str	r2, [r3, #0]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	20000db0 	.word	0x20000db0
 8003f38:	200019b0 	.word	0x200019b0
 8003f3c:	200019b8 	.word	0x200019b8
 8003f40:	200019c0 	.word	0x200019c0
 8003f44:	200019bc 	.word	0x200019bc
 8003f48:	200019c4 	.word	0x200019c4

08003f4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <prvInsertBlockIntoFreeList+0xa8>)
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	e002      	b.n	8003f60 <prvInsertBlockIntoFreeList+0x14>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d8f7      	bhi.n	8003f5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	4413      	add	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d108      	bne.n	8003f8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	441a      	add	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d118      	bne.n	8003fd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <prvInsertBlockIntoFreeList+0xac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d00d      	beq.n	8003fca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e008      	b.n	8003fdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <prvInsertBlockIntoFreeList+0xac>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	e003      	b.n	8003fdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d002      	beq.n	8003fea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr
 8003ff4:	200019b0 	.word	0x200019b0
 8003ff8:	200019b8 	.word	0x200019b8

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	2600      	movs	r6, #0
 8004000:	4d0c      	ldr	r5, [pc, #48]	; (8004034 <__libc_init_array+0x38>)
 8004002:	4c0d      	ldr	r4, [pc, #52]	; (8004038 <__libc_init_array+0x3c>)
 8004004:	1b64      	subs	r4, r4, r5
 8004006:	10a4      	asrs	r4, r4, #2
 8004008:	42a6      	cmp	r6, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	f000 f830 	bl	8004070 <_init>
 8004010:	2600      	movs	r6, #0
 8004012:	4d0a      	ldr	r5, [pc, #40]	; (800403c <__libc_init_array+0x40>)
 8004014:	4c0a      	ldr	r4, [pc, #40]	; (8004040 <__libc_init_array+0x44>)
 8004016:	1b64      	subs	r4, r4, r5
 8004018:	10a4      	asrs	r4, r4, #2
 800401a:	42a6      	cmp	r6, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f855 3b04 	ldr.w	r3, [r5], #4
 8004024:	4798      	blx	r3
 8004026:	3601      	adds	r6, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f855 3b04 	ldr.w	r3, [r5], #4
 800402e:	4798      	blx	r3
 8004030:	3601      	adds	r6, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	080040c0 	.word	0x080040c0
 8004038:	080040c0 	.word	0x080040c0
 800403c:	080040c0 	.word	0x080040c0
 8004040:	080040c4 	.word	0x080040c4

08004044 <memcpy>:
 8004044:	440a      	add	r2, r1
 8004046:	4291      	cmp	r1, r2
 8004048:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800404c:	d100      	bne.n	8004050 <memcpy+0xc>
 800404e:	4770      	bx	lr
 8004050:	b510      	push	{r4, lr}
 8004052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004056:	4291      	cmp	r1, r2
 8004058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800405c:	d1f9      	bne.n	8004052 <memcpy+0xe>
 800405e:	bd10      	pop	{r4, pc}

08004060 <memset>:
 8004060:	4603      	mov	r3, r0
 8004062:	4402      	add	r2, r0
 8004064:	4293      	cmp	r3, r2
 8004066:	d100      	bne.n	800406a <memset+0xa>
 8004068:	4770      	bx	lr
 800406a:	f803 1b01 	strb.w	r1, [r3], #1
 800406e:	e7f9      	b.n	8004064 <memset+0x4>

08004070 <_init>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr

0800407c <_fini>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr
