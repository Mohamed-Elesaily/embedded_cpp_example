
BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001cc8  08001cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ce0  08001ce0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ce0  08001ce0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ce0  08001ce0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ce0  08001ce0  00011ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ce4  08001ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  2000000c  08001cf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08001cf4  00020544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a50a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002226  00000000  00000000  0002a53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002c768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002d0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cf0  00000000  00000000  0002d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a71f  00000000  00000000  0002f690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000886a1  00000000  00000000  00039daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2450  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002500  00000000  00000000  000c24a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001cb0 	.word	0x08001cb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001cb0 	.word	0x08001cb0

08000150 <_ZN3LedC1Ev>:
#include"LED.hpp"
#include "stm32f1xx_hal.h"

Led::Led(){
 8000150:	b580      	push	{r7, lr}
 8000152:	b088      	sub	sp, #32
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000158:	f107 0310 	add.w	r3, r7, #16
 800015c:	2200      	movs	r2, #0
 800015e:	601a      	str	r2, [r3, #0]
 8000160:	605a      	str	r2, [r3, #4]
 8000162:	609a      	str	r2, [r3, #8]
 8000164:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000166:	4b12      	ldr	r3, [pc, #72]	; (80001b0 <_ZN3LedC1Ev+0x60>)
 8000168:	699b      	ldr	r3, [r3, #24]
 800016a:	4a11      	ldr	r2, [pc, #68]	; (80001b0 <_ZN3LedC1Ev+0x60>)
 800016c:	f043 0308 	orr.w	r3, r3, #8
 8000170:	6193      	str	r3, [r2, #24]
 8000172:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <_ZN3LedC1Ev+0x60>)
 8000174:	699b      	ldr	r3, [r3, #24]
 8000176:	f003 0308 	and.w	r3, r3, #8
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	68fb      	ldr	r3, [r7, #12]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800017e:	2200      	movs	r2, #0
 8000180:	2101      	movs	r1, #1
 8000182:	480c      	ldr	r0, [pc, #48]	; (80001b4 <_ZN3LedC1Ev+0x64>)
 8000184:	f000 fe1c 	bl	8000dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000188:	2301      	movs	r3, #1
 800018a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800018c:	2301      	movs	r3, #1
 800018e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000190:	2300      	movs	r3, #0
 8000192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000194:	2302      	movs	r3, #2
 8000196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000198:	f107 0310 	add.w	r3, r7, #16
 800019c:	4619      	mov	r1, r3
 800019e:	4805      	ldr	r0, [pc, #20]	; (80001b4 <_ZN3LedC1Ev+0x64>)
 80001a0:	f000 fc8a 	bl	8000ab8 <HAL_GPIO_Init>
}
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	4618      	mov	r0, r3
 80001a8:	3720      	adds	r7, #32
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40021000 	.word	0x40021000
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <_ZN3Led6led_onEv>:
void Led::led_on(){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState)1);
 80001c0:	2201      	movs	r2, #1
 80001c2:	2101      	movs	r1, #1
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <_ZN3Led6led_onEv+0x1c>)
 80001c6:	f000 fdfb 	bl	8000dc0 <HAL_GPIO_WritePin>

}
 80001ca:	bf00      	nop
 80001cc:	3708      	adds	r7, #8
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010c00 	.word	0x40010c00

080001d8 <_ZN3Led7led_offEv>:
void Led::led_off(){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,(GPIO_PinState) 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	2101      	movs	r1, #1
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <_ZN3Led7led_offEv+0x1c>)
 80001e6:	f000 fdeb 	bl	8000dc0 <HAL_GPIO_WritePin>
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	40010c00 	.word	0x40010c00

080001f8 <_ZN3BLEC1Ev>:
#ifndef BLEhpp
#define BLEhpp
#include<stdint.h>
#include "stm32f1xx_hal.h"
#include"Uartcpp.hpp"
class BLE: public Uart{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b082      	sub	sp, #8
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 f9c1 	bl	8000588 <_ZN4UartC1Ev>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4618      	mov	r0, r3
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <main>:
#include"BLE.hpp"
UART_HandleTypeDef huart2;


int main(void)
{
 8000210:	b590      	push	{r4, r7, lr}
 8000212:	b095      	sub	sp, #84	; 0x54
 8000214:	af00      	add	r7, sp, #0

  HAL_Init();
 8000216:	f000 fa2f 	bl	8000678 <HAL_Init>

  HAL_RCC_DeInit();
 800021a:	f000 fde9 	bl	8000df0 <HAL_RCC_DeInit>
  SystemCoreClockUpdate();
 800021e:	f000 f91b 	bl	8000458 <SystemCoreClockUpdate>

  Led led;
 8000222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000226:	4618      	mov	r0, r3
 8000228:	f7ff ff92 	bl	8000150 <_ZN3LedC1Ev>
  BLE ble;
 800022c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ffe1 	bl	80001f8 <_ZN3BLEC1Ev>

  huart2 =  BLE::getUartHandler();
 8000236:	4c1d      	ldr	r4, [pc, #116]	; (80002ac <main+0x9c>)
 8000238:	463b      	mov	r3, r7
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f9de 	bl	80005fc <_ZN4Uart14getUartHandlerEv>
 8000240:	4620      	mov	r0, r4
 8000242:	463b      	mov	r3, r7
 8000244:	2244      	movs	r2, #68	; 0x44
 8000246:	4619      	mov	r1, r3
 8000248:	f001 fd24 	bl	8001c94 <memcpy>
  BLE::uartInit();
 800024c:	f000 f9e8 	bl	8000620 <_ZN4Uart8uartInitEv>
  HAL_UART_Receive_IT(&huart2, BLE::recieveByteAddress(), 1);
 8000250:	f000 f9fa 	bl	8000648 <_ZN4Uart18recieveByteAddressEv>
 8000254:	4603      	mov	r3, r0
 8000256:	2201      	movs	r2, #1
 8000258:	4619      	mov	r1, r3
 800025a:	4814      	ldr	r0, [pc, #80]	; (80002ac <main+0x9c>)
 800025c:	f000 fee1 	bl	8001022 <HAL_UART_Receive_IT>

    while (1)
    {
        if(ble.getRecieveByte() == 'S')
 8000260:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f9f9 	bl	800065c <_ZN4Uart14getRecieveByteEv>
 800026a:	4603      	mov	r3, r0
 800026c:	2b53      	cmp	r3, #83	; 0x53
 800026e:	bf0c      	ite	eq
 8000270:	2301      	moveq	r3, #1
 8000272:	2300      	movne	r3, #0
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b00      	cmp	r3, #0
 8000278:	d005      	beq.n	8000286 <main+0x76>
        {
        	led.led_on();
 800027a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff9a 	bl	80001b8 <_ZN3Led6led_onEv>
 8000284:	e7ec      	b.n	8000260 <main+0x50>

        }
        else if(ble.getRecieveByte()  == 'F')
 8000286:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800028a:	4618      	mov	r0, r3
 800028c:	f000 f9e6 	bl	800065c <_ZN4Uart14getRecieveByteEv>
 8000290:	4603      	mov	r3, r0
 8000292:	2b46      	cmp	r3, #70	; 0x46
 8000294:	bf0c      	ite	eq
 8000296:	2301      	moveq	r3, #1
 8000298:	2300      	movne	r3, #0
 800029a:	b2db      	uxtb	r3, r3
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0df      	beq.n	8000260 <main+0x50>
        {
            led.led_off();
 80002a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ff97 	bl	80001d8 <_ZN3Led7led_offEv>
        if(ble.getRecieveByte() == 'S')
 80002aa:	e7d9      	b.n	8000260 <main+0x50>
 80002ac:	20000028 	.word	0x20000028

080002b0 <HAL_UART_RxCpltCallback>:
    }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart2.Instance)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <HAL_UART_RxCpltCallback+0x2c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d107      	bne.n	80002d4 <HAL_UART_RxCpltCallback+0x24>
    {
    	HAL_UART_Receive_IT(&huart2, BLE::recieveByteAddress(), 1);
 80002c4:	f000 f9c0 	bl	8000648 <_ZN4Uart18recieveByteAddressEv>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2201      	movs	r2, #1
 80002cc:	4619      	mov	r1, r3
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <HAL_UART_RxCpltCallback+0x2c>)
 80002d0:	f000 fea7 	bl	8001022 <HAL_UART_Receive_IT>

    }
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000028 	.word	0x20000028

080002e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e6:	4b18      	ldr	r3, [pc, #96]	; (8000348 <HAL_MspInit+0x68>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a17      	ldr	r2, [pc, #92]	; (8000348 <HAL_MspInit+0x68>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <HAL_MspInit+0x68>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <HAL_MspInit+0x68>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a11      	ldr	r2, [pc, #68]	; (8000348 <HAL_MspInit+0x68>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <HAL_MspInit+0x68>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000316:	2200      	movs	r2, #0
 8000318:	210f      	movs	r1, #15
 800031a:	f06f 0001 	mvn.w	r0, #1
 800031e:	f000 fae4 	bl	80008ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <HAL_MspInit+0x6c>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <HAL_MspInit+0x6c>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000

08000350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000358:	f107 0310 	add.w	r3, r7, #16
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <HAL_UART_MspInit+0x98>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d137      	bne.n	80003e0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <HAL_UART_MspInit+0x9c>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <HAL_UART_MspInit+0x9c>)
 8000376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037a:	61d3      	str	r3, [r2, #28]
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <HAL_UART_MspInit+0x9c>)
 800037e:	69db      	ldr	r3, [r3, #28]
 8000380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <HAL_UART_MspInit+0x9c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <HAL_UART_MspInit+0x9c>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_UART_MspInit+0x9c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003a0:	2304      	movs	r3, #4
 80003a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003a4:	2302      	movs	r3, #2
 80003a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a8:	2303      	movs	r3, #3
 80003aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	480f      	ldr	r0, [pc, #60]	; (80003f0 <HAL_UART_MspInit+0xa0>)
 80003b4:	f000 fb80 	bl	8000ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003b8:	2308      	movs	r3, #8
 80003ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4809      	ldr	r0, [pc, #36]	; (80003f0 <HAL_UART_MspInit+0xa0>)
 80003cc:	f000 fb74 	bl	8000ab8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2105      	movs	r1, #5
 80003d4:	2026      	movs	r0, #38	; 0x26
 80003d6:	f000 fa88 	bl	80008ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003da:	2026      	movs	r0, #38	; 0x26
 80003dc:	f000 faa1 	bl	8000922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40004400 	.word	0x40004400
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010800 	.word	0x40010800

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <NMI_Handler+0x4>

080003fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <HardFault_Handler+0x4>

08000400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <MemManage_Handler+0x4>

08000406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <UsageFault_Handler+0x4>

08000412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000422:	f000 f96f 	bl	8000704 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000426:	f001 fb95 	bl	8001b54 <xTaskGetSchedulerState>
 800042a:	4603      	mov	r3, r0
 800042c:	2b01      	cmp	r3, #1
 800042e:	d001      	beq.n	8000434 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000430:	f001 fbea 	bl	8001c08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}

08000438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800043c:	4802      	ldr	r0, [pc, #8]	; (8000448 <USART2_IRQHandler+0x10>)
 800043e:	f000 fe21 	bl	8001084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000028 	.word	0x20000028

0800044c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <SystemCoreClockUpdate+0xd0>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	f003 030c 	and.w	r3, r3, #12
 8000472:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b08      	cmp	r3, #8
 8000478:	d011      	beq.n	800049e <SystemCoreClockUpdate+0x46>
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b08      	cmp	r3, #8
 800047e:	d83a      	bhi.n	80004f6 <SystemCoreClockUpdate+0x9e>
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d003      	beq.n	800048e <SystemCoreClockUpdate+0x36>
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	2b04      	cmp	r3, #4
 800048a:	d004      	beq.n	8000496 <SystemCoreClockUpdate+0x3e>
 800048c:	e033      	b.n	80004f6 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <SystemCoreClockUpdate+0xd4>)
 8000490:	4a27      	ldr	r2, [pc, #156]	; (8000530 <SystemCoreClockUpdate+0xd8>)
 8000492:	601a      	str	r2, [r3, #0]
      break;
 8000494:	e033      	b.n	80004fe <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <SystemCoreClockUpdate+0xd4>)
 8000498:	4a25      	ldr	r2, [pc, #148]	; (8000530 <SystemCoreClockUpdate+0xd8>)
 800049a:	601a      	str	r2, [r3, #0]
      break;
 800049c:	e02f      	b.n	80004fe <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800049e:	4b22      	ldr	r3, [pc, #136]	; (8000528 <SystemCoreClockUpdate+0xd0>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004a6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <SystemCoreClockUpdate+0xd0>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004b0:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	0c9b      	lsrs	r3, r3, #18
 80004b6:	3302      	adds	r3, #2
 80004b8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d106      	bne.n	80004ce <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <SystemCoreClockUpdate+0xdc>)
 80004c4:	fb02 f303 	mul.w	r3, r2, r3
 80004c8:	4a18      	ldr	r2, [pc, #96]	; (800052c <SystemCoreClockUpdate+0xd4>)
 80004ca:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80004cc:	e017      	b.n	80004fe <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <SystemCoreClockUpdate+0xd0>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4a15      	ldr	r2, [pc, #84]	; (8000534 <SystemCoreClockUpdate+0xdc>)
 80004de:	fb02 f303 	mul.w	r3, r2, r3
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <SystemCoreClockUpdate+0xd4>)
 80004e4:	6013      	str	r3, [r2, #0]
      break;
 80004e6:	e00a      	b.n	80004fe <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <SystemCoreClockUpdate+0xd8>)
 80004ec:	fb02 f303 	mul.w	r3, r2, r3
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <SystemCoreClockUpdate+0xd4>)
 80004f2:	6013      	str	r3, [r2, #0]
      break;
 80004f4:	e003      	b.n	80004fe <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <SystemCoreClockUpdate+0xd4>)
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <SystemCoreClockUpdate+0xd8>)
 80004fa:	601a      	str	r2, [r3, #0]
      break;
 80004fc:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <SystemCoreClockUpdate+0xd0>)
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	091b      	lsrs	r3, r3, #4
 8000504:	f003 030f 	and.w	r3, r3, #15
 8000508:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <SystemCoreClockUpdate+0xe0>)
 800050a:	5cd3      	ldrb	r3, [r2, r3]
 800050c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <SystemCoreClockUpdate+0xd4>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	fa22 f303 	lsr.w	r3, r2, r3
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <SystemCoreClockUpdate+0xd4>)
 800051a:	6013      	str	r3, [r2, #0]
}
 800051c:	bf00      	nop
 800051e:	3714      	adds	r7, #20
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	20000000 	.word	0x20000000
 8000530:	007a1200 	.word	0x007a1200
 8000534:	003d0900 	.word	0x003d0900
 8000538:	08001cc8 	.word	0x08001cc8

0800053c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	; (8000570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	; (8000574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000562:	f7ff ff73 	bl	800044c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000566:	f001 fb71 	bl	8001c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800056a:	f7ff fe51 	bl	8000210 <main>
  bx lr
 800056e:	4770      	bx	lr
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000578:	08001ce8 	.word	0x08001ce8
  ldr r2, =_sbss
 800057c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000580:	20000544 	.word	0x20000544

08000584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_2_IRQHandler>
	...

08000588 <_ZN4UartC1Ev>:
#include"Uartcpp.hpp"
UART_HandleTypeDef Uart::huart;
uint8_t Uart::recieveByte;
Uart::Uart(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <_ZN4UartC1Ev+0x68>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <_ZN4UartC1Ev+0x68>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <_ZN4UartC1Ev+0x68>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f003 0304 	and.w	r3, r3, #4
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
	huart.Init.BaudRate = 9600;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005aa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005ae:	605a      	str	r2, [r3, #4]
    huart.Instance = USART2;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005b2:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <_ZN4UartC1Ev+0x70>)
 80005b4:	601a      	str	r2, [r3, #0]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
    // HAL_UART_Init(&huart);
      if (HAL_UART_Init(&huart) != HAL_OK)
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <_ZN4UartC1Ev+0x6c>)
 80005dc:	f000 fcd4 	bl	8000f88 <HAL_UART_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
  {
   
  }
}
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4618      	mov	r0, r3
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	2000006c 	.word	0x2000006c
 80005f8:	40004400 	.word	0x40004400

080005fc <_ZN4Uart14getUartHandlerEv>:
        __HAL_RCC_GPIOA_CLK_ENABLE();
        break;
    }
    
}
UART_HandleTypeDef Uart::getUartHandler(){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    return huart;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <_ZN4Uart14getUartHandlerEv+0x20>)
 8000608:	4618      	mov	r0, r3
 800060a:	4611      	mov	r1, r2
 800060c:	2344      	movs	r3, #68	; 0x44
 800060e:	461a      	mov	r2, r3
 8000610:	f001 fb40 	bl	8001c94 <memcpy>
}
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000006c 	.word	0x2000006c

08000620 <_ZN4Uart8uartInitEv>:


uint8_t Uart::uartInit(){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    if(HAL_UART_Init(&huart) != HAL_OK)
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <_ZN4Uart8uartInitEv+0x24>)
 8000626:	f000 fcaf 	bl	8000f88 <HAL_UART_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <_ZN4Uart8uartInitEv+0x1e>
        return 0;
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <_ZN4Uart8uartInitEv+0x20>
    return 1;
 800063e:	2301      	movs	r3, #1
}
 8000640:	4618      	mov	r0, r3
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000006c 	.word	0x2000006c

08000648 <_ZN4Uart18recieveByteAddressEv>:

uint8_t* Uart::recieveByteAddress(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    return &recieveByte;
 800064c:	4b02      	ldr	r3, [pc, #8]	; (8000658 <_ZN4Uart18recieveByteAddressEv+0x10>)
}
 800064e:	4618      	mov	r0, r3
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	200000b0 	.word	0x200000b0

0800065c <_ZN4Uart14getRecieveByteEv>:
uint8_t  Uart::getRecieveByte(){
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    return recieveByte;
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <_ZN4Uart14getRecieveByteEv+0x18>)
 8000666:	781b      	ldrb	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	200000b0 	.word	0x200000b0

08000678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <HAL_Init+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_Init+0x28>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f923 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068e:	200f      	movs	r0, #15
 8000690:	f000 f808 	bl	80006a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000694:	f7ff fe24 	bl	80002e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_InitTick+0x54>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_InitTick+0x58>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 f93b 	bl	800093e <HAL_SYSTICK_Config>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00e      	b.n	80006f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b0f      	cmp	r3, #15
 80006d6:	d80a      	bhi.n	80006ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e0:	f000 f903 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <HAL_InitTick+0x5c>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e000      	b.n	80006f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	20000008 	.word	0x20000008
 8000700:	20000004 	.word	0x20000004

08000704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <HAL_IncTick+0x1c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <HAL_IncTick+0x20>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4413      	add	r3, r2
 8000714:	4a03      	ldr	r2, [pc, #12]	; (8000724 <HAL_IncTick+0x20>)
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000008 	.word	0x20000008
 8000724:	20000540 	.word	0x20000540

08000728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <HAL_GetTick+0x10>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000540 	.word	0x20000540

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	; (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4906      	ldr	r1, [pc, #24]	; (80007d4 <__NVIC_EnableIRQ+0x34>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b4:	f7ff ff90 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff2d 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008fc:	f7ff ff42 	bl	8000784 <__NVIC_GetPriorityGrouping>
 8000900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	68b9      	ldr	r1, [r7, #8]
 8000906:	6978      	ldr	r0, [r7, #20]
 8000908:	f7ff ff90 	bl	800082c <NVIC_EncodePriority>
 800090c:	4602      	mov	r2, r0
 800090e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff5f 	bl	80007d8 <__NVIC_SetPriority>
}
 800091a:	bf00      	nop
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800092c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff35 	bl	80007a0 <__NVIC_EnableIRQ>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffa2 	bl	8000890 <SysTick_Config>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000956:	b480      	push	{r7}
 8000958:	b085      	sub	sp, #20
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000968:	2b02      	cmp	r3, #2
 800096a:	d008      	beq.n	800097e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2204      	movs	r2, #4
 8000970:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2200      	movs	r2, #0
 8000976:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e020      	b.n	80009c0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f022 020e 	bic.w	r2, r2, #14
 800098c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f022 0201 	bic.w	r2, r2, #1
 800099c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009a6:	2101      	movs	r1, #1
 80009a8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
	...

080009cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d005      	beq.n	80009ee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2204      	movs	r2, #4
 80009e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e051      	b.n	8000a92 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f022 020e 	bic.w	r2, r2, #14
 80009fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 0201 	bic.w	r2, r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <HAL_DMA_Abort_IT+0xd0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d029      	beq.n	8000a6c <HAL_DMA_Abort_IT+0xa0>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <HAL_DMA_Abort_IT+0xd4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d022      	beq.n	8000a68 <HAL_DMA_Abort_IT+0x9c>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_DMA_Abort_IT+0xd8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d01a      	beq.n	8000a62 <HAL_DMA_Abort_IT+0x96>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1d      	ldr	r2, [pc, #116]	; (8000aa8 <HAL_DMA_Abort_IT+0xdc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d012      	beq.n	8000a5c <HAL_DMA_Abort_IT+0x90>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <HAL_DMA_Abort_IT+0xe0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d00a      	beq.n	8000a56 <HAL_DMA_Abort_IT+0x8a>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <HAL_DMA_Abort_IT+0xe4>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d102      	bne.n	8000a50 <HAL_DMA_Abort_IT+0x84>
 8000a4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a4e:	e00e      	b.n	8000a6e <HAL_DMA_Abort_IT+0xa2>
 8000a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a54:	e00b      	b.n	8000a6e <HAL_DMA_Abort_IT+0xa2>
 8000a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a5a:	e008      	b.n	8000a6e <HAL_DMA_Abort_IT+0xa2>
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	e005      	b.n	8000a6e <HAL_DMA_Abort_IT+0xa2>
 8000a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a66:	e002      	b.n	8000a6e <HAL_DMA_Abort_IT+0xa2>
 8000a68:	2310      	movs	r3, #16
 8000a6a:	e000      	b.n	8000a6e <HAL_DMA_Abort_IT+0xa2>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4a11      	ldr	r2, [pc, #68]	; (8000ab4 <HAL_DMA_Abort_IT+0xe8>)
 8000a70:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2201      	movs	r2, #1
 8000a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	4798      	blx	r3
    } 
  }
  return status;
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40020008 	.word	0x40020008
 8000aa0:	4002001c 	.word	0x4002001c
 8000aa4:	40020030 	.word	0x40020030
 8000aa8:	40020044 	.word	0x40020044
 8000aac:	40020058 	.word	0x40020058
 8000ab0:	4002006c 	.word	0x4002006c
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aca:	e169      	b.n	8000da0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000acc:	2201      	movs	r2, #1
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	4013      	ands	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	f040 8158 	bne.w	8000d9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a9a      	ldr	r2, [pc, #616]	; (8000d58 <HAL_GPIO_Init+0x2a0>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d05e      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000af4:	4a98      	ldr	r2, [pc, #608]	; (8000d58 <HAL_GPIO_Init+0x2a0>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d875      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000afa:	4a98      	ldr	r2, [pc, #608]	; (8000d5c <HAL_GPIO_Init+0x2a4>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d058      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b00:	4a96      	ldr	r2, [pc, #600]	; (8000d5c <HAL_GPIO_Init+0x2a4>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d86f      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b06:	4a96      	ldr	r2, [pc, #600]	; (8000d60 <HAL_GPIO_Init+0x2a8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d052      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b0c:	4a94      	ldr	r2, [pc, #592]	; (8000d60 <HAL_GPIO_Init+0x2a8>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d869      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b12:	4a94      	ldr	r2, [pc, #592]	; (8000d64 <HAL_GPIO_Init+0x2ac>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d04c      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b18:	4a92      	ldr	r2, [pc, #584]	; (8000d64 <HAL_GPIO_Init+0x2ac>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d863      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b1e:	4a92      	ldr	r2, [pc, #584]	; (8000d68 <HAL_GPIO_Init+0x2b0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d046      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
 8000b24:	4a90      	ldr	r2, [pc, #576]	; (8000d68 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d85d      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b2a:	2b12      	cmp	r3, #18
 8000b2c:	d82a      	bhi.n	8000b84 <HAL_GPIO_Init+0xcc>
 8000b2e:	2b12      	cmp	r3, #18
 8000b30:	d859      	bhi.n	8000be6 <HAL_GPIO_Init+0x12e>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <HAL_GPIO_Init+0x80>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000bb3 	.word	0x08000bb3
 8000b3c:	08000b8d 	.word	0x08000b8d
 8000b40:	08000b9f 	.word	0x08000b9f
 8000b44:	08000be1 	.word	0x08000be1
 8000b48:	08000be7 	.word	0x08000be7
 8000b4c:	08000be7 	.word	0x08000be7
 8000b50:	08000be7 	.word	0x08000be7
 8000b54:	08000be7 	.word	0x08000be7
 8000b58:	08000be7 	.word	0x08000be7
 8000b5c:	08000be7 	.word	0x08000be7
 8000b60:	08000be7 	.word	0x08000be7
 8000b64:	08000be7 	.word	0x08000be7
 8000b68:	08000be7 	.word	0x08000be7
 8000b6c:	08000be7 	.word	0x08000be7
 8000b70:	08000be7 	.word	0x08000be7
 8000b74:	08000be7 	.word	0x08000be7
 8000b78:	08000be7 	.word	0x08000be7
 8000b7c:	08000b95 	.word	0x08000b95
 8000b80:	08000ba9 	.word	0x08000ba9
 8000b84:	4a79      	ldr	r2, [pc, #484]	; (8000d6c <HAL_GPIO_Init+0x2b4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d013      	beq.n	8000bb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b8a:	e02c      	b.n	8000be6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e029      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	623b      	str	r3, [r7, #32]
          break;
 8000b9c:	e024      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	623b      	str	r3, [r7, #32]
          break;
 8000ba6:	e01f      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	330c      	adds	r3, #12
 8000bae:	623b      	str	r3, [r7, #32]
          break;
 8000bb0:	e01a      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e013      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d105      	bne.n	8000bd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	611a      	str	r2, [r3, #16]
          break;
 8000bd2:	e009      	b.n	8000be8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	615a      	str	r2, [r3, #20]
          break;
 8000bde:	e003      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
          break;
 8000be4:	e000      	b.n	8000be8 <HAL_GPIO_Init+0x130>
          break;
 8000be6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2bff      	cmp	r3, #255	; 0xff
 8000bec:	d801      	bhi.n	8000bf2 <HAL_GPIO_Init+0x13a>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	e001      	b.n	8000bf6 <HAL_GPIO_Init+0x13e>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	2bff      	cmp	r3, #255	; 0xff
 8000bfc:	d802      	bhi.n	8000c04 <HAL_GPIO_Init+0x14c>
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	e002      	b.n	8000c0a <HAL_GPIO_Init+0x152>
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	3b08      	subs	r3, #8
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	210f      	movs	r1, #15
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	6a39      	ldr	r1, [r7, #32]
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	fa01 f303 	lsl.w	r3, r1, r3
 8000c24:	431a      	orrs	r2, r3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80b1 	beq.w	8000d9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c38:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <HAL_GPIO_Init+0x2b8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a4c      	ldr	r2, [pc, #304]	; (8000d70 <HAL_GPIO_Init+0x2b8>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <HAL_GPIO_Init+0x2b8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c50:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <HAL_GPIO_Init+0x2bc>)
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	089b      	lsrs	r3, r3, #2
 8000c56:	3302      	adds	r3, #2
 8000c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	220f      	movs	r2, #15
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a40      	ldr	r2, [pc, #256]	; (8000d78 <HAL_GPIO_Init+0x2c0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d013      	beq.n	8000ca4 <HAL_GPIO_Init+0x1ec>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	; (8000d7c <HAL_GPIO_Init+0x2c4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d00d      	beq.n	8000ca0 <HAL_GPIO_Init+0x1e8>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a3e      	ldr	r2, [pc, #248]	; (8000d80 <HAL_GPIO_Init+0x2c8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x1e4>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3d      	ldr	r2, [pc, #244]	; (8000d84 <HAL_GPIO_Init+0x2cc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d101      	bne.n	8000c98 <HAL_GPIO_Init+0x1e0>
 8000c94:	2303      	movs	r3, #3
 8000c96:	e006      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000c98:	2304      	movs	r3, #4
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <HAL_GPIO_Init+0x1ee>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca8:	f002 0203 	and.w	r2, r2, #3
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb6:	492f      	ldr	r1, [pc, #188]	; (8000d74 <HAL_GPIO_Init+0x2bc>)
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	089b      	lsrs	r3, r3, #2
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	492c      	ldr	r1, [pc, #176]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	4928      	ldr	r1, [pc, #160]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000ce8:	4013      	ands	r3, r2
 8000cea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf8:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	4922      	ldr	r1, [pc, #136]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	604b      	str	r3, [r1, #4]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	491e      	ldr	r1, [pc, #120]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	4918      	ldr	r1, [pc, #96]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	608b      	str	r3, [r1, #8]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4914      	ldr	r1, [pc, #80]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d021      	beq.n	8000d8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	490e      	ldr	r1, [pc, #56]	; (8000d88 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60cb      	str	r3, [r1, #12]
 8000d54:	e021      	b.n	8000d9a <HAL_GPIO_Init+0x2e2>
 8000d56:	bf00      	nop
 8000d58:	10320000 	.word	0x10320000
 8000d5c:	10310000 	.word	0x10310000
 8000d60:	10220000 	.word	0x10220000
 8000d64:	10210000 	.word	0x10210000
 8000d68:	10120000 	.word	0x10120000
 8000d6c:	10110000 	.word	0x10110000
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010000 	.word	0x40010000
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	40011000 	.word	0x40011000
 8000d84:	40011400 	.word	0x40011400
 8000d88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_GPIO_Init+0x304>)
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4909      	ldr	r1, [pc, #36]	; (8000dbc <HAL_GPIO_Init+0x304>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	fa22 f303 	lsr.w	r3, r2, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f47f ae8e 	bne.w	8000acc <HAL_GPIO_Init+0x14>
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	372c      	adds	r7, #44	; 0x2c
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd0:	787b      	ldrb	r3, [r7, #1]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ddc:	e003      	b.n	8000de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	041a      	lsls	r2, r3, #16
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	611a      	str	r2, [r3, #16]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000df6:	f7ff fc97 	bl	8000728 <HAL_GetTick>
 8000dfa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000dfc:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a44      	ldr	r2, [pc, #272]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fc8d 	bl	8000728 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e077      	b.n	8000f0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000e1c:	4b3d      	ldr	r3, [pc, #244]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e30:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000e38:	f7ff fc76 	bl	8000728 <HAL_GetTick>
 8000e3c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000e3e:	4b35      	ldr	r3, [pc, #212]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e46:	f7ff fc6f 	bl	8000728 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d901      	bls.n	8000e5c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	e057      	b.n	8000f0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000e5c:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1ee      	bne.n	8000e46 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_RCC_DeInit+0x128>)
 8000e6a:	4a2c      	ldr	r2, [pc, #176]	; (8000f1c <HAL_RCC_DeInit+0x12c>)
 8000e6c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <HAL_RCC_DeInit+0x130>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc16 	bl	80006a4 <HAL_InitTick>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e044      	b.n	8000f0c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000e82:	f7ff fc51 	bl	8000728 <HAL_GetTick>
 8000e86:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e92:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fc47 	bl	8000728 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e031      	b.n	8000f0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000eba:	f7ff fc35 	bl	8000728 <HAL_GetTick>
 8000ebe:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000ec6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ece:	f7ff fc2b 	bl	8000728 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b64      	cmp	r3, #100	; 0x64
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e015      	b.n	8000f0c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f0      	bne.n	8000ece <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a08      	ldr	r2, [pc, #32]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f02:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <HAL_RCC_DeInit+0x124>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40021000 	.word	0x40021000
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	007a1200 	.word	0x007a1200
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	20000000 	.word	0x20000000

08000f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f3c:	f7ff fff2 	bl	8000f24 <HAL_RCC_GetHCLKFreq>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	4903      	ldr	r1, [pc, #12]	; (8000f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f4e:	5ccb      	ldrb	r3, [r1, r3]
 8000f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	08001cd8 	.word	0x08001cd8

08000f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_RCC_GetHCLKFreq>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	0adb      	lsrs	r3, r3, #11
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	4903      	ldr	r1, [pc, #12]	; (8000f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	08001cd8 	.word	0x08001cd8

08000f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e03f      	b.n	800101a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff f9ce 	bl	8000350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2224      	movs	r2, #36	; 0x24
 8000fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fba9 	bl	8001724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2220      	movs	r2, #32
 800100c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	4613      	mov	r3, r2
 800102e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b20      	cmp	r3, #32
 800103a:	d11d      	bne.n	8001078 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HAL_UART_Receive_IT+0x26>
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e016      	b.n	800107a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_UART_Receive_IT+0x38>
 8001056:	2302      	movs	r3, #2
 8001058:	e00f      	b.n	800107a <HAL_UART_Receive_IT+0x58>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	461a      	mov	r2, r3
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 f9cf 	bl	8001412 <UART_Start_Receive_IT>
 8001074:	4603      	mov	r3, r0
 8001076:	e000      	b.n	800107a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001078:	2302      	movs	r3, #2
  }
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10d      	bne.n	80010d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	f003 0320 	and.w	r3, r3, #32
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d008      	beq.n	80010d6 <HAL_UART_IRQHandler+0x52>
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 fa7f 	bl	80015d2 <UART_Receive_IT>
      return;
 80010d4:	e17b      	b.n	80013ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80b1 	beq.w	8001240 <HAL_UART_IRQHandler+0x1bc>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <HAL_UART_IRQHandler+0x70>
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80a6 	beq.w	8001240 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00a      	beq.n	8001114 <HAL_UART_IRQHandler+0x90>
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00a      	beq.n	8001134 <HAL_UART_IRQHandler+0xb0>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f043 0202 	orr.w	r2, r3, #2
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00a      	beq.n	8001154 <HAL_UART_IRQHandler+0xd0>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f043 0204 	orr.w	r2, r3, #4
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00f      	beq.n	800117e <HAL_UART_IRQHandler+0xfa>
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	f003 0320 	and.w	r3, r3, #32
 8001164:	2b00      	cmp	r3, #0
 8001166:	d104      	bne.n	8001172 <HAL_UART_IRQHandler+0xee>
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	2b00      	cmp	r3, #0
 8001170:	d005      	beq.n	800117e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f043 0208 	orr.w	r2, r3, #8
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 811e 	beq.w	80013c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b00      	cmp	r3, #0
 8001190:	d007      	beq.n	80011a2 <HAL_UART_IRQHandler+0x11e>
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fa18 	bl	80015d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf14      	ite	ne
 80011b0:	2301      	movne	r3, #1
 80011b2:	2300      	moveq	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <HAL_UART_IRQHandler+0x146>
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d031      	beq.n	800122e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f95a 	bl	8001484 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d023      	beq.n	8001226 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d013      	beq.n	800121e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fa:	4a76      	ldr	r2, [pc, #472]	; (80013d4 <HAL_UART_IRQHandler+0x350>)
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fbe2 	bl	80009cc <HAL_DMA_Abort_IT>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d016      	beq.n	800123c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001218:	4610      	mov	r0, r2
 800121a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800121c:	e00e      	b.n	800123c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f8e3 	bl	80013ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001224:	e00a      	b.n	800123c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f8df 	bl	80013ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800122c:	e006      	b.n	800123c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 f8db 	bl	80013ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800123a:	e0c3      	b.n	80013c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800123c:	bf00      	nop
    return;
 800123e:	e0c1      	b.n	80013c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	2b01      	cmp	r3, #1
 8001246:	f040 80a1 	bne.w	800138c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 809b 	beq.w	800138c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001256:	6a3b      	ldr	r3, [r7, #32]
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 8095 	beq.w	800138c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001282:	2b00      	cmp	r3, #0
 8001284:	d04e      	beq.n	8001324 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001290:	8a3b      	ldrh	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 8098 	beq.w	80013c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800129c:	8a3a      	ldrh	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	f080 8092 	bcs.w	80013c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	8a3a      	ldrh	r2, [r7, #16]
 80012a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2b20      	cmp	r3, #32
 80012b2:	d02b      	beq.n	800130c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2220      	movs	r2, #32
 80012e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0210 	bic.w	r2, r2, #16
 8001300:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fb25 	bl	8000956 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001314:	b29b      	uxth	r3, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f86d 	bl	80013fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001322:	e051      	b.n	80013c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800132c:	b29b      	uxth	r3, r3
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001336:	b29b      	uxth	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d047      	beq.n	80013cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800133c:	8a7b      	ldrh	r3, [r7, #18]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d044      	beq.n	80013cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001350:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695a      	ldr	r2, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0201 	bic.w	r2, r2, #1
 8001360:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2220      	movs	r2, #32
 8001366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0210 	bic.w	r2, r2, #16
 800137e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001380:	8a7b      	ldrh	r3, [r7, #18]
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f839 	bl	80013fc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800138a:	e01f      	b.n	80013cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <HAL_UART_IRQHandler+0x324>
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f8af 	bl	8001504 <UART_Transmit_IT>
    return;
 80013a6:	e012      	b.n	80013ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00d      	beq.n	80013ce <HAL_UART_IRQHandler+0x34a>
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f8f0 	bl	80015a2 <UART_EndTransmit_IT>
    return;
 80013c2:	e004      	b.n	80013ce <HAL_UART_IRQHandler+0x34a>
    return;
 80013c4:	bf00      	nop
 80013c6:	e002      	b.n	80013ce <HAL_UART_IRQHandler+0x34a>
      return;
 80013c8:	bf00      	nop
 80013ca:	e000      	b.n	80013ce <HAL_UART_IRQHandler+0x34a>
      return;
 80013cc:	bf00      	nop
  }
}
 80013ce:	3728      	adds	r7, #40	; 0x28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	080014dd 	.word	0x080014dd

080013d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001412:	b480      	push	{r7}
 8001414:	b085      	sub	sp, #20
 8001416:	af00      	add	r7, sp, #0
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	4613      	mov	r3, r2
 800141e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2222      	movs	r2, #34	; 0x22
 800143c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001456:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0220 	orr.w	r2, r2, #32
 8001476:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800149a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0201 	bic.w	r2, r2, #1
 80014aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d107      	bne.n	80014c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0210 	bic.w	r2, r2, #16
 80014c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff ff77 	bl	80013ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b21      	cmp	r3, #33	; 0x21
 8001516:	d13e      	bne.n	8001596 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001520:	d114      	bne.n	800154c <UART_Transmit_IT+0x48>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d110      	bne.n	800154c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800153e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	1c9a      	adds	r2, r3, #2
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	621a      	str	r2, [r3, #32]
 800154a:	e008      	b.n	800155e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	1c59      	adds	r1, r3, #1
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6211      	str	r1, [r2, #32]
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001562:	b29b      	uxth	r3, r3
 8001564:	3b01      	subs	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4619      	mov	r1, r3
 800156c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001580:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001590:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001596:	2302      	movs	r3, #2
  }
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff08 	bl	80013d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b22      	cmp	r3, #34	; 0x22
 80015e4:	f040 8099 	bne.w	800171a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f0:	d117      	bne.n	8001622 <UART_Receive_IT+0x50>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d113      	bne.n	8001622 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001602:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	b29b      	uxth	r3, r3
 800160c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001610:	b29a      	uxth	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	1c9a      	adds	r2, r3, #2
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
 8001620:	e026      	b.n	8001670 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001634:	d007      	beq.n	8001646 <UART_Receive_IT+0x74>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10a      	bne.n	8001654 <UART_Receive_IT+0x82>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	701a      	strb	r2, [r3, #0]
 8001652:	e008      	b.n	8001666 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001660:	b2da      	uxtb	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001674:	b29b      	uxth	r3, r3
 8001676:	3b01      	subs	r3, #1
 8001678:	b29b      	uxth	r3, r3
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	4619      	mov	r1, r3
 800167e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001680:	2b00      	cmp	r3, #0
 8001682:	d148      	bne.n	8001716 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0220 	bic.w	r2, r2, #32
 8001692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0201 	bic.w	r2, r2, #1
 80016b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2220      	movs	r2, #32
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d123      	bne.n	800170c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0210 	bic.w	r2, r2, #16
 80016d8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b10      	cmp	r3, #16
 80016e6:	d10a      	bne.n	80016fe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fe79 	bl	80013fc <HAL_UARTEx_RxEventCallback>
 800170a:	e002      	b.n	8001712 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7fe fdcf 	bl	80002b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e002      	b.n	800171c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800171a:	2302      	movs	r3, #2
  }
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68da      	ldr	r2, [r3, #12]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800175e:	f023 030c 	bic.w	r3, r3, #12
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	430b      	orrs	r3, r1
 800176a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	430a      	orrs	r2, r1
 8001780:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2c      	ldr	r2, [pc, #176]	; (8001838 <UART_SetConfig+0x114>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d103      	bne.n	8001794 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800178c:	f7ff fbe8 	bl	8000f60 <HAL_RCC_GetPCLK2Freq>
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	e002      	b.n	800179a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001794:	f7ff fbd0 	bl	8000f38 <HAL_RCC_GetPCLK1Freq>
 8001798:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	009a      	lsls	r2, r3, #2
 80017a4:	441a      	add	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <UART_SetConfig+0x118>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	0119      	lsls	r1, r3, #4
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	009a      	lsls	r2, r3, #2
 80017c4:	441a      	add	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <UART_SetConfig+0x118>)
 80017d2:	fba3 0302 	umull	r0, r3, r3, r2
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	fb00 f303 	mul.w	r3, r0, r3
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	3332      	adds	r3, #50	; 0x32
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <UART_SetConfig+0x118>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f0:	4419      	add	r1, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4613      	mov	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	009a      	lsls	r2, r3, #2
 80017fc:	441a      	add	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	fbb2 f2f3 	udiv	r2, r2, r3
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <UART_SetConfig+0x118>)
 800180a:	fba3 0302 	umull	r0, r3, r3, r2
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2064      	movs	r0, #100	; 0x64
 8001812:	fb00 f303 	mul.w	r3, r0, r3
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	3332      	adds	r3, #50	; 0x32
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <UART_SetConfig+0x118>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	f003 020f 	and.w	r2, r3, #15
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	440a      	add	r2, r1
 800182e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40013800 	.word	0x40013800
 800183c:	51eb851f 	.word	0x51eb851f

08001840 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6892      	ldr	r2, [r2, #8]
 800189c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6852      	ldr	r2, [r2, #4]
 80018a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d103      	bne.n	80018ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80018e2:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <xTaskIncrementTick+0x150>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 808e 	bne.w	8001a08 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <xTaskIncrementTick+0x154>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80018f4:	4a4d      	ldr	r2, [pc, #308]	; (8001a2c <xTaskIncrementTick+0x154>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d120      	bne.n	8001942 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001900:	4b4b      	ldr	r3, [pc, #300]	; (8001a30 <xTaskIncrementTick+0x158>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00a      	beq.n	8001920 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190e:	f383 8811 	msr	BASEPRI, r3
 8001912:	f3bf 8f6f 	isb	sy
 8001916:	f3bf 8f4f 	dsb	sy
 800191a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800191c:	bf00      	nop
 800191e:	e7fe      	b.n	800191e <xTaskIncrementTick+0x46>
 8001920:	4b43      	ldr	r3, [pc, #268]	; (8001a30 <xTaskIncrementTick+0x158>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <xTaskIncrementTick+0x15c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a41      	ldr	r2, [pc, #260]	; (8001a30 <xTaskIncrementTick+0x158>)
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4a41      	ldr	r2, [pc, #260]	; (8001a34 <xTaskIncrementTick+0x15c>)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <xTaskIncrementTick+0x160>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	3301      	adds	r3, #1
 800193a:	4a3f      	ldr	r2, [pc, #252]	; (8001a38 <xTaskIncrementTick+0x160>)
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	f000 f8e5 	bl	8001b0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <xTaskIncrementTick+0x164>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	429a      	cmp	r2, r3
 800194a:	d34e      	bcc.n	80019ea <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800194c:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <xTaskIncrementTick+0x158>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <xTaskIncrementTick+0x82>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <xTaskIncrementTick+0x84>
 800195a:	2300      	movs	r3, #0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <xTaskIncrementTick+0x164>)
 8001962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001966:	601a      	str	r2, [r3, #0]
					break;
 8001968:	e03f      	b.n	80019ea <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800196a:	4b31      	ldr	r3, [pc, #196]	; (8001a30 <xTaskIncrementTick+0x158>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d203      	bcs.n	800198a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <xTaskIncrementTick+0x164>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6013      	str	r3, [r2, #0]
						break;
 8001988:	e02f      	b.n	80019ea <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	3304      	adds	r3, #4
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff79 	bl	8001886 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3318      	adds	r3, #24
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff70 	bl	8001886 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019aa:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <xTaskIncrementTick+0x168>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d903      	bls.n	80019ba <xTaskIncrementTick+0xe2>
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <xTaskIncrementTick+0x168>)
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <xTaskIncrementTick+0x16c>)
 80019c8:	441a      	add	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	3304      	adds	r3, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4610      	mov	r0, r2
 80019d2:	f7ff ff35 	bl	8001840 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <xTaskIncrementTick+0x170>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3b3      	bcc.n	800194c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019e8:	e7b0      	b.n	800194c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <xTaskIncrementTick+0x170>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f0:	4914      	ldr	r1, [pc, #80]	; (8001a44 <xTaskIncrementTick+0x16c>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d907      	bls.n	8001a12 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e004      	b.n	8001a12 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <xTaskIncrementTick+0x174>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <xTaskIncrementTick+0x174>)
 8001a10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <xTaskIncrementTick+0x178>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001a1e:	697b      	ldr	r3, [r7, #20]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2000053c 	.word	0x2000053c
 8001a2c:	20000520 	.word	0x20000520
 8001a30:	20000518 	.word	0x20000518
 8001a34:	2000051c 	.word	0x2000051c
 8001a38:	20000534 	.word	0x20000534
 8001a3c:	20000538 	.word	0x20000538
 8001a40:	20000524 	.word	0x20000524
 8001a44:	200000b8 	.word	0x200000b8
 8001a48:	200000b4 	.word	0x200000b4
 8001a4c:	2000052c 	.word	0x2000052c
 8001a50:	20000530 	.word	0x20000530

08001a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <vTaskSwitchContext+0xa4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <vTaskSwitchContext+0xa8>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001a68:	e041      	b.n	8001aee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <vTaskSwitchContext+0xa8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001a70:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <vTaskSwitchContext+0xac>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e010      	b.n	8001a9a <vTaskSwitchContext+0x46>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10a      	bne.n	8001a94 <vTaskSwitchContext+0x40>
	__asm volatile
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	607b      	str	r3, [r7, #4]
}
 8001a90:	bf00      	nop
 8001a92:	e7fe      	b.n	8001a92 <vTaskSwitchContext+0x3e>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	491a      	ldr	r1, [pc, #104]	; (8001b04 <vTaskSwitchContext+0xb0>)
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0e4      	beq.n	8001a78 <vTaskSwitchContext+0x24>
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <vTaskSwitchContext+0xb0>)
 8001aba:	4413      	add	r3, r2
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d104      	bne.n	8001ade <vTaskSwitchContext+0x8a>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <vTaskSwitchContext+0xb4>)
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <vTaskSwitchContext+0xac>)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6013      	str	r3, [r2, #0]
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	2000053c 	.word	0x2000053c
 8001afc:	20000530 	.word	0x20000530
 8001b00:	20000524 	.word	0x20000524
 8001b04:	200000b8 	.word	0x200000b8
 8001b08:	200000b4 	.word	0x200000b4

08001b0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <prvResetNextTaskUnblockTime+0x40>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <prvResetNextTaskUnblockTime+0x14>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <prvResetNextTaskUnblockTime+0x16>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <prvResetNextTaskUnblockTime+0x44>)
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001b2e:	e008      	b.n	8001b42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <prvResetNextTaskUnblockTime+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <prvResetNextTaskUnblockTime+0x44>)
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	20000518 	.word	0x20000518
 8001b50:	20000538 	.word	0x20000538

08001b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <xTaskGetSchedulerState+0x34>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d102      	bne.n	8001b68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001b62:	2301      	movs	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	e008      	b.n	8001b7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <xTaskGetSchedulerState+0x38>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001b70:	2302      	movs	r3, #2
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	e001      	b.n	8001b7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001b7a:	687b      	ldr	r3, [r7, #4]
	}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000528 	.word	0x20000528
 8001b8c:	2000053c 	.word	0x2000053c

08001b90 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <pxCurrentTCBConst2>)
 8001b92:	6819      	ldr	r1, [r3, #0]
 8001b94:	6808      	ldr	r0, [r1, #0]
 8001b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b9a:	f380 8809 	msr	PSP, r0
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f380 8811 	msr	BASEPRI, r0
 8001baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8001bae:	4770      	bx	lr

08001bb0 <pxCurrentTCBConst2>:
 8001bb0:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
	...

08001bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001bc0:	f3ef 8009 	mrs	r0, PSP
 8001bc4:	f3bf 8f6f 	isb	sy
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <pxCurrentTCBConst>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bd0:	6010      	str	r0, [r2, #0]
 8001bd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001bd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001bda:	f380 8811 	msr	BASEPRI, r0
 8001bde:	f7ff ff39 	bl	8001a54 <vTaskSwitchContext>
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f380 8811 	msr	BASEPRI, r0
 8001bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	6808      	ldr	r0, [r1, #0]
 8001bf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bf6:	f380 8809 	msr	PSP, r0
 8001bfa:	f3bf 8f6f 	isb	sy
 8001bfe:	4770      	bx	lr

08001c00 <pxCurrentTCBConst>:
 8001c00:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop

08001c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8001c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c12:	f383 8811 	msr	BASEPRI, r3
 8001c16:	f3bf 8f6f 	isb	sy
 8001c1a:	f3bf 8f4f 	dsb	sy
 8001c1e:	607b      	str	r3, [r7, #4]
}
 8001c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001c22:	f7ff fe59 	bl	80018d8 <xTaskIncrementTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <xPortSysTickHandler+0x40>)
 8001c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	e000ed04 	.word	0xe000ed04

08001c4c <__libc_init_array>:
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	2600      	movs	r6, #0
 8001c50:	4d0c      	ldr	r5, [pc, #48]	; (8001c84 <__libc_init_array+0x38>)
 8001c52:	4c0d      	ldr	r4, [pc, #52]	; (8001c88 <__libc_init_array+0x3c>)
 8001c54:	1b64      	subs	r4, r4, r5
 8001c56:	10a4      	asrs	r4, r4, #2
 8001c58:	42a6      	cmp	r6, r4
 8001c5a:	d109      	bne.n	8001c70 <__libc_init_array+0x24>
 8001c5c:	f000 f828 	bl	8001cb0 <_init>
 8001c60:	2600      	movs	r6, #0
 8001c62:	4d0a      	ldr	r5, [pc, #40]	; (8001c8c <__libc_init_array+0x40>)
 8001c64:	4c0a      	ldr	r4, [pc, #40]	; (8001c90 <__libc_init_array+0x44>)
 8001c66:	1b64      	subs	r4, r4, r5
 8001c68:	10a4      	asrs	r4, r4, #2
 8001c6a:	42a6      	cmp	r6, r4
 8001c6c:	d105      	bne.n	8001c7a <__libc_init_array+0x2e>
 8001c6e:	bd70      	pop	{r4, r5, r6, pc}
 8001c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c74:	4798      	blx	r3
 8001c76:	3601      	adds	r6, #1
 8001c78:	e7ee      	b.n	8001c58 <__libc_init_array+0xc>
 8001c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c7e:	4798      	blx	r3
 8001c80:	3601      	adds	r6, #1
 8001c82:	e7f2      	b.n	8001c6a <__libc_init_array+0x1e>
 8001c84:	08001ce0 	.word	0x08001ce0
 8001c88:	08001ce0 	.word	0x08001ce0
 8001c8c:	08001ce0 	.word	0x08001ce0
 8001c90:	08001ce4 	.word	0x08001ce4

08001c94 <memcpy>:
 8001c94:	440a      	add	r2, r1
 8001c96:	4291      	cmp	r1, r2
 8001c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001c9c:	d100      	bne.n	8001ca0 <memcpy+0xc>
 8001c9e:	4770      	bx	lr
 8001ca0:	b510      	push	{r4, lr}
 8001ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ca6:	4291      	cmp	r1, r2
 8001ca8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cac:	d1f9      	bne.n	8001ca2 <memcpy+0xe>
 8001cae:	bd10      	pop	{r4, pc}

08001cb0 <_init>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr

08001cbc <_fini>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	bf00      	nop
 8001cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc2:	bc08      	pop	{r3}
 8001cc4:	469e      	mov	lr, r3
 8001cc6:	4770      	bx	lr
