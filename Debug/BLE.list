
BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000184c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001958  08001958  00011958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001970  08001970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001970  08001970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001970  08001970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001970  08001970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800197c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08001988  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08001988  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007277  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd8  00000000  00000000  000272ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00028e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  00029588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e01  00000000  00000000  00029be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000804b  00000000  00000000  000419e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e9ff  00000000  00000000  00049a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c842b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a68  00000000  00000000  000c8480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001940 	.word	0x08001940

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001940 	.word	0x08001940

0800014c <_ZN3BLEC1Ev>:
#include"BLE.hpp"

BLE::BLE(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	4618      	mov	r0, r3
 8000158:	f000 fa3d 	bl	80005d6 <_ZN4UartC1Ev>
    uartBaudRate(9600);
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000162:	4618      	mov	r0, r3
 8000164:	f000 fa56 	bl	8000614 <_ZN4Uart12uartBaudRateEt>
    uartPeripheral(2);
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2102      	movs	r1, #2
 800016c:	4618      	mov	r0, r3
 800016e:	f000 fa61 	bl	8000634 <_ZN4Uart14uartPeripheralEh>
    uartInit();
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	4618      	mov	r0, r3
 8000176:	f000 fab6 	bl	80006e6 <_ZN4Uart8uartInitEv>

}
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4618      	mov	r0, r3
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <_ZN3BLE11receiveByteEv>:

uint8_t * BLE::receiveByte(){
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
    return byteData;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
	...

0800019c <_ZN3LedC1Ev>:
#include"LED.hpp"
#include "stm32f1xx_hal.h"

Led::Led(){
 800019c:	b580      	push	{r7, lr}
 800019e:	b088      	sub	sp, #32
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a4:	f107 0310 	add.w	r3, r7, #16
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b2:	4b12      	ldr	r3, [pc, #72]	; (80001fc <_ZN3LedC1Ev+0x60>)
 80001b4:	699b      	ldr	r3, [r3, #24]
 80001b6:	4a11      	ldr	r2, [pc, #68]	; (80001fc <_ZN3LedC1Ev+0x60>)
 80001b8:	f043 0308 	orr.w	r3, r3, #8
 80001bc:	6193      	str	r3, [r2, #24]
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <_ZN3LedC1Ev+0x60>)
 80001c0:	699b      	ldr	r3, [r3, #24]
 80001c2:	f003 0308 	and.w	r3, r3, #8
 80001c6:	60fb      	str	r3, [r7, #12]
 80001c8:	68fb      	ldr	r3, [r7, #12]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2101      	movs	r1, #1
 80001ce:	480c      	ldr	r0, [pc, #48]	; (8000200 <_ZN3LedC1Ev+0x64>)
 80001d0:	f000 fe44 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001d4:	2301      	movs	r3, #1
 80001d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001d8:	2301      	movs	r3, #1
 80001da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001dc:	2300      	movs	r3, #0
 80001de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e0:	2302      	movs	r3, #2
 80001e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e4:	f107 0310 	add.w	r3, r7, #16
 80001e8:	4619      	mov	r1, r3
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <_ZN3LedC1Ev+0x64>)
 80001ec:	f000 fcb2 	bl	8000b54 <HAL_GPIO_Init>
}
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4618      	mov	r0, r3
 80001f4:	3720      	adds	r7, #32
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000
 8000200:	40010c00 	.word	0x40010c00

08000204 <_ZN3Led6led_onEv>:
void Led::led_on(){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState)1);
 800020c:	2201      	movs	r2, #1
 800020e:	2101      	movs	r1, #1
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <_ZN3Led6led_onEv+0x1c>)
 8000212:	f000 fe23 	bl	8000e5c <HAL_GPIO_WritePin>

}
 8000216:	bf00      	nop
 8000218:	3708      	adds	r7, #8
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	40010c00 	.word	0x40010c00

08000224 <_ZN3Led7led_offEv>:
void Led::led_off(){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,(GPIO_PinState) 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2101      	movs	r1, #1
 8000230:	4803      	ldr	r0, [pc, #12]	; (8000240 <_ZN3Led7led_offEv+0x1c>)
 8000232:	f000 fe13 	bl	8000e5c <HAL_GPIO_WritePin>
 8000236:	bf00      	nop
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40010c00 	.word	0x40010c00

08000244 <main>:

#define BUFFER_LEN 1
uint8_t RX_BUFFER[BUFFER_LEN] = {0};
BLE ble;
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

  HAL_Init();
 800024a:	f000 fa63 	bl	8000714 <HAL_Init>

  HAL_RCC_DeInit();
 800024e:	f000 fe1d 	bl	8000e8c <HAL_RCC_DeInit>
  SystemCoreClockUpdate();
 8000252:	f000 f929 	bl	80004a8 <SystemCoreClockUpdate>

  Led led;
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ff9f 	bl	800019c <_ZN3LedC1Ev>


    while (1)
    {
        if(*ble.receiveByte() == 'S')
 800025e:	4811      	ldr	r0, [pc, #68]	; (80002a4 <main+0x60>)
 8000260:	f7ff ff90 	bl	8000184 <_ZN3BLE11receiveByteEv>
 8000264:	4603      	mov	r3, r0
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	2b53      	cmp	r3, #83	; 0x53
 800026a:	bf0c      	ite	eq
 800026c:	2301      	moveq	r3, #1
 800026e:	2300      	movne	r3, #0
 8000270:	b2db      	uxtb	r3, r3
 8000272:	2b00      	cmp	r3, #0
 8000274:	d004      	beq.n	8000280 <main+0x3c>
        {
        	led.led_on();
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f7ff ffc3 	bl	8000204 <_ZN3Led6led_onEv>
 800027e:	e7ee      	b.n	800025e <main+0x1a>

        }
        else if(*ble.receiveByte()  == 'F')
 8000280:	4808      	ldr	r0, [pc, #32]	; (80002a4 <main+0x60>)
 8000282:	f7ff ff7f 	bl	8000184 <_ZN3BLE11receiveByteEv>
 8000286:	4603      	mov	r3, r0
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b46      	cmp	r3, #70	; 0x46
 800028c:	bf0c      	ite	eq
 800028e:	2301      	moveq	r3, #1
 8000290:	2300      	movne	r3, #0
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0e2      	beq.n	800025e <main+0x1a>
        {
            led.led_off();
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ffc2 	bl	8000224 <_ZN3Led7led_offEv>
        if(*ble.receiveByte() == 'S')
 80002a0:	e7dd      	b.n	800025e <main+0x1a>
 80002a2:	bf00      	nop
 80002a4:	2000006c 	.word	0x2000006c

080002a8 <HAL_UART_RxCpltCallback>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b095      	sub	sp, #84	; 0x54
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
    if(huart->Instance == ble.getUartHandler().Instance)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681c      	ldr	r4, [r3, #0]
 80002b4:	f107 030c 	add.w	r3, r7, #12
 80002b8:	490c      	ldr	r1, [pc, #48]	; (80002ec <HAL_UART_RxCpltCallback+0x44>)
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fa02 	bl	80006c4 <_ZN4Uart14getUartHandlerEv>
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	429c      	cmp	r4, r3
 80002c4:	bf0c      	ite	eq
 80002c6:	2301      	moveq	r3, #1
 80002c8:	2300      	movne	r3, #0
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d008      	beq.n	80002e2 <HAL_UART_RxCpltCallback+0x3a>
    {
    HAL_UART_Receive_IT(&huart2, ble.receiveByte(), 1);
 80002d0:	4806      	ldr	r0, [pc, #24]	; (80002ec <HAL_UART_RxCpltCallback+0x44>)
 80002d2:	f7ff ff57 	bl	8000184 <_ZN3BLE11receiveByteEv>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2201      	movs	r2, #1
 80002da:	4619      	mov	r1, r3
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <HAL_UART_RxCpltCallback+0x48>)
 80002de:	f000 feee 	bl	80010be <HAL_UART_Receive_IT>
    }
}
 80002e2:	bf00      	nop
 80002e4:	3754      	adds	r7, #84	; 0x54
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd90      	pop	{r4, r7, pc}
 80002ea:	bf00      	nop
 80002ec:	2000006c 	.word	0x2000006c
 80002f0:	20000028 	.word	0x20000028

080002f4 <_Z41__static_initialization_and_destruction_0ii>:
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d107      	bne.n	8000314 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800030a:	4293      	cmp	r3, r2
 800030c:	d102      	bne.n	8000314 <_Z41__static_initialization_and_destruction_0ii+0x20>
BLE ble;
 800030e:	4803      	ldr	r0, [pc, #12]	; (800031c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000310:	f7ff ff1c 	bl	800014c <_ZN3BLEC1Ev>
}
 8000314:	bf00      	nop
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	2000006c 	.word	0x2000006c

08000320 <_GLOBAL__sub_I_huart2>:
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
 8000324:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000328:	2001      	movs	r0, #1
 800032a:	f7ff ffe3 	bl	80002f4 <_Z41__static_initialization_and_destruction_0ii>
 800032e:	bd80      	pop	{r7, pc}

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b085      	sub	sp, #20
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <HAL_MspInit+0x5c>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a14      	ldr	r2, [pc, #80]	; (800038c <HAL_MspInit+0x5c>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <HAL_MspInit+0x5c>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a0e      	ldr	r2, [pc, #56]	; (800038c <HAL_MspInit+0x5c>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	607b      	str	r3, [r7, #4]
 8000364:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <HAL_MspInit+0x60>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <HAL_MspInit+0x60>)
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000382:	bf00      	nop
 8000384:	3714      	adds	r7, #20
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40021000 	.word	0x40021000
 8000390:	40010000 	.word	0x40010000

08000394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a1f      	ldr	r2, [pc, #124]	; (800042c <HAL_UART_MspInit+0x98>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d137      	bne.n	8000424 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003b4:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <HAL_UART_MspInit+0x9c>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	4a1d      	ldr	r2, [pc, #116]	; (8000430 <HAL_UART_MspInit+0x9c>)
 80003ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003be:	61d3      	str	r3, [r2, #28]
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <HAL_UART_MspInit+0x9c>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <HAL_UART_MspInit+0x9c>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a17      	ldr	r2, [pc, #92]	; (8000430 <HAL_UART_MspInit+0x9c>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <HAL_UART_MspInit+0x9c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003e4:	2304      	movs	r3, #4
 80003e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e8:	2302      	movs	r3, #2
 80003ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003ec:	2303      	movs	r3, #3
 80003ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	480f      	ldr	r0, [pc, #60]	; (8000434 <HAL_UART_MspInit+0xa0>)
 80003f8:	f000 fbac 	bl	8000b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003fc:	2308      	movs	r3, #8
 80003fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	4619      	mov	r1, r3
 800040e:	4809      	ldr	r0, [pc, #36]	; (8000434 <HAL_UART_MspInit+0xa0>)
 8000410:	f000 fba0 	bl	8000b54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2100      	movs	r1, #0
 8000418:	2026      	movs	r0, #38	; 0x26
 800041a:	f000 fab4 	bl	8000986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800041e:	2026      	movs	r0, #38	; 0x26
 8000420:	f000 facd 	bl	80009be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40004400 	.word	0x40004400
 8000430:	40021000 	.word	0x40021000
 8000434:	40010800 	.word	0x40010800

08000438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800043c:	e7fe      	b.n	800043c <NMI_Handler+0x4>

0800043e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000442:	e7fe      	b.n	8000442 <HardFault_Handler+0x4>

08000444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <MemManage_Handler+0x4>

0800044a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <BusFault_Handler+0x4>

08000450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <UsageFault_Handler+0x4>

08000456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800047e:	f000 f98f 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <USART2_IRQHandler+0x10>)
 800048e:	f000 fe47 	bl	8001120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000028 	.word	0x20000028

0800049c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
 80004b6:	2300      	movs	r3, #0
 80004b8:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004ba:	4b2f      	ldr	r3, [pc, #188]	; (8000578 <SystemCoreClockUpdate+0xd0>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	f003 030c 	and.w	r3, r3, #12
 80004c2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2b08      	cmp	r3, #8
 80004c8:	d011      	beq.n	80004ee <SystemCoreClockUpdate+0x46>
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	2b08      	cmp	r3, #8
 80004ce:	d83a      	bhi.n	8000546 <SystemCoreClockUpdate+0x9e>
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d003      	beq.n	80004de <SystemCoreClockUpdate+0x36>
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2b04      	cmp	r3, #4
 80004da:	d004      	beq.n	80004e6 <SystemCoreClockUpdate+0x3e>
 80004dc:	e033      	b.n	8000546 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80004de:	4b27      	ldr	r3, [pc, #156]	; (800057c <SystemCoreClockUpdate+0xd4>)
 80004e0:	4a27      	ldr	r2, [pc, #156]	; (8000580 <SystemCoreClockUpdate+0xd8>)
 80004e2:	601a      	str	r2, [r3, #0]
      break;
 80004e4:	e033      	b.n	800054e <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80004e6:	4b25      	ldr	r3, [pc, #148]	; (800057c <SystemCoreClockUpdate+0xd4>)
 80004e8:	4a25      	ldr	r2, [pc, #148]	; (8000580 <SystemCoreClockUpdate+0xd8>)
 80004ea:	601a      	str	r2, [r3, #0]
      break;
 80004ec:	e02f      	b.n	800054e <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80004ee:	4b22      	ldr	r3, [pc, #136]	; (8000578 <SystemCoreClockUpdate+0xd0>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004f6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <SystemCoreClockUpdate+0xd0>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000500:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	0c9b      	lsrs	r3, r3, #18
 8000506:	3302      	adds	r3, #2
 8000508:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d106      	bne.n	800051e <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	4a1c      	ldr	r2, [pc, #112]	; (8000584 <SystemCoreClockUpdate+0xdc>)
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	4a18      	ldr	r2, [pc, #96]	; (800057c <SystemCoreClockUpdate+0xd4>)
 800051a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 800051c:	e017      	b.n	800054e <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <SystemCoreClockUpdate+0xd0>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d006      	beq.n	8000538 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	4a15      	ldr	r2, [pc, #84]	; (8000584 <SystemCoreClockUpdate+0xdc>)
 800052e:	fb02 f303 	mul.w	r3, r2, r3
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <SystemCoreClockUpdate+0xd4>)
 8000534:	6013      	str	r3, [r2, #0]
      break;
 8000536:	e00a      	b.n	800054e <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <SystemCoreClockUpdate+0xd8>)
 800053c:	fb02 f303 	mul.w	r3, r2, r3
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <SystemCoreClockUpdate+0xd4>)
 8000542:	6013      	str	r3, [r2, #0]
      break;
 8000544:	e003      	b.n	800054e <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <SystemCoreClockUpdate+0xd4>)
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <SystemCoreClockUpdate+0xd8>)
 800054a:	601a      	str	r2, [r3, #0]
      break;
 800054c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <SystemCoreClockUpdate+0xd0>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	091b      	lsrs	r3, r3, #4
 8000554:	f003 030f 	and.w	r3, r3, #15
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <SystemCoreClockUpdate+0xe0>)
 800055a:	5cd3      	ldrb	r3, [r2, r3]
 800055c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <SystemCoreClockUpdate+0xd4>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	fa22 f303 	lsr.w	r3, r2, r3
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <SystemCoreClockUpdate+0xd4>)
 800056a:	6013      	str	r3, [r2, #0]
}
 800056c:	bf00      	nop
 800056e:	3714      	adds	r7, #20
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	20000000 	.word	0x20000000
 8000580:	007a1200 	.word	0x007a1200
 8000584:	003d0900 	.word	0x003d0900
 8000588:	08001958 	.word	0x08001958

0800058c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005b2:	f7ff ff73 	bl	800049c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b6:	f001 f991 	bl	80018dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fe43 	bl	8000244 <main>
  bx lr
 80005be:	4770      	bx	lr
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c8:	0800197c 	.word	0x0800197c
  ldr r2, =_sbss
 80005cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d0:	200000b8 	.word	0x200000b8

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>

080005d6 <_ZN4UartC1Ev>:
#include"Uartcpp.hpp"

Uart::Uart(){
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
    huart.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fd0d 	bl	8001024 <HAL_UART_Init>
}
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4618      	mov	r0, r3
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <_ZN4Uart12uartBaudRateEt>:

void Uart::uartBaudRate(uint16_t rate_HZ){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
    huart.Init.BaudRate = 9600;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000626:	605a      	str	r2, [r3, #4]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
	...

08000634 <_ZN4Uart14uartPeripheralEh>:
void Uart::uartPeripheral(uint8_t peripheral_num){
 8000634:	b480      	push	{r7}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
    switch (peripheral_num)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b31      	cmp	r3, #49	; 0x31
 8000644:	d002      	beq.n	800064c <_ZN4Uart14uartPeripheralEh+0x18>
 8000646:	2b32      	cmp	r3, #50	; 0x32
 8000648:	d010      	beq.n	800066c <_ZN4Uart14uartPeripheralEh+0x38>
 800064a:	e01e      	b.n	800068a <_ZN4Uart14uartPeripheralEh+0x56>
    {
    case '1':
        huart.Instance = USART1;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a19      	ldr	r2, [pc, #100]	; (80006b4 <_ZN4Uart14uartPeripheralEh+0x80>)
 8000650:	601a      	str	r2, [r3, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000658:	f043 0304 	orr.w	r3, r3, #4
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f003 0304 	and.w	r3, r3, #4
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
        break;
 800066a:	e01e      	b.n	80006aa <_ZN4Uart14uartPeripheralEh+0x76>
    case '2':
        huart.Instance = USART2;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a13      	ldr	r2, [pc, #76]	; (80006bc <_ZN4Uart14uartPeripheralEh+0x88>)
 8000670:	601a      	str	r2, [r3, #0]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
    default:
        huart.Instance = USART3;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <_ZN4Uart14uartPeripheralEh+0x8c>)
 800068e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a08      	ldr	r2, [pc, #32]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <_ZN4Uart14uartPeripheralEh+0x84>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
        break;
 80006a8:	bf00      	nop
    }
    
}
 80006aa:	bf00      	nop
 80006ac:	371c      	adds	r7, #28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40013800 	.word	0x40013800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40004400 	.word	0x40004400
 80006c0:	40004800 	.word	0x40004800

080006c4 <_ZN4Uart14getUartHandlerEv>:
UART_HandleTypeDef Uart::getUartHandler(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
    return huart;
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	4610      	mov	r0, r2
 80006d4:	4619      	mov	r1, r3
 80006d6:	2344      	movs	r3, #68	; 0x44
 80006d8:	461a      	mov	r2, r3
 80006da:	f001 f923 	bl	8001924 <memcpy>
}
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_ZN4Uart8uartInitEv>:


uint8_t Uart::uartInit(){
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Init(&huart) != HAL_OK)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fc97 	bl	8001024 <HAL_UART_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf14      	ite	ne
 80006fc:	2301      	movne	r3, #1
 80006fe:	2300      	moveq	r3, #0
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <_ZN4Uart8uartInitEv+0x24>
        return 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <_ZN4Uart8uartInitEv+0x26>
    return 1;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f923 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff fdfe 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f93b 	bl	80009da <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800077c:	f000 f903 	bl	8000986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x20>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000008 	.word	0x20000008
 80007c0:	200000b4 	.word	0x200000b4

080007c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	200000b4 	.word	0x200000b4

080007d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007f4:	4013      	ands	r3, r2
 80007f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <__NVIC_SetPriorityGrouping+0x44>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_GetPriorityGrouping+0x18>)
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	f003 0307 	and.w	r3, r3, #7
}
 800082e:	4618      	mov	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	db0b      	blt.n	8000866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 021f 	and.w	r2, r3, #31
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <__NVIC_EnableIRQ+0x34>)
 8000856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085a:	095b      	lsrs	r3, r3, #5
 800085c:	2001      	movs	r0, #1
 800085e:	fa00 f202 	lsl.w	r2, r0, r2
 8000862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	e000e100 	.word	0xe000e100

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800093c:	d301      	bcc.n	8000942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093e:	2301      	movs	r3, #1
 8000940:	e00f      	b.n	8000962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <SysTick_Config+0x40>)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094a:	210f      	movs	r1, #15
 800094c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000950:	f7ff ff90 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <SysTick_Config+0x40>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095a:	4b04      	ldr	r3, [pc, #16]	; (800096c <SysTick_Config+0x40>)
 800095c:	2207      	movs	r2, #7
 800095e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	e000e010 	.word	0xe000e010

08000970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ff2d 	bl	80007d8 <__NVIC_SetPriorityGrouping>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000986:	b580      	push	{r7, lr}
 8000988:	b086      	sub	sp, #24
 800098a:	af00      	add	r7, sp, #0
 800098c:	4603      	mov	r3, r0
 800098e:	60b9      	str	r1, [r7, #8]
 8000990:	607a      	str	r2, [r7, #4]
 8000992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff42 	bl	8000820 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff35 	bl	800083c <__NVIC_EnableIRQ>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffa2 	bl	800092c <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b085      	sub	sp, #20
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d008      	beq.n	8000a1a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e020      	b.n	8000a5c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 020e 	bic.w	r2, r2, #14
 8000a28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f022 0201 	bic.w	r2, r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a42:	2101      	movs	r1, #1
 8000a44:	fa01 f202 	lsl.w	r2, r1, r2
 8000a48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
	...

08000a68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d005      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2204      	movs	r2, #4
 8000a82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e051      	b.n	8000b2e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 020e 	bic.w	r2, r2, #14
 8000a98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f022 0201 	bic.w	r2, r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <HAL_DMA_Abort_IT+0xd0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d029      	beq.n	8000b08 <HAL_DMA_Abort_IT+0xa0>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <HAL_DMA_Abort_IT+0xd4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d022      	beq.n	8000b04 <HAL_DMA_Abort_IT+0x9c>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1f      	ldr	r2, [pc, #124]	; (8000b40 <HAL_DMA_Abort_IT+0xd8>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d01a      	beq.n	8000afe <HAL_DMA_Abort_IT+0x96>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <HAL_DMA_Abort_IT+0xdc>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d012      	beq.n	8000af8 <HAL_DMA_Abort_IT+0x90>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <HAL_DMA_Abort_IT+0xe0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d00a      	beq.n	8000af2 <HAL_DMA_Abort_IT+0x8a>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <HAL_DMA_Abort_IT+0xe4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d102      	bne.n	8000aec <HAL_DMA_Abort_IT+0x84>
 8000ae6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aea:	e00e      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000af0:	e00b      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af6:	e008      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	e005      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	e002      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000b04:	2310      	movs	r3, #16
 8000b06:	e000      	b.n	8000b0a <HAL_DMA_Abort_IT+0xa2>
 8000b08:	2301      	movs	r3, #1
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_DMA_Abort_IT+0xe8>)
 8000b0c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2201      	movs	r2, #1
 8000b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	4798      	blx	r3
    } 
  }
  return status;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40020008 	.word	0x40020008
 8000b3c:	4002001c 	.word	0x4002001c
 8000b40:	40020030 	.word	0x40020030
 8000b44:	40020044 	.word	0x40020044
 8000b48:	40020058 	.word	0x40020058
 8000b4c:	4002006c 	.word	0x4002006c
 8000b50:	40020000 	.word	0x40020000

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b08b      	sub	sp, #44	; 0x2c
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b66:	e169      	b.n	8000e3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	f040 8158 	bne.w	8000e36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	4a9a      	ldr	r2, [pc, #616]	; (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d05e      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b90:	4a98      	ldr	r2, [pc, #608]	; (8000df4 <HAL_GPIO_Init+0x2a0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d875      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000b96:	4a98      	ldr	r2, [pc, #608]	; (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d058      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000b9c:	4a96      	ldr	r2, [pc, #600]	; (8000df8 <HAL_GPIO_Init+0x2a4>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d86f      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000ba2:	4a96      	ldr	r2, [pc, #600]	; (8000dfc <HAL_GPIO_Init+0x2a8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d052      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000ba8:	4a94      	ldr	r2, [pc, #592]	; (8000dfc <HAL_GPIO_Init+0x2a8>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d869      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bae:	4a94      	ldr	r2, [pc, #592]	; (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d04c      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bb4:	4a92      	ldr	r2, [pc, #584]	; (8000e00 <HAL_GPIO_Init+0x2ac>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d863      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bba:	4a92      	ldr	r2, [pc, #584]	; (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d046      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
 8000bc0:	4a90      	ldr	r2, [pc, #576]	; (8000e04 <HAL_GPIO_Init+0x2b0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d85d      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d82a      	bhi.n	8000c20 <HAL_GPIO_Init+0xcc>
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	d859      	bhi.n	8000c82 <HAL_GPIO_Init+0x12e>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <HAL_GPIO_Init+0x80>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000c4f 	.word	0x08000c4f
 8000bd8:	08000c29 	.word	0x08000c29
 8000bdc:	08000c3b 	.word	0x08000c3b
 8000be0:	08000c7d 	.word	0x08000c7d
 8000be4:	08000c83 	.word	0x08000c83
 8000be8:	08000c83 	.word	0x08000c83
 8000bec:	08000c83 	.word	0x08000c83
 8000bf0:	08000c83 	.word	0x08000c83
 8000bf4:	08000c83 	.word	0x08000c83
 8000bf8:	08000c83 	.word	0x08000c83
 8000bfc:	08000c83 	.word	0x08000c83
 8000c00:	08000c83 	.word	0x08000c83
 8000c04:	08000c83 	.word	0x08000c83
 8000c08:	08000c83 	.word	0x08000c83
 8000c0c:	08000c83 	.word	0x08000c83
 8000c10:	08000c83 	.word	0x08000c83
 8000c14:	08000c83 	.word	0x08000c83
 8000c18:	08000c31 	.word	0x08000c31
 8000c1c:	08000c45 	.word	0x08000c45
 8000c20:	4a79      	ldr	r2, [pc, #484]	; (8000e08 <HAL_GPIO_Init+0x2b4>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d013      	beq.n	8000c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c26:	e02c      	b.n	8000c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e029      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	3304      	adds	r3, #4
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e024      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	3308      	adds	r3, #8
 8000c40:	623b      	str	r3, [r7, #32]
          break;
 8000c42:	e01f      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	330c      	adds	r3, #12
 8000c4a:	623b      	str	r3, [r7, #32]
          break;
 8000c4c:	e01a      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c56:	2304      	movs	r3, #4
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e013      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d105      	bne.n	8000c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	611a      	str	r2, [r3, #16]
          break;
 8000c6e:	e009      	b.n	8000c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c70:	2308      	movs	r3, #8
 8000c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69fa      	ldr	r2, [r7, #28]
 8000c78:	615a      	str	r2, [r3, #20]
          break;
 8000c7a:	e003      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
          break;
 8000c80:	e000      	b.n	8000c84 <HAL_GPIO_Init+0x130>
          break;
 8000c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2bff      	cmp	r3, #255	; 0xff
 8000c88:	d801      	bhi.n	8000c8e <HAL_GPIO_Init+0x13a>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	e001      	b.n	8000c92 <HAL_GPIO_Init+0x13e>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3304      	adds	r3, #4
 8000c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2bff      	cmp	r3, #255	; 0xff
 8000c98:	d802      	bhi.n	8000ca0 <HAL_GPIO_Init+0x14c>
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	e002      	b.n	8000ca6 <HAL_GPIO_Init+0x152>
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	3b08      	subs	r3, #8
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	210f      	movs	r1, #15
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	6a39      	ldr	r1, [r7, #32]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80b1 	beq.w	8000e36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a4c      	ldr	r2, [pc, #304]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <HAL_GPIO_Init+0x2b8>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cec:	4a48      	ldr	r2, [pc, #288]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a40      	ldr	r2, [pc, #256]	; (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d013      	beq.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a3f      	ldr	r2, [pc, #252]	; (8000e18 <HAL_GPIO_Init+0x2c4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d00d      	beq.n	8000d3c <HAL_GPIO_Init+0x1e8>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a3e      	ldr	r2, [pc, #248]	; (8000e1c <HAL_GPIO_Init+0x2c8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x1e4>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a3d      	ldr	r2, [pc, #244]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_GPIO_Init+0x1e0>
 8000d30:	2303      	movs	r3, #3
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e004      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d40:	2300      	movs	r3, #0
 8000d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d52:	492f      	ldr	r1, [pc, #188]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	492c      	ldr	r1, [pc, #176]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4928      	ldr	r1, [pc, #160]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4922      	ldr	r1, [pc, #136]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	604b      	str	r3, [r1, #4]
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	491e      	ldr	r1, [pc, #120]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d006      	beq.n	8000dca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	4918      	ldr	r1, [pc, #96]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	4914      	ldr	r1, [pc, #80]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d021      	beq.n	8000e28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	490e      	ldr	r1, [pc, #56]	; (8000e24 <HAL_GPIO_Init+0x2d0>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60cb      	str	r3, [r1, #12]
 8000df0:	e021      	b.n	8000e36 <HAL_GPIO_Init+0x2e2>
 8000df2:	bf00      	nop
 8000df4:	10320000 	.word	0x10320000
 8000df8:	10310000 	.word	0x10310000
 8000dfc:	10220000 	.word	0x10220000
 8000e00:	10210000 	.word	0x10210000
 8000e04:	10120000 	.word	0x10120000
 8000e08:	10110000 	.word	0x10110000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000
 8000e14:	40010800 	.word	0x40010800
 8000e18:	40010c00 	.word	0x40010c00
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	40011400 	.word	0x40011400
 8000e24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_GPIO_Init+0x304>)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	4909      	ldr	r1, [pc, #36]	; (8000e58 <HAL_GPIO_Init+0x304>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3301      	adds	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f47f ae8e 	bne.w	8000b68 <HAL_GPIO_Init+0x14>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	372c      	adds	r7, #44	; 0x2c
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e78:	e003      	b.n	8000e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	611a      	str	r2, [r3, #16]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000e92:	f7ff fc97 	bl	80007c4 <HAL_GetTick>
 8000e96:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a44      	ldr	r2, [pc, #272]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000ea4:	e008      	b.n	8000eb8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea6:	f7ff fc8d 	bl	80007c4 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e077      	b.n	8000fa8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000eb8:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f0      	beq.n	8000ea6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000ec4:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ecc:	4a38      	ldr	r2, [pc, #224]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000ed4:	f7ff fc76 	bl	80007c4 <HAL_GetTick>
 8000ed8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000ee0:	e00a      	b.n	8000ef8 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ee2:	f7ff fc6f 	bl	80007c4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e057      	b.n	8000fa8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1ee      	bne.n	8000ee2 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_RCC_DeInit+0x128>)
 8000f06:	4a2c      	ldr	r2, [pc, #176]	; (8000fb8 <HAL_RCC_DeInit+0x12c>)
 8000f08:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f0a:	4b2c      	ldr	r3, [pc, #176]	; (8000fbc <HAL_RCC_DeInit+0x130>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fc16 	bl	8000740 <HAL_InitTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e044      	b.n	8000fa8 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f1e:	f7ff fc51 	bl	80007c4 <HAL_GetTick>
 8000f22:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f30:	e008      	b.n	8000f44 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f32:	f7ff fc47 	bl	80007c4 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d901      	bls.n	8000f44 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e031      	b.n	8000fa8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f0      	bne.n	8000f32 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f56:	f7ff fc35 	bl	80007c4 <HAL_GetTick>
 8000f5a:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f62:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f66:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fc2b 	bl	80007c4 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b64      	cmp	r3, #100	; 0x64
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e015      	b.n	8000fa8 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_RCC_DeInit+0x124>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	007a1200 	.word	0x007a1200
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fd8:	f7ff fff2 	bl	8000fc0 <HAL_RCC_GetHCLKFreq>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	4903      	ldr	r1, [pc, #12]	; (8000ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fea:	5ccb      	ldrb	r3, [r1, r3]
 8000fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	08001968 	.word	0x08001968

08000ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_RCC_GetHCLKFreq>
 8001004:	4602      	mov	r2, r0
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	0adb      	lsrs	r3, r3, #11
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	4903      	ldr	r1, [pc, #12]	; (8001020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001012:	5ccb      	ldrb	r3, [r1, r3]
 8001014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001018:	4618      	mov	r0, r3
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40021000 	.word	0x40021000
 8001020:	08001968 	.word	0x08001968

08001024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e03f      	b.n	80010b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f9a2 	bl	8000394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2224      	movs	r2, #36	; 0x24
 8001054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 fba9 	bl	80017c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800107c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800108c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800109c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2220      	movs	r2, #32
 80010b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b20      	cmp	r3, #32
 80010d6:	d11d      	bne.n	8001114 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <HAL_UART_Receive_IT+0x26>
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e016      	b.n	8001116 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_UART_Receive_IT+0x38>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e00f      	b.n	8001116 <HAL_UART_Receive_IT+0x58>
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	461a      	mov	r2, r3
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 f9cf 	bl	80014ae <UART_Start_Receive_IT>
 8001110:	4603      	mov	r3, r0
 8001112:	e000      	b.n	8001116 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001114:	2302      	movs	r3, #2
  }
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10d      	bne.n	8001172 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	f003 0320 	and.w	r3, r3, #32
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_UART_IRQHandler+0x52>
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fa7f 	bl	800166e <UART_Receive_IT>
      return;
 8001170:	e17b      	b.n	800146a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80b1 	beq.w	80012dc <HAL_UART_IRQHandler+0x1bc>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <HAL_UART_IRQHandler+0x70>
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80a6 	beq.w	80012dc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00a      	beq.n	80011b0 <HAL_UART_IRQHandler+0x90>
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00a      	beq.n	80011d0 <HAL_UART_IRQHandler+0xb0>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f043 0202 	orr.w	r2, r3, #2
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <HAL_UART_IRQHandler+0xd0>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f043 0204 	orr.w	r2, r3, #4
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00f      	beq.n	800121a <HAL_UART_IRQHandler+0xfa>
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	f003 0320 	and.w	r3, r3, #32
 8001200:	2b00      	cmp	r3, #0
 8001202:	d104      	bne.n	800120e <HAL_UART_IRQHandler+0xee>
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f043 0208 	orr.w	r2, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 811e 	beq.w	8001460 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d007      	beq.n	800123e <HAL_UART_IRQHandler+0x11e>
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	f003 0320 	and.w	r3, r3, #32
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fa18 	bl	800166e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <HAL_UART_IRQHandler+0x146>
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d031      	beq.n	80012ca <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 f95a 	bl	8001520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001276:	2b00      	cmp	r3, #0
 8001278:	d023      	beq.n	80012c2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001288:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	2b00      	cmp	r3, #0
 8001290:	d013      	beq.n	80012ba <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001296:	4a76      	ldr	r2, [pc, #472]	; (8001470 <HAL_UART_IRQHandler+0x350>)
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fbe2 	bl	8000a68 <HAL_DMA_Abort_IT>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d016      	beq.n	80012d8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012b4:	4610      	mov	r0, r2
 80012b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012b8:	e00e      	b.n	80012d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f8e3 	bl	8001486 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012c0:	e00a      	b.n	80012d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f8df 	bl	8001486 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012c8:	e006      	b.n	80012d8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f8db 	bl	8001486 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80012d6:	e0c3      	b.n	8001460 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012d8:	bf00      	nop
    return;
 80012da:	e0c1      	b.n	8001460 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	f040 80a1 	bne.w	8001428 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 809b 	beq.w	8001428 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8095 	beq.w	8001428 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d04e      	beq.n	80013c0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800132c:	8a3b      	ldrh	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8098 	beq.w	8001464 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001338:	8a3a      	ldrh	r2, [r7, #16]
 800133a:	429a      	cmp	r2, r3
 800133c:	f080 8092 	bcs.w	8001464 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8a3a      	ldrh	r2, [r7, #16]
 8001344:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b20      	cmp	r3, #32
 800134e:	d02b      	beq.n	80013a8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695a      	ldr	r2, [r3, #20]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800137e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2220      	movs	r2, #32
 8001384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0210 	bic.w	r2, r2, #16
 800139c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fb25 	bl	80009f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 f86d 	bl	8001498 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80013be:	e051      	b.n	8001464 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d047      	beq.n	8001468 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80013d8:	8a7b      	ldrh	r3, [r7, #18]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d044      	beq.n	8001468 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013ec:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2220      	movs	r2, #32
 8001402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 0210 	bic.w	r2, r2, #16
 800141a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800141c:	8a7b      	ldrh	r3, [r7, #18]
 800141e:	4619      	mov	r1, r3
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f839 	bl	8001498 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001426:	e01f      	b.n	8001468 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <HAL_UART_IRQHandler+0x324>
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f8af 	bl	80015a0 <UART_Transmit_IT>
    return;
 8001442:	e012      	b.n	800146a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00d      	beq.n	800146a <HAL_UART_IRQHandler+0x34a>
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f8f0 	bl	800163e <UART_EndTransmit_IT>
    return;
 800145e:	e004      	b.n	800146a <HAL_UART_IRQHandler+0x34a>
    return;
 8001460:	bf00      	nop
 8001462:	e002      	b.n	800146a <HAL_UART_IRQHandler+0x34a>
      return;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <HAL_UART_IRQHandler+0x34a>
      return;
 8001468:	bf00      	nop
  }
}
 800146a:	3728      	adds	r7, #40	; 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	08001579 	.word	0x08001579

08001474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	4613      	mov	r3, r2
 80014ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	88fa      	ldrh	r2, [r7, #6]
 80014c6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2222      	movs	r2, #34	; 0x22
 80014d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0220 	orr.w	r2, r2, #32
 8001512:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001536:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695a      	ldr	r2, [r3, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0201 	bic.w	r2, r2, #1
 8001546:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	2b01      	cmp	r3, #1
 800154e:	d107      	bne.n	8001560 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0210 	bic.w	r2, r2, #16
 800155e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff ff77 	bl	8001486 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b21      	cmp	r3, #33	; 0x21
 80015b2:	d13e      	bne.n	8001632 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015bc:	d114      	bne.n	80015e8 <UART_Transmit_IT+0x48>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d110      	bne.n	80015e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	1c9a      	adds	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	621a      	str	r2, [r3, #32]
 80015e6:	e008      	b.n	80015fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	1c59      	adds	r1, r3, #1
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6211      	str	r1, [r2, #32]
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29b      	uxth	r3, r3
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4619      	mov	r1, r3
 8001608:	84d1      	strh	r1, [r2, #38]	; 0x26
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10f      	bne.n	800162e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800161c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800162c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001632:	2302      	movs	r3, #2
  }
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001654:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2220      	movs	r2, #32
 800165a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff ff08 	bl	8001474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b22      	cmp	r3, #34	; 0x22
 8001680:	f040 8099 	bne.w	80017b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800168c:	d117      	bne.n	80016be <UART_Receive_IT+0x50>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d113      	bne.n	80016be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b6:	1c9a      	adds	r2, r3, #2
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
 80016bc:	e026      	b.n	800170c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	d007      	beq.n	80016e2 <UART_Receive_IT+0x74>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <UART_Receive_IT+0x82>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d106      	bne.n	80016f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e008      	b.n	8001702 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4619      	mov	r1, r3
 800171a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800171c:	2b00      	cmp	r3, #0
 800171e:	d148      	bne.n	80017b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68da      	ldr	r2, [r3, #12]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0220 	bic.w	r2, r2, #32
 800172e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800173e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	2b01      	cmp	r3, #1
 800175e:	d123      	bne.n	80017a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0210 	bic.w	r2, r2, #16
 8001774:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b10      	cmp	r3, #16
 8001782:	d10a      	bne.n	800179a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800179e:	4619      	mov	r1, r3
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fe79 	bl	8001498 <HAL_UARTEx_RxEventCallback>
 80017a6:	e002      	b.n	80017ae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7fe fd7d 	bl	80002a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e002      	b.n	80017b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80017b6:	2302      	movs	r3, #2
  }
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017fa:	f023 030c 	bic.w	r3, r3, #12
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	68b9      	ldr	r1, [r7, #8]
 8001804:	430b      	orrs	r3, r1
 8001806:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2c      	ldr	r2, [pc, #176]	; (80018d4 <UART_SetConfig+0x114>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d103      	bne.n	8001830 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001828:	f7ff fbe8 	bl	8000ffc <HAL_RCC_GetPCLK2Freq>
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	e002      	b.n	8001836 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001830:	f7ff fbd0 	bl	8000fd4 <HAL_RCC_GetPCLK1Freq>
 8001834:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	009a      	lsls	r2, r3, #2
 8001840:	441a      	add	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <UART_SetConfig+0x118>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	095b      	lsrs	r3, r3, #5
 8001854:	0119      	lsls	r1, r3, #4
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	009a      	lsls	r2, r3, #2
 8001860:	441a      	add	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	fbb2 f2f3 	udiv	r2, r2, r3
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <UART_SetConfig+0x118>)
 800186e:	fba3 0302 	umull	r0, r3, r3, r2
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2064      	movs	r0, #100	; 0x64
 8001876:	fb00 f303 	mul.w	r3, r0, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	3332      	adds	r3, #50	; 0x32
 8001880:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <UART_SetConfig+0x118>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188c:	4419      	add	r1, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	009a      	lsls	r2, r3, #2
 8001898:	441a      	add	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <UART_SetConfig+0x118>)
 80018a6:	fba3 0302 	umull	r0, r3, r3, r2
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2064      	movs	r0, #100	; 0x64
 80018ae:	fb00 f303 	mul.w	r3, r0, r3
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	3332      	adds	r3, #50	; 0x32
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <UART_SetConfig+0x118>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	f003 020f 	and.w	r2, r3, #15
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	440a      	add	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40013800 	.word	0x40013800
 80018d8:	51eb851f 	.word	0x51eb851f

080018dc <__libc_init_array>:
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	2600      	movs	r6, #0
 80018e0:	4d0c      	ldr	r5, [pc, #48]	; (8001914 <__libc_init_array+0x38>)
 80018e2:	4c0d      	ldr	r4, [pc, #52]	; (8001918 <__libc_init_array+0x3c>)
 80018e4:	1b64      	subs	r4, r4, r5
 80018e6:	10a4      	asrs	r4, r4, #2
 80018e8:	42a6      	cmp	r6, r4
 80018ea:	d109      	bne.n	8001900 <__libc_init_array+0x24>
 80018ec:	f000 f828 	bl	8001940 <_init>
 80018f0:	2600      	movs	r6, #0
 80018f2:	4d0a      	ldr	r5, [pc, #40]	; (800191c <__libc_init_array+0x40>)
 80018f4:	4c0a      	ldr	r4, [pc, #40]	; (8001920 <__libc_init_array+0x44>)
 80018f6:	1b64      	subs	r4, r4, r5
 80018f8:	10a4      	asrs	r4, r4, #2
 80018fa:	42a6      	cmp	r6, r4
 80018fc:	d105      	bne.n	800190a <__libc_init_array+0x2e>
 80018fe:	bd70      	pop	{r4, r5, r6, pc}
 8001900:	f855 3b04 	ldr.w	r3, [r5], #4
 8001904:	4798      	blx	r3
 8001906:	3601      	adds	r6, #1
 8001908:	e7ee      	b.n	80018e8 <__libc_init_array+0xc>
 800190a:	f855 3b04 	ldr.w	r3, [r5], #4
 800190e:	4798      	blx	r3
 8001910:	3601      	adds	r6, #1
 8001912:	e7f2      	b.n	80018fa <__libc_init_array+0x1e>
 8001914:	08001970 	.word	0x08001970
 8001918:	08001970 	.word	0x08001970
 800191c:	08001970 	.word	0x08001970
 8001920:	08001978 	.word	0x08001978

08001924 <memcpy>:
 8001924:	440a      	add	r2, r1
 8001926:	4291      	cmp	r1, r2
 8001928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800192c:	d100      	bne.n	8001930 <memcpy+0xc>
 800192e:	4770      	bx	lr
 8001930:	b510      	push	{r4, lr}
 8001932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001936:	4291      	cmp	r1, r2
 8001938:	f803 4f01 	strb.w	r4, [r3, #1]!
 800193c:	d1f9      	bne.n	8001932 <memcpy+0xe>
 800193e:	bd10      	pop	{r4, pc}

08001940 <_init>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	bf00      	nop
 8001944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001946:	bc08      	pop	{r3}
 8001948:	469e      	mov	lr, r3
 800194a:	4770      	bx	lr

0800194c <_fini>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	bf00      	nop
 8001950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001952:	bc08      	pop	{r3}
 8001954:	469e      	mov	lr, r3
 8001956:	4770      	bx	lr
