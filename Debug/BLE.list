
BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001814  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001938  08001938  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001938  08001938  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001938  08001938  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001938  08001938  00011938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001950  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001950  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b69  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b8  00000000  00000000  00026b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00028558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00028c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cdc  00000000  00000000  00029290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079c4  00000000  00000000  0002bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e9f0  00000000  00000000  00033930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b2320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a38  00000000  00000000  000b2374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001908 	.word	0x08001908

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001908 	.word	0x08001908

0800014c <_ZN3LedC1Ev>:
#include"LED.hpp"
#include "stm32f1xx_hal.h"

Led::Led(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000154:	f107 0310 	add.w	r3, r7, #16
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]
 8000160:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000162:	4b12      	ldr	r3, [pc, #72]	; (80001ac <_ZN3LedC1Ev+0x60>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	4a11      	ldr	r2, [pc, #68]	; (80001ac <_ZN3LedC1Ev+0x60>)
 8000168:	f043 0308 	orr.w	r3, r3, #8
 800016c:	6193      	str	r3, [r2, #24]
 800016e:	4b0f      	ldr	r3, [pc, #60]	; (80001ac <_ZN3LedC1Ev+0x60>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	f003 0308 	and.w	r3, r3, #8
 8000176:	60fb      	str	r3, [r7, #12]
 8000178:	68fb      	ldr	r3, [r7, #12]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800017a:	2200      	movs	r2, #0
 800017c:	2101      	movs	r1, #1
 800017e:	480c      	ldr	r0, [pc, #48]	; (80001b0 <_ZN3LedC1Ev+0x64>)
 8000180:	f000 fe5e 	bl	8000e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000184:	2301      	movs	r3, #1
 8000186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000188:	2301      	movs	r3, #1
 800018a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800018c:	2300      	movs	r3, #0
 800018e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000190:	2302      	movs	r3, #2
 8000192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000194:	f107 0310 	add.w	r3, r7, #16
 8000198:	4619      	mov	r1, r3
 800019a:	4805      	ldr	r0, [pc, #20]	; (80001b0 <_ZN3LedC1Ev+0x64>)
 800019c:	f000 fccc 	bl	8000b38 <HAL_GPIO_Init>
}
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	3720      	adds	r7, #32
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40021000 	.word	0x40021000
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <_ZN3Led6led_onEv>:
void Led::led_on(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, (GPIO_PinState)1);
 80001bc:	2201      	movs	r2, #1
 80001be:	2101      	movs	r1, #1
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <_ZN3Led6led_onEv+0x1c>)
 80001c2:	f000 fe3d 	bl	8000e40 <HAL_GPIO_WritePin>

}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <_ZN3Led7led_offEv>:
void Led::led_off(){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,(GPIO_PinState) 0);
 80001dc:	2200      	movs	r2, #0
 80001de:	2101      	movs	r1, #1
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <_ZN3Led7led_offEv+0x1c>)
 80001e2:	f000 fe2d 	bl	8000e40 <HAL_GPIO_WritePin>
 80001e6:	bf00      	nop
 80001e8:	3708      	adds	r7, #8
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40010c00 	.word	0x40010c00

080001f4 <main>:
#include"LED.hpp"
#include"Uartcpp.hpp"
UART_HandleTypeDef* huart2;
Uart uart;
int main(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0

  HAL_Init();
 80001fa:	f000 fa7d 	bl	80006f8 <HAL_Init>

  HAL_RCC_DeInit();
 80001fe:	f000 fe37 	bl	8000e70 <HAL_RCC_DeInit>
  SystemCoreClockUpdate();
 8000202:	f000 f931 	bl	8000468 <SystemCoreClockUpdate>

  Led led;
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ff9f 	bl	800014c <_ZN3LedC1Ev>

  uart.uartBaudRate(9600);
 800020e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000212:	4816      	ldr	r0, [pc, #88]	; (800026c <main+0x78>)
 8000214:	f000 f9f6 	bl	8000604 <_ZN4Uart12uartBaudRateEt>
  uart.uartPeripheral(2);
 8000218:	2102      	movs	r1, #2
 800021a:	4814      	ldr	r0, [pc, #80]	; (800026c <main+0x78>)
 800021c:	f000 fa02 	bl	8000624 <_ZN4Uart14uartPeripheralEh>

  huart2 = uart.getUartHandler();
 8000220:	4812      	ldr	r0, [pc, #72]	; (800026c <main+0x78>)
 8000222:	f000 fa47 	bl	80006b4 <_ZN4Uart14getUartHandlerEv>
 8000226:	4603      	mov	r3, r0
 8000228:	4a11      	ldr	r2, [pc, #68]	; (8000270 <main+0x7c>)
 800022a:	6013      	str	r3, [r2, #0]
    while (1)
    {
        if(uart.getRecieveByte() == 'S')
 800022c:	480f      	ldr	r0, [pc, #60]	; (800026c <main+0x78>)
 800022e:	f000 fa56 	bl	80006de <_ZN4Uart14getRecieveByteEv>
 8000232:	4603      	mov	r3, r0
 8000234:	2b53      	cmp	r3, #83	; 0x53
 8000236:	bf0c      	ite	eq
 8000238:	2301      	moveq	r3, #1
 800023a:	2300      	movne	r3, #0
 800023c:	b2db      	uxtb	r3, r3
 800023e:	2b00      	cmp	r3, #0
 8000240:	d004      	beq.n	800024c <main+0x58>
        {
        	led.led_on();
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ffb5 	bl	80001b4 <_ZN3Led6led_onEv>
 800024a:	e7ef      	b.n	800022c <main+0x38>

        }
        else if(uart.getRecieveByte()  == 'F')
 800024c:	4807      	ldr	r0, [pc, #28]	; (800026c <main+0x78>)
 800024e:	f000 fa46 	bl	80006de <_ZN4Uart14getRecieveByteEv>
 8000252:	4603      	mov	r3, r0
 8000254:	2b46      	cmp	r3, #70	; 0x46
 8000256:	bf0c      	ite	eq
 8000258:	2301      	moveq	r3, #1
 800025a:	2300      	movne	r3, #0
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0e4      	beq.n	800022c <main+0x38>
        {
            led.led_off();
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f7ff ffb5 	bl	80001d4 <_ZN3Led7led_offEv>
        if(uart.getRecieveByte() == 'S')
 800026a:	e7df      	b.n	800022c <main+0x38>
 800026c:	2000002c 	.word	0x2000002c
 8000270:	20000028 	.word	0x20000028

08000274 <HAL_UART_RxCpltCallback>:
    }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == huart2->Instance)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <HAL_UART_RxCpltCallback+0x34>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	429a      	cmp	r2, r3
 8000288:	d10a      	bne.n	80002a0 <HAL_UART_RxCpltCallback+0x2c>
    {
    HAL_UART_Receive_IT(huart2, uart.recieveByteAddress(), 1);
 800028a:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <HAL_UART_RxCpltCallback+0x34>)
 800028c:	681c      	ldr	r4, [r3, #0]
 800028e:	4807      	ldr	r0, [pc, #28]	; (80002ac <HAL_UART_RxCpltCallback+0x38>)
 8000290:	f000 fa1a 	bl	80006c8 <_ZN4Uart18recieveByteAddressEv>
 8000294:	4603      	mov	r3, r0
 8000296:	2201      	movs	r2, #1
 8000298:	4619      	mov	r1, r3
 800029a:	4620      	mov	r0, r4
 800029c:	f000 ff01 	bl	80010a2 <HAL_UART_Receive_IT>
    }
}
 80002a0:	bf00      	nop
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd90      	pop	{r4, r7, pc}
 80002a8:	20000028 	.word	0x20000028
 80002ac:	2000002c 	.word	0x2000002c

080002b0 <_Z41__static_initialization_and_destruction_0ii>:
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d107      	bne.n	80002d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d102      	bne.n	80002d0 <_Z41__static_initialization_and_destruction_0ii+0x20>
Uart uart;
 80002ca:	4803      	ldr	r0, [pc, #12]	; (80002d8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80002cc:	f000 f964 	bl	8000598 <_ZN4UartC1Ev>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	2000002c 	.word	0x2000002c

080002dc <_GLOBAL__sub_I_huart2>:
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
 80002e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002e4:	2001      	movs	r0, #1
 80002e6:	f7ff ffe3 	bl	80002b0 <_Z41__static_initialization_and_destruction_0ii>
 80002ea:	bd80      	pop	{r7, pc}

080002ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f2:	4b15      	ldr	r3, [pc, #84]	; (8000348 <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <HAL_MspInit+0x5c>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <HAL_MspInit+0x5c>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <HAL_MspInit+0x5c>)
 8000310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <HAL_MspInit+0x5c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <HAL_MspInit+0x60>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <HAL_MspInit+0x60>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000

08000350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b088      	sub	sp, #32
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000358:	f107 0310 	add.w	r3, r7, #16
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <HAL_UART_MspInit+0x98>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d137      	bne.n	80003e0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <HAL_UART_MspInit+0x9c>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	4a1d      	ldr	r2, [pc, #116]	; (80003ec <HAL_UART_MspInit+0x9c>)
 8000376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800037a:	61d3      	str	r3, [r2, #28]
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <HAL_UART_MspInit+0x9c>)
 800037e:	69db      	ldr	r3, [r3, #28]
 8000380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <HAL_UART_MspInit+0x9c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <HAL_UART_MspInit+0x9c>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_UART_MspInit+0x9c>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0304 	and.w	r3, r3, #4
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003a0:	2304      	movs	r3, #4
 80003a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003a4:	2302      	movs	r3, #2
 80003a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a8:	2303      	movs	r3, #3
 80003aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ac:	f107 0310 	add.w	r3, r7, #16
 80003b0:	4619      	mov	r1, r3
 80003b2:	480f      	ldr	r0, [pc, #60]	; (80003f0 <HAL_UART_MspInit+0xa0>)
 80003b4:	f000 fbc0 	bl	8000b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80003b8:	2308      	movs	r3, #8
 80003ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4809      	ldr	r0, [pc, #36]	; (80003f0 <HAL_UART_MspInit+0xa0>)
 80003cc:	f000 fbb4 	bl	8000b38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	2026      	movs	r0, #38	; 0x26
 80003d6:	f000 fac8 	bl	800096a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003da:	2026      	movs	r0, #38	; 0x26
 80003dc:	f000 fae1 	bl	80009a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40004400 	.word	0x40004400
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010800 	.word	0x40010800

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <NMI_Handler+0x4>

080003fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <HardFault_Handler+0x4>

08000400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <MemManage_Handler+0x4>

08000406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <UsageFault_Handler+0x4>

08000412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043a:	f000 f9a3 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(huart2);
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <USART2_IRQHandler+0x14>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 fe59 	bl	8001104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000028 	.word	0x20000028

0800045c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800047a:	4b2f      	ldr	r3, [pc, #188]	; (8000538 <SystemCoreClockUpdate+0xd0>)
 800047c:	685b      	ldr	r3, [r3, #4]
 800047e:	f003 030c 	and.w	r3, r3, #12
 8000482:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	2b08      	cmp	r3, #8
 8000488:	d011      	beq.n	80004ae <SystemCoreClockUpdate+0x46>
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	2b08      	cmp	r3, #8
 800048e:	d83a      	bhi.n	8000506 <SystemCoreClockUpdate+0x9e>
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d003      	beq.n	800049e <SystemCoreClockUpdate+0x36>
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	2b04      	cmp	r3, #4
 800049a:	d004      	beq.n	80004a6 <SystemCoreClockUpdate+0x3e>
 800049c:	e033      	b.n	8000506 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800049e:	4b27      	ldr	r3, [pc, #156]	; (800053c <SystemCoreClockUpdate+0xd4>)
 80004a0:	4a27      	ldr	r2, [pc, #156]	; (8000540 <SystemCoreClockUpdate+0xd8>)
 80004a2:	601a      	str	r2, [r3, #0]
      break;
 80004a4:	e033      	b.n	800050e <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80004a6:	4b25      	ldr	r3, [pc, #148]	; (800053c <SystemCoreClockUpdate+0xd4>)
 80004a8:	4a25      	ldr	r2, [pc, #148]	; (8000540 <SystemCoreClockUpdate+0xd8>)
 80004aa:	601a      	str	r2, [r3, #0]
      break;
 80004ac:	e02f      	b.n	800050e <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80004ae:	4b22      	ldr	r3, [pc, #136]	; (8000538 <SystemCoreClockUpdate+0xd0>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004b6:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <SystemCoreClockUpdate+0xd0>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004c0:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	0c9b      	lsrs	r3, r3, #18
 80004c6:	3302      	adds	r3, #2
 80004c8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d106      	bne.n	80004de <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <SystemCoreClockUpdate+0xdc>)
 80004d4:	fb02 f303 	mul.w	r3, r2, r3
 80004d8:	4a18      	ldr	r2, [pc, #96]	; (800053c <SystemCoreClockUpdate+0xd4>)
 80004da:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80004dc:	e017      	b.n	800050e <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <SystemCoreClockUpdate+0xd0>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d006      	beq.n	80004f8 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <SystemCoreClockUpdate+0xdc>)
 80004ee:	fb02 f303 	mul.w	r3, r2, r3
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <SystemCoreClockUpdate+0xd4>)
 80004f4:	6013      	str	r3, [r2, #0]
      break;
 80004f6:	e00a      	b.n	800050e <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	4a11      	ldr	r2, [pc, #68]	; (8000540 <SystemCoreClockUpdate+0xd8>)
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <SystemCoreClockUpdate+0xd4>)
 8000502:	6013      	str	r3, [r2, #0]
      break;
 8000504:	e003      	b.n	800050e <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <SystemCoreClockUpdate+0xd4>)
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <SystemCoreClockUpdate+0xd8>)
 800050a:	601a      	str	r2, [r3, #0]
      break;
 800050c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <SystemCoreClockUpdate+0xd0>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	f003 030f 	and.w	r3, r3, #15
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <SystemCoreClockUpdate+0xe0>)
 800051a:	5cd3      	ldrb	r3, [r2, r3]
 800051c:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <SystemCoreClockUpdate+0xd4>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	fa22 f303 	lsr.w	r3, r2, r3
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <SystemCoreClockUpdate+0xd4>)
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000
 800053c:	20000000 	.word	0x20000000
 8000540:	007a1200 	.word	0x007a1200
 8000544:	003d0900 	.word	0x003d0900
 8000548:	08001920 	.word	0x08001920

0800054c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	; (8000584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	; (8000590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000572:	f7ff ff73 	bl	800045c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000576:	f001 f9a3 	bl	80018c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057a:	f7ff fe3b 	bl	80001f4 <main>
  bx lr
 800057e:	4770      	bx	lr
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000588:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 800058c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000590:	20000078 	.word	0x20000078

08000594 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC1_2_IRQHandler>
	...

08000598 <_ZN4UartC1Ev>:
#include"Uartcpp.hpp"
Uart::Uart(){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <_ZN4UartC1Ev+0x64>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a15      	ldr	r2, [pc, #84]	; (80005fc <_ZN4UartC1Ev+0x64>)
 80005a6:	f043 0304 	orr.w	r3, r3, #4
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <_ZN4UartC1Ev+0x64>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0304 	and.w	r3, r3, #4
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
	huart.Init.BaudRate = 9600;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005be:	605a      	str	r2, [r3, #4]
    huart.Instance = USART2;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <_ZN4UartC1Ev+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
	huart.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
    huart.Init.StopBits = UART_STOPBITS_1;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
    huart.Init.Parity = UART_PARITY_NONE;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
    huart.Init.Mode = UART_MODE_TX_RX;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
    huart.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fd0b 	bl	8001008 <HAL_UART_Init>
}
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40021000 	.word	0x40021000
 8000600:	40004400 	.word	0x40004400

08000604 <_ZN4Uart12uartBaudRateEt>:

void Uart::uartBaudRate(uint16_t rate_HZ){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
    huart.Init.BaudRate = 9600;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000616:	605a      	str	r2, [r3, #4]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
	...

08000624 <_ZN4Uart14uartPeripheralEh>:
void Uart::uartPeripheral(uint8_t peripheral_num){
 8000624:	b480      	push	{r7}
 8000626:	b087      	sub	sp, #28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
    switch (peripheral_num)
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b31      	cmp	r3, #49	; 0x31
 8000634:	d002      	beq.n	800063c <_ZN4Uart14uartPeripheralEh+0x18>
 8000636:	2b32      	cmp	r3, #50	; 0x32
 8000638:	d010      	beq.n	800065c <_ZN4Uart14uartPeripheralEh+0x38>
 800063a:	e01e      	b.n	800067a <_ZN4Uart14uartPeripheralEh+0x56>
    {
    case '1':
        huart.Instance = USART1;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4a19      	ldr	r2, [pc, #100]	; (80006a4 <_ZN4Uart14uartPeripheralEh+0x80>)
 8000640:	601a      	str	r2, [r3, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697b      	ldr	r3, [r7, #20]
        break;
 800065a:	e01e      	b.n	800069a <_ZN4Uart14uartPeripheralEh+0x76>
    case '2':
        huart.Instance = USART2;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a13      	ldr	r2, [pc, #76]	; (80006ac <_ZN4Uart14uartPeripheralEh+0x88>)
 8000660:	601a      	str	r2, [r3, #0]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000668:	f043 0308 	orr.w	r3, r3, #8
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0308 	and.w	r3, r3, #8
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
    default:
       huart.Instance = USART3;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <_ZN4Uart14uartPeripheralEh+0x8c>)
 800067e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <_ZN4Uart14uartPeripheralEh+0x84>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
        break;
 8000698:	bf00      	nop
    }
    
}
 800069a:	bf00      	nop
 800069c:	371c      	adds	r7, #28
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40013800 	.word	0x40013800
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40004400 	.word	0x40004400
 80006b0:	40004800 	.word	0x40004800

080006b4 <_ZN4Uart14getUartHandlerEv>:
UART_HandleTypeDef* Uart::getUartHandler(){
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    return &huart;
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <_ZN4Uart18recieveByteAddressEv>:
    if(HAL_UART_Init(&huart) != HAL_OK)
        return 0;
    return 1;
}

uint8_t* Uart::recieveByteAddress(){
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
    return &recieveByte;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3344      	adds	r3, #68	; 0x44
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <_ZN4Uart14getRecieveByteEv>:
uint8_t  Uart::getRecieveByte(){
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
    return recieveByte;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_Init+0x28>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a07      	ldr	r2, [pc, #28]	; (8000720 <HAL_Init+0x28>)
 8000702:	f043 0310 	orr.w	r3, r3, #16
 8000706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000708:	2003      	movs	r0, #3
 800070a:	f000 f923 	bl	8000954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f808 	bl	8000724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000714:	f7ff fdea 	bl	80002ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40022000 	.word	0x40022000

08000724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x54>)
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_InitTick+0x58>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073a:	fbb3 f3f1 	udiv	r3, r3, r1
 800073e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f000 f93b 	bl	80009be <HAL_SYSTICK_Config>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e00e      	b.n	8000770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d80a      	bhi.n	800076e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000758:	2200      	movs	r2, #0
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000760:	f000 f903 	bl	800096a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_InitTick+0x5c>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800076a:	2300      	movs	r3, #0
 800076c:	e000      	b.n	8000770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x1c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x20>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <HAL_IncTick+0x20>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000074 	.word	0x20000074

080007a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <HAL_GetTick+0x10>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	20000074 	.word	0x20000074

080007bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007d8:	4013      	ands	r3, r2
 80007da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ee:	4a04      	ldr	r2, [pc, #16]	; (8000800 <__NVIC_SetPriorityGrouping+0x44>)
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	60d3      	str	r3, [r2, #12]
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <__NVIC_GetPriorityGrouping+0x18>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	0a1b      	lsrs	r3, r3, #8
 800080e:	f003 0307 	and.w	r3, r3, #7
}
 8000812:	4618      	mov	r0, r3
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	db0b      	blt.n	800084a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	f003 021f 	and.w	r2, r3, #31
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <__NVIC_EnableIRQ+0x34>)
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	095b      	lsrs	r3, r3, #5
 8000840:	2001      	movs	r0, #1
 8000842:	fa00 f202 	lsl.w	r2, r0, r2
 8000846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100

08000858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	6039      	str	r1, [r7, #0]
 8000862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	db0a      	blt.n	8000882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	490c      	ldr	r1, [pc, #48]	; (80008a4 <__NVIC_SetPriority+0x4c>)
 8000872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	440b      	add	r3, r1
 800087c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000880:	e00a      	b.n	8000898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4908      	ldr	r1, [pc, #32]	; (80008a8 <__NVIC_SetPriority+0x50>)
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	f003 030f 	and.w	r3, r3, #15
 800088e:	3b04      	subs	r3, #4
 8000890:	0112      	lsls	r2, r2, #4
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	440b      	add	r3, r1
 8000896:	761a      	strb	r2, [r3, #24]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000e100 	.word	0xe000e100
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b089      	sub	sp, #36	; 0x24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	f1c3 0307 	rsb	r3, r3, #7
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	bf28      	it	cs
 80008ca:	2304      	movcs	r3, #4
 80008cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3304      	adds	r3, #4
 80008d2:	2b06      	cmp	r3, #6
 80008d4:	d902      	bls.n	80008dc <NVIC_EncodePriority+0x30>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3b03      	subs	r3, #3
 80008da:	e000      	b.n	80008de <NVIC_EncodePriority+0x32>
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	43da      	mvns	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	401a      	ands	r2, r3
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	43d9      	mvns	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	4313      	orrs	r3, r2
         );
}
 8000906:	4618      	mov	r0, r3
 8000908:	3724      	adds	r7, #36	; 0x24
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000920:	d301      	bcc.n	8000926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000922:	2301      	movs	r3, #1
 8000924:	e00f      	b.n	8000946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <SysTick_Config+0x40>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3b01      	subs	r3, #1
 800092c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800092e:	210f      	movs	r1, #15
 8000930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000934:	f7ff ff90 	bl	8000858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <SysTick_Config+0x40>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <SysTick_Config+0x40>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	e000e010 	.word	0xe000e010

08000954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff ff2d 	bl	80007bc <__NVIC_SetPriorityGrouping>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800096a:	b580      	push	{r7, lr}
 800096c:	b086      	sub	sp, #24
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800097c:	f7ff ff42 	bl	8000804 <__NVIC_GetPriorityGrouping>
 8000980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f7ff ff90 	bl	80008ac <NVIC_EncodePriority>
 800098c:	4602      	mov	r2, r0
 800098e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000992:	4611      	mov	r1, r2
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ff5f 	bl	8000858 <__NVIC_SetPriority>
}
 800099a:	bf00      	nop
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff35 	bl	8000820 <__NVIC_EnableIRQ>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffa2 	bl	8000910 <SysTick_Config>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b085      	sub	sp, #20
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d008      	beq.n	80009fe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2204      	movs	r2, #4
 80009f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e020      	b.n	8000a40 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 020e 	bic.w	r2, r2, #14
 8000a0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0201 	bic.w	r2, r2, #1
 8000a1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a26:	2101      	movs	r1, #1
 8000a28:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr
	...

08000a4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d005      	beq.n	8000a6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2204      	movs	r2, #4
 8000a66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e051      	b.n	8000b12 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 020e 	bic.w	r2, r2, #14
 8000a7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0201 	bic.w	r2, r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <HAL_DMA_Abort_IT+0xd0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d029      	beq.n	8000aec <HAL_DMA_Abort_IT+0xa0>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <HAL_DMA_Abort_IT+0xd4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d022      	beq.n	8000ae8 <HAL_DMA_Abort_IT+0x9c>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1f      	ldr	r2, [pc, #124]	; (8000b24 <HAL_DMA_Abort_IT+0xd8>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d01a      	beq.n	8000ae2 <HAL_DMA_Abort_IT+0x96>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_DMA_Abort_IT+0xdc>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d012      	beq.n	8000adc <HAL_DMA_Abort_IT+0x90>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <HAL_DMA_Abort_IT+0xe0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d00a      	beq.n	8000ad6 <HAL_DMA_Abort_IT+0x8a>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_DMA_Abort_IT+0xe4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d102      	bne.n	8000ad0 <HAL_DMA_Abort_IT+0x84>
 8000aca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ace:	e00e      	b.n	8000aee <HAL_DMA_Abort_IT+0xa2>
 8000ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad4:	e00b      	b.n	8000aee <HAL_DMA_Abort_IT+0xa2>
 8000ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ada:	e008      	b.n	8000aee <HAL_DMA_Abort_IT+0xa2>
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	e005      	b.n	8000aee <HAL_DMA_Abort_IT+0xa2>
 8000ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae6:	e002      	b.n	8000aee <HAL_DMA_Abort_IT+0xa2>
 8000ae8:	2310      	movs	r3, #16
 8000aea:	e000      	b.n	8000aee <HAL_DMA_Abort_IT+0xa2>
 8000aec:	2301      	movs	r3, #1
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_DMA_Abort_IT+0xe8>)
 8000af0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2201      	movs	r2, #1
 8000af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	4798      	blx	r3
    } 
  }
  return status;
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40020008 	.word	0x40020008
 8000b20:	4002001c 	.word	0x4002001c
 8000b24:	40020030 	.word	0x40020030
 8000b28:	40020044 	.word	0x40020044
 8000b2c:	40020058 	.word	0x40020058
 8000b30:	4002006c 	.word	0x4002006c
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b08b      	sub	sp, #44	; 0x2c
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	e169      	b.n	8000e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8158 	bne.w	8000e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	4a9a      	ldr	r2, [pc, #616]	; (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d05e      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b74:	4a98      	ldr	r2, [pc, #608]	; (8000dd8 <HAL_GPIO_Init+0x2a0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d875      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a98      	ldr	r2, [pc, #608]	; (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d058      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b80:	4a96      	ldr	r2, [pc, #600]	; (8000ddc <HAL_GPIO_Init+0x2a4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d86f      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b86:	4a96      	ldr	r2, [pc, #600]	; (8000de0 <HAL_GPIO_Init+0x2a8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d052      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b8c:	4a94      	ldr	r2, [pc, #592]	; (8000de0 <HAL_GPIO_Init+0x2a8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d869      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b92:	4a94      	ldr	r2, [pc, #592]	; (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d04c      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000b98:	4a92      	ldr	r2, [pc, #584]	; (8000de4 <HAL_GPIO_Init+0x2ac>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d863      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000b9e:	4a92      	ldr	r2, [pc, #584]	; (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d046      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
 8000ba4:	4a90      	ldr	r2, [pc, #576]	; (8000de8 <HAL_GPIO_Init+0x2b0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d85d      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d82a      	bhi.n	8000c04 <HAL_GPIO_Init+0xcc>
 8000bae:	2b12      	cmp	r3, #18
 8000bb0:	d859      	bhi.n	8000c66 <HAL_GPIO_Init+0x12e>
 8000bb2:	a201      	add	r2, pc, #4	; (adr r2, 8000bb8 <HAL_GPIO_Init+0x80>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000c33 	.word	0x08000c33
 8000bbc:	08000c0d 	.word	0x08000c0d
 8000bc0:	08000c1f 	.word	0x08000c1f
 8000bc4:	08000c61 	.word	0x08000c61
 8000bc8:	08000c67 	.word	0x08000c67
 8000bcc:	08000c67 	.word	0x08000c67
 8000bd0:	08000c67 	.word	0x08000c67
 8000bd4:	08000c67 	.word	0x08000c67
 8000bd8:	08000c67 	.word	0x08000c67
 8000bdc:	08000c67 	.word	0x08000c67
 8000be0:	08000c67 	.word	0x08000c67
 8000be4:	08000c67 	.word	0x08000c67
 8000be8:	08000c67 	.word	0x08000c67
 8000bec:	08000c67 	.word	0x08000c67
 8000bf0:	08000c67 	.word	0x08000c67
 8000bf4:	08000c67 	.word	0x08000c67
 8000bf8:	08000c67 	.word	0x08000c67
 8000bfc:	08000c15 	.word	0x08000c15
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	4a79      	ldr	r2, [pc, #484]	; (8000dec <HAL_GPIO_Init+0x2b4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0a:	e02c      	b.n	8000c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e029      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e024      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	3308      	adds	r3, #8
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e01f      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	330c      	adds	r3, #12
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e01a      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d102      	bne.n	8000c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e013      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d105      	bne.n	8000c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	611a      	str	r2, [r3, #16]
          break;
 8000c52:	e009      	b.n	8000c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c54:	2308      	movs	r3, #8
 8000c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	615a      	str	r2, [r3, #20]
          break;
 8000c5e:	e003      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x130>
          break;
 8000c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2bff      	cmp	r3, #255	; 0xff
 8000c6c:	d801      	bhi.n	8000c72 <HAL_GPIO_Init+0x13a>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	e001      	b.n	8000c76 <HAL_GPIO_Init+0x13e>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3304      	adds	r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2bff      	cmp	r3, #255	; 0xff
 8000c7c:	d802      	bhi.n	8000c84 <HAL_GPIO_Init+0x14c>
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	e002      	b.n	8000c8a <HAL_GPIO_Init+0x152>
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	3b08      	subs	r3, #8
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	210f      	movs	r1, #15
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	6a39      	ldr	r1, [r7, #32]
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80b1 	beq.w	8000e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb8:	4b4d      	ldr	r3, [pc, #308]	; (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b4a      	ldr	r3, [pc, #296]	; (8000df0 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd0:	4a48      	ldr	r2, [pc, #288]	; (8000df4 <HAL_GPIO_Init+0x2bc>)
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a40      	ldr	r2, [pc, #256]	; (8000df8 <HAL_GPIO_Init+0x2c0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d013      	beq.n	8000d24 <HAL_GPIO_Init+0x1ec>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a3f      	ldr	r2, [pc, #252]	; (8000dfc <HAL_GPIO_Init+0x2c4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d00d      	beq.n	8000d20 <HAL_GPIO_Init+0x1e8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3e      	ldr	r2, [pc, #248]	; (8000e00 <HAL_GPIO_Init+0x2c8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0x1e4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3d      	ldr	r2, [pc, #244]	; (8000e04 <HAL_GPIO_Init+0x2cc>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d101      	bne.n	8000d18 <HAL_GPIO_Init+0x1e0>
 8000d14:	2303      	movs	r3, #3
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e004      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e002      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <HAL_GPIO_Init+0x1ee>
 8000d24:	2300      	movs	r3, #0
 8000d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d28:	f002 0203 	and.w	r2, r2, #3
 8000d2c:	0092      	lsls	r2, r2, #2
 8000d2e:	4093      	lsls	r3, r2
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d36:	492f      	ldr	r1, [pc, #188]	; (8000df4 <HAL_GPIO_Init+0x2bc>)
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	089b      	lsrs	r3, r3, #2
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d50:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	492c      	ldr	r1, [pc, #176]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	600b      	str	r3, [r1, #0]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d5e:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4928      	ldr	r1, [pc, #160]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d006      	beq.n	8000d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4922      	ldr	r1, [pc, #136]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	604b      	str	r3, [r1, #4]
 8000d84:	e006      	b.n	8000d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	491e      	ldr	r1, [pc, #120]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d006      	beq.n	8000dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	4918      	ldr	r1, [pc, #96]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	608b      	str	r3, [r1, #8]
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	4914      	ldr	r1, [pc, #80]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000db8:	4013      	ands	r3, r2
 8000dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d021      	beq.n	8000e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	490e      	ldr	r1, [pc, #56]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	60cb      	str	r3, [r1, #12]
 8000dd4:	e021      	b.n	8000e1a <HAL_GPIO_Init+0x2e2>
 8000dd6:	bf00      	nop
 8000dd8:	10320000 	.word	0x10320000
 8000ddc:	10310000 	.word	0x10310000
 8000de0:	10220000 	.word	0x10220000
 8000de4:	10210000 	.word	0x10210000
 8000de8:	10120000 	.word	0x10120000
 8000dec:	10110000 	.word	0x10110000
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40011400 	.word	0x40011400
 8000e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_GPIO_Init+0x304>)
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4909      	ldr	r1, [pc, #36]	; (8000e3c <HAL_GPIO_Init+0x304>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f ae8e 	bne.w	8000b4c <HAL_GPIO_Init+0x14>
  }
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	372c      	adds	r7, #44	; 0x2c
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40010400 	.word	0x40010400

08000e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e50:	787b      	ldrb	r3, [r7, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e56:	887a      	ldrh	r2, [r7, #2]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e5c:	e003      	b.n	8000e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	041a      	lsls	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	611a      	str	r2, [r3, #16]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000e76:	f7ff fc97 	bl	80007a8 <HAL_GetTick>
 8000e7a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e7c:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a44      	ldr	r2, [pc, #272]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fc8d 	bl	80007a8 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e077      	b.n	8000f8c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000e9c:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8000ea8:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000eb0:	4a38      	ldr	r2, [pc, #224]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000eb8:	f7ff fc76 	bl	80007a8 <HAL_GetTick>
 8000ebc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000ec4:	e00a      	b.n	8000edc <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ec6:	f7ff fc6f 	bl	80007a8 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e057      	b.n	8000f8c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000edc:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 030c 	and.w	r3, r3, #12
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1ee      	bne.n	8000ec6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_RCC_DeInit+0x128>)
 8000eea:	4a2c      	ldr	r2, [pc, #176]	; (8000f9c <HAL_RCC_DeInit+0x12c>)
 8000eec:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000eee:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <HAL_RCC_DeInit+0x130>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fc16 	bl	8000724 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e044      	b.n	8000f8c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f02:	f7ff fc51 	bl	80007a8 <HAL_GetTick>
 8000f06:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f12:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f16:	f7ff fc47 	bl	80007a8 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e031      	b.n	8000f8c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f0      	bne.n	8000f16 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f3a:	f7ff fc35 	bl	80007a8 <HAL_GetTick>
 8000f3e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f46:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fc2b 	bl	80007a8 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b64      	cmp	r3, #100	; 0x64
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e015      	b.n	8000f8c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f0      	bne.n	8000f4e <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f76:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f82:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_RCC_DeInit+0x124>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	007a1200 	.word	0x007a1200
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fa8:	4b02      	ldr	r3, [pc, #8]	; (8000fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fbc:	f7ff fff2 	bl	8000fa4 <HAL_RCC_GetHCLKFreq>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	4903      	ldr	r1, [pc, #12]	; (8000fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fce:	5ccb      	ldrb	r3, [r1, r3]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	08001930 	.word	0x08001930

08000fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_RCC_GetHCLKFreq>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	0adb      	lsrs	r3, r3, #11
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	4903      	ldr	r1, [pc, #12]	; (8001004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ff6:	5ccb      	ldrb	r3, [r1, r3]
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	08001930 	.word	0x08001930

08001008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e03f      	b.n	800109a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d106      	bne.n	8001034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f98e 	bl	8000350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2224      	movs	r2, #36	; 0x24
 8001038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800104a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f000 fba9 	bl	80017a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2220      	movs	r2, #32
 800108c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	4613      	mov	r3, r2
 80010ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b20      	cmp	r3, #32
 80010ba:	d11d      	bne.n	80010f8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d002      	beq.n	80010c8 <HAL_UART_Receive_IT+0x26>
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e016      	b.n	80010fa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_UART_Receive_IT+0x38>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e00f      	b.n	80010fa <HAL_UART_Receive_IT+0x58>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f9cf 	bl	8001492 <UART_Start_Receive_IT>
 80010f4:	4603      	mov	r3, r0
 80010f6:	e000      	b.n	80010fa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80010f8:	2302      	movs	r3, #2
  }
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_UART_IRQHandler+0x52>
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fa7f 	bl	8001652 <UART_Receive_IT>
      return;
 8001154:	e17b      	b.n	800144e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80b1 	beq.w	80012c0 <HAL_UART_IRQHandler+0x1bc>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <HAL_UART_IRQHandler+0x70>
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 80a6 	beq.w	80012c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00a      	beq.n	8001194 <HAL_UART_IRQHandler+0x90>
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f043 0201 	orr.w	r2, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00a      	beq.n	80011b4 <HAL_UART_IRQHandler+0xb0>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f043 0202 	orr.w	r2, r3, #2
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00a      	beq.n	80011d4 <HAL_UART_IRQHandler+0xd0>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f043 0204 	orr.w	r2, r3, #4
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00f      	beq.n	80011fe <HAL_UART_IRQHandler+0xfa>
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d104      	bne.n	80011f2 <HAL_UART_IRQHandler+0xee>
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d005      	beq.n	80011fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f043 0208 	orr.w	r2, r3, #8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 811e 	beq.w	8001444 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <HAL_UART_IRQHandler+0x11e>
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	f003 0320 	and.w	r3, r3, #32
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fa18 	bl	8001652 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 0308 	and.w	r3, r3, #8
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <HAL_UART_IRQHandler+0x146>
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d031      	beq.n	80012ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f95a 	bl	8001504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125a:	2b00      	cmp	r3, #0
 800125c:	d023      	beq.n	80012a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800126c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	2b00      	cmp	r3, #0
 8001274:	d013      	beq.n	800129e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127a:	4a76      	ldr	r2, [pc, #472]	; (8001454 <HAL_UART_IRQHandler+0x350>)
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fbe2 	bl	8000a4c <HAL_DMA_Abort_IT>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001298:	4610      	mov	r0, r2
 800129a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800129c:	e00e      	b.n	80012bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f8e3 	bl	800146a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012a4:	e00a      	b.n	80012bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f8df 	bl	800146a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012ac:	e006      	b.n	80012bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f8db 	bl	800146a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80012ba:	e0c3      	b.n	8001444 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012bc:	bf00      	nop
    return;
 80012be:	e0c1      	b.n	8001444 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 80a1 	bne.w	800140c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 809b 	beq.w	800140c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 8095 	beq.w	800140c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d04e      	beq.n	80013a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001310:	8a3b      	ldrh	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8098 	beq.w	8001448 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800131c:	8a3a      	ldrh	r2, [r7, #16]
 800131e:	429a      	cmp	r2, r3
 8001320:	f080 8092 	bcs.w	8001448 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	8a3a      	ldrh	r2, [r7, #16]
 8001328:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	2b20      	cmp	r3, #32
 8001332:	d02b      	beq.n	800138c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001342:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f022 0201 	bic.w	r2, r2, #1
 8001352:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001362:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2220      	movs	r2, #32
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0210 	bic.w	r2, r2, #16
 8001380:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fb25 	bl	80009d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001394:	b29b      	uxth	r3, r3
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f86d 	bl	800147c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80013a2:	e051      	b.n	8001448 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d047      	beq.n	800144c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80013bc:	8a7b      	ldrh	r3, [r7, #18]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d044      	beq.n	800144c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2220      	movs	r2, #32
 80013e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0210 	bic.w	r2, r2, #16
 80013fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001400:	8a7b      	ldrh	r3, [r7, #18]
 8001402:	4619      	mov	r1, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f839 	bl	800147c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800140a:	e01f      	b.n	800144c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <HAL_UART_IRQHandler+0x324>
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f8af 	bl	8001584 <UART_Transmit_IT>
    return;
 8001426:	e012      	b.n	800144e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00d      	beq.n	800144e <HAL_UART_IRQHandler+0x34a>
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f8f0 	bl	8001622 <UART_EndTransmit_IT>
    return;
 8001442:	e004      	b.n	800144e <HAL_UART_IRQHandler+0x34a>
    return;
 8001444:	bf00      	nop
 8001446:	e002      	b.n	800144e <HAL_UART_IRQHandler+0x34a>
      return;
 8001448:	bf00      	nop
 800144a:	e000      	b.n	800144e <HAL_UART_IRQHandler+0x34a>
      return;
 800144c:	bf00      	nop
  }
}
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	0800155d 	.word	0x0800155d

08001458 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4613      	mov	r3, r2
 800149e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2222      	movs	r2, #34	; 0x22
 80014bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014d6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0220 	orr.w	r2, r2, #32
 80014f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800151a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0210 	bic.w	r2, r2, #16
 8001542:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff ff77 	bl	800146a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b21      	cmp	r3, #33	; 0x21
 8001596:	d13e      	bne.n	8001616 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a0:	d114      	bne.n	80015cc <UART_Transmit_IT+0x48>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d110      	bne.n	80015cc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	1c9a      	adds	r2, r3, #2
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	621a      	str	r2, [r3, #32]
 80015ca:	e008      	b.n	80015de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6211      	str	r1, [r2, #32]
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4619      	mov	r1, r3
 80015ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001600:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001610:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001616:	2302      	movs	r3, #2
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001638:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2220      	movs	r2, #32
 800163e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff08 	bl	8001458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b22      	cmp	r3, #34	; 0x22
 8001664:	f040 8099 	bne.w	800179a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001670:	d117      	bne.n	80016a2 <UART_Receive_IT+0x50>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d113      	bne.n	80016a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	b29b      	uxth	r3, r3
 800168c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001690:	b29a      	uxth	r2, r3
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	1c9a      	adds	r2, r3, #2
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
 80016a0:	e026      	b.n	80016f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b4:	d007      	beq.n	80016c6 <UART_Receive_IT+0x74>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10a      	bne.n	80016d4 <UART_Receive_IT+0x82>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d106      	bne.n	80016d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e008      	b.n	80016e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4619      	mov	r1, r3
 80016fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001700:	2b00      	cmp	r3, #0
 8001702:	d148      	bne.n	8001796 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0220 	bic.w	r2, r2, #32
 8001712:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001722:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2220      	movs	r2, #32
 8001738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	2b01      	cmp	r3, #1
 8001742:	d123      	bne.n	800178c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0210 	bic.w	r2, r2, #16
 8001758:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b10      	cmp	r3, #16
 8001766:	d10a      	bne.n	800177e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fe79 	bl	800147c <HAL_UARTEx_RxEventCallback>
 800178a:	e002      	b.n	8001792 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7fe fd71 	bl	8000274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e002      	b.n	800179c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800179a:	2302      	movs	r3, #2
  }
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017de:	f023 030c 	bic.w	r3, r3, #12
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	430b      	orrs	r3, r1
 80017ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699a      	ldr	r2, [r3, #24]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <UART_SetConfig+0x114>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d103      	bne.n	8001814 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800180c:	f7ff fbe8 	bl	8000fe0 <HAL_RCC_GetPCLK2Freq>
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	e002      	b.n	800181a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001814:	f7ff fbd0 	bl	8000fb8 <HAL_RCC_GetPCLK1Freq>
 8001818:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	009a      	lsls	r2, r3, #2
 8001824:	441a      	add	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	4a22      	ldr	r2, [pc, #136]	; (80018bc <UART_SetConfig+0x118>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	0119      	lsls	r1, r3, #4
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	009a      	lsls	r2, r3, #2
 8001844:	441a      	add	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <UART_SetConfig+0x118>)
 8001852:	fba3 0302 	umull	r0, r3, r3, r2
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	fb00 f303 	mul.w	r3, r0, r3
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	3332      	adds	r3, #50	; 0x32
 8001864:	4a15      	ldr	r2, [pc, #84]	; (80018bc <UART_SetConfig+0x118>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001870:	4419      	add	r1, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009a      	lsls	r2, r3, #2
 800187c:	441a      	add	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fbb2 f2f3 	udiv	r2, r2, r3
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <UART_SetConfig+0x118>)
 800188a:	fba3 0302 	umull	r0, r3, r3, r2
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2064      	movs	r0, #100	; 0x64
 8001892:	fb00 f303 	mul.w	r3, r0, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	3332      	adds	r3, #50	; 0x32
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <UART_SetConfig+0x118>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	f003 020f 	and.w	r2, r3, #15
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	440a      	add	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40013800 	.word	0x40013800
 80018bc:	51eb851f 	.word	0x51eb851f

080018c0 <__libc_init_array>:
 80018c0:	b570      	push	{r4, r5, r6, lr}
 80018c2:	2600      	movs	r6, #0
 80018c4:	4d0c      	ldr	r5, [pc, #48]	; (80018f8 <__libc_init_array+0x38>)
 80018c6:	4c0d      	ldr	r4, [pc, #52]	; (80018fc <__libc_init_array+0x3c>)
 80018c8:	1b64      	subs	r4, r4, r5
 80018ca:	10a4      	asrs	r4, r4, #2
 80018cc:	42a6      	cmp	r6, r4
 80018ce:	d109      	bne.n	80018e4 <__libc_init_array+0x24>
 80018d0:	f000 f81a 	bl	8001908 <_init>
 80018d4:	2600      	movs	r6, #0
 80018d6:	4d0a      	ldr	r5, [pc, #40]	; (8001900 <__libc_init_array+0x40>)
 80018d8:	4c0a      	ldr	r4, [pc, #40]	; (8001904 <__libc_init_array+0x44>)
 80018da:	1b64      	subs	r4, r4, r5
 80018dc:	10a4      	asrs	r4, r4, #2
 80018de:	42a6      	cmp	r6, r4
 80018e0:	d105      	bne.n	80018ee <__libc_init_array+0x2e>
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
 80018e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e8:	4798      	blx	r3
 80018ea:	3601      	adds	r6, #1
 80018ec:	e7ee      	b.n	80018cc <__libc_init_array+0xc>
 80018ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80018f2:	4798      	blx	r3
 80018f4:	3601      	adds	r6, #1
 80018f6:	e7f2      	b.n	80018de <__libc_init_array+0x1e>
 80018f8:	08001938 	.word	0x08001938
 80018fc:	08001938 	.word	0x08001938
 8001900:	08001938 	.word	0x08001938
 8001904:	08001940 	.word	0x08001940

08001908 <_init>:
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190a:	bf00      	nop
 800190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190e:	bc08      	pop	{r3}
 8001910:	469e      	mov	lr, r3
 8001912:	4770      	bx	lr

08001914 <_fini>:
 8001914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001916:	bf00      	nop
 8001918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800191a:	bc08      	pop	{r3}
 800191c:	469e      	mov	lr, r3
 800191e:	4770      	bx	lr
